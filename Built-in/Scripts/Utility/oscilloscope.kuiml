<?xml version="1.0" encoding="utf-8" ?>
<SKIN layout_type="row" h_margin="8" v_margin="2">  

  <!-- Exposing these objects for render script -->
  <EXPOSED_OBJECTS object_ids="$script_output_string0$;curve_canvas.width;curve_canvas.height"/>
  
  <!--Oscilloscope graph -->
  <PNS_LCD_GROUP_BOX layout_type="layer_stack">
    <!-- grid and curve -->
    <LAYER_STACK width="512" height="221">
      <CANVAS id="curve_canvas" width="100%" height="100%"
      
      render_script="
         /* Retrieve the context */
         Kt::Graphics::Context@ ctx=Kt::Graphics::GetCurrentContext();
         
         /* Drawing reverse (bottom to top), from center */
         double height=.5*curve_canvas.height;
         ctx.transform.Translate(0,height);
         ctx.transform.Scale(1.0,-1.0);
         
          /* drawing mid-line*/
         ctx.source.SetRGB(.5,.5,.5);
         ctx.settings.lineWidth=1;
         ctx.path.Clear();
         ctx.path.MoveTo(0,0);
         ctx.path.LineTo(curve_canvas.width,0);
         ctx.StrokePath();
         
         /* Setting up color and line width*/
         ctx.source.SetRGB(.33,0.77,1.0);
         ctx.settings.lineWidth=1;
         
         /* drawing waveform*/
         ctx.path.Clear();
         string audioData=$script_output_string0$;
         array&lt;string&gt; values=audioData.split(&quot;;&quot;);
         double x=0;
         double xInc=curve_canvas.width/values.length;
         for(uint i=0;i&lt;values.length;i++)
         {
            double audioValue=parseFloat(values[i]);
            if(i==0)
              ctx.path.MoveTo(x,audioValue*height);
            else
              ctx.path.LineTo(x,audioValue*height);
              x+=xInc;
         }
         ctx.StrokePath();
      "/>
      <ACTION_TRIGGER event_id="$script_output_string0$.value_changed" action_id="curve_canvas.Invalidate"/>
    </LAYER_STACK>
  </PNS_LCD_GROUP_BOX>
</SKIN>