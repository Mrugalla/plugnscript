<?xml version="1.0" encoding="utf-8" ?>
<SKIN lm_lic="e4f6ea7b8d6df211" author="Ilya Orlov" name="LetiMix Basic Skin" font_size_mode="character" refresh_priority="idle" refresh_time_ms="40" background_color="#0984E3" font_size="14" text_color="#000000" lm_text_color_src="body" lm_skin_ver="1.1" right_click_action="OpenMenu" show_warnings="true" language_version="2.5">

  <!--   THIS IS A DEMO SINGLE-FILE VERSION OF LETIMIX SKIN, BUILD 200615    -->
  <!--  FREE DOWNLOAD FULL LATEST VERSION HERE: http://letimix.com/pns-skin/  -->

  <!-- skin vars -->
  <VARIABLE id="PLUGIN_VERSION" value="" override="true" />
  <VARIABLE id="PLUGIN_BUILDDATE" value="200615" override="true" />
  <VARIABLE id="SKIN_FILE" value="$_FILE_$" />
  <VARIABLE id="SKINS_DIR" value="$_DIR_$" />
  <VARIABLE id="LM_SUBDIR" value="LetiMix" />

  <!-- include required defines, templates and mappings (it's the only required include) -->
  
<DUMMY>
	<!-- basic defines -->
	<DEFINE>
		<VAR base_type="VARIABLE" override="true" />
		<LV base_type="LOCAL_VARIABLE" override="true" value="" />
		<R base_type="REPEAT" />
		<EPARAM base_type="PARAM" min="0" max="1" default="0" exposed="true" />
	  <FPARAM base_type="FORMULA_PARAM" min="0" max="1" default="0" exposed="true" />
	  <ESTRING base_type="STRING" exposed="true" default="" />
	  <INC base_type="INCLUDE_ONCE" ignore_missing="true" />
	</DEFINE>

	<!-- define subdir names -->
	<VAR id="LM_DIR" value="$_DIR_$$LM_SUBDIR$/" _old_value="$_DIR_$" />
	<VAR id="SKINS_DIR" value="$_DIR_$" _old_value="$LM_DIR$../" />
	<VAR id="CONTROLS_SUBDIR" value="controls" />
	<VAR id="EDITORS_SUBDIR" value="editors" />
	<VAR id="EDITORS_USER_DATA_SUBDIR" value="user_data" />
	<VAR id="EDITORS_USER_DATA_DIR" value="$LM_DIR$$EDITORS_SUBDIR$/$EDITORS_USER_DATA_SUBDIR$/" />
	<VAR id="DECOR_SUBDIR" value="decorations" />
	<VAR id="LAYOUTS_SUBDIR" value="layouts" />
	<VAR id="SCRIPTS_SUBDIR" value="scripts" />
	<VAR id="THEMES_SUBDIR" value="themes" />
	<VAR id="FONTS_SUBDIR" value="fonts" />
	<VAR id="EXTENSIONS_SUBDIR" value="extensions" />
	<VAR id="EXTENSIONS_DIR" value="$LM_DIR$$EXTENSIONS_SUBDIR$/" />
	<VAR id="KUIML_DIR" value="$SKINS_DIR$" /> <!-- may be useful for exported plugins -->
	

	<VAR id="LM_CORE_VER" value="1.1" />
	<VAR id="LM_CORE_BUILD" value="200324" />

	<!-- check if plugin builddate is set or not -->
	<VAR id="PLUGIN_BUILDDATE" script="if (&quot;$PLUGIN_BUILDDATE$&quot; == &quot;$&quot;+&quot;PLUGIN_BUILDDATE$&quot;) return &quot;000000&quot;; else return &quot;$PLUGIN_BUILDDATE$&quot;;" />
	
	<!-- define cursors to be able to override them later for unsupported DAWs/OS like Reaper -->
	<VAR id="CUR_HAND" value="system::hand" />
	<VAR id="CUR_CROSS" value="system::cross" />
	<VAR id="CUR_OPEN_HAND" value="system::open_hand" />
	<VAR id="CUR_SIZE" value="system::size" />
	<VAR id="CUR_SIZE_V" value="system::size_v" />
	<VAR id="CUR_SIZE_H" value="system::size_h" />
	<VAR id="CUR_SIZE_UP_LEFT" value="system::size_up_left" />
	<VAR id="CUR_IBEAM" value="system::Ibeam" />

	<!-- more defines -->
	<DEFINE>
		<LS base_type="CELL" layout_type="layer_stack" />
		<ACT base_type="ACTION" type="Script" />

	  <IAB base_type="INVISIBLE_ACTION_BUTTON" width="100%" height="100%" cursor="$CUR_HAND$" />
	  <IPB base_type="INVISIBLE_PARAM_BUTTON" positions_count="2" width="100%" height="100%" cursor="$CUR_HAND$" />
	  <IPMB base_type="INVISIBLE_PARAM_MENU_BUTTON" width="100%" height="100%" cursor="$CUR_HAND$" reverse_mouse_wheel="true" />

	  <ONLOAD base_type="ACTION_TRIGGER" event_id="window.loaded.value_changed" condition_formula="window.loaded==1" />
	  <ONCLOSE base_type="ACTION_TRIGGER" event_id="window.loaded.value_changed" condition_formula="window.loaded==0" />
	  <ONALIVE base_type="ACTION_TRIGGER" event_id="alive.value_changed" condition_formula="alive==1" />
	  <ONDEAD base_type="ACTION_TRIGGER" event_id="alive.value_changed" condition_formula="alive==0" />
	  <TT base_type="TOOLTIP" width="100%" height="100%" />

	  <IS_LM_SKIN base_type="VARIABLE" id="IS_LM_SKIN" value="1" override="true" />
	</DEFINE>
	
	<!-- expose data model params -->
	<REQUIRED_OBJECTS object_ids="model.*;shared.*;global.*" />

	<!-- include common scriptbase and update canvas number counter -->
	<TEMPLATE id="COMMON_SCRIPTS" n='0' p='' include_lmr_scripts="0" include_common_renders="1">
	  <!-- update LMID (used to generate unique IDs for CANVAS-based and other elements) -->
	  <VAR id='LMID' formula='($n$==0)*($LMID$)+($n$>0)*($n$)' />
	  <VAR id='LMPR' value='$p$' /> <!-- usually used as prefix in conjunction with LMID -->
	  <!-- create dummy CANVAS to prevent stripping Kt::Graphics::GetCurrentContext -->
	  <CELL display="false"><CANVAS opacity="0" width="0" height="0" render_script="auto ctx=Kt::Graphics::GetCurrentContext();" /></CELL>
	  <VAR id="PI" formula="pi" />
	  <VAR id="UNKNOWN_VALUE" formula="-99999999" />

	  <VAR id="SCRIPTS_DIR" value="$LM_DIR$$SCRIPTS_SUBDIR$/" />
	  
	  <SCRIPT requires="" preprocess="true" script="





const double UNKNOWN_VALUE = -99999999;
const double pi = 3.141592653589793238462;
const double pi2 = pi/2;
const double twopi = pi*2;
const double sqrt2rev = 0.707106781186;
const double sqrt2 = sqrt(2);





string getDirForFile(string filename, bool with_ending_slash = true) {
  confirmPath(filename);
  int shift = 0;
  if (with_ending_slash) shift = 1;
  return filename.substr(0, filename.findLast(&quot;/&quot;)+shift); 
}

string getBaseFilename(string filename, bool including_ext = true) {
  confirmPath(filename);
  string res = filename.substr(filename.findLast(&quot;/&quot;)+1);
  if (!including_ext) {
    res = strTill(res, &quot;.&quot;);
  }
  return res; 
}

string getFileRelToDir(string filename, string dir, int shift = -1) {
  int pos = filename.findFirst(dir);
  if (pos == 0) {
    return filename.substr(dir.length+shift);
  } else {
    return filename;
  }
}

bool isRelativePath(string path){
  confirmPath(path);
  if ((path.findFirst(&quot;/&quot;) &lt; 0) or (path.findFirst(&quot;/&quot;) > 3) or (path[0]=='.')) {
    return true;
  } else {
    return false;
  }
}

void confirmPath(string &amp; path){
  replaceString(path, &quot;\\&quot;, &quot;/&quot;);
  replaceString(path, &quot;//&quot;, &quot;/&quot;);
  
  if (path.findFirst(&quot;..&quot;) >-1) {
    array&lt;string> pieces = path.split(&quot;/&quot;);
    array&lt;string> pieces_res;
    if (pieces.length>0) {
      string prev_piece = &quot;&quot;;
      pieces_res.insertLast(pieces[0]);
      for(uint i=1;i&lt;pieces.length;i++) {
          if (pieces[i] == &quot;..&quot;) {
            pieces_res.removeLast();
            continue;
          };
          pieces_res.insertLast(pieces[i]);
      }
      path = join(pieces_res, &quot;/&quot;);
    }
  }
}

int copyFile(string src, string dst){
  filesystem fs;
  return fs.copyFile(src,dst);
}

/*
int copyFileMacOld(string src, string dst){
  file srcFile;
  if (srcFile.open(src, &quot;r&quot;) >= 0) {
    file destFile;
    if (destFile.open(dst, &quot;w&quot;) >= 0) {
      while (!srcFile.isEndOfFile()) {
          destFile.writeUInt(srcFile.readUInt(1), 1);
      }
      destFile.close();
    } else return -1;
    srcFile.close();
  } else return -1;
  return 0;
}
*/


string getHMS(){
    datetime d;
    string s = formatFloat(d.get_hour(),&quot;0&quot;, 2, 0) + &quot;:&quot; + formatFloat(d.get_minute(),&quot;0&quot;, 2, 0) + &quot;:&quot; + formatFloat(d.get_second(),&quot;0&quot;, 2, 0);
    
    return s;
}

string getYMD(){
    datetime d;
    string s = formatFloat(d.get_year(),&quot;0&quot;, 4, 0) + &quot;-&quot; + formatFloat(d.get_month(),&quot;0&quot;, 2, 0) + &quot;-&quot; + formatFloat(d.get_day(),&quot;0&quot;, 2, 0);
    
    return s;
}

double round(double d, double p = 2) {
    double x = pow(10, p);
    
    double r = floor(d*x+0.5)/x ;
    
    return r;
}

int roundDoubleToInt(double d){
 if(d&lt;0)
     return int(d-.5);
 else
     return int(d+.5);
}

int rint(double d){
 if(d&lt;0)
     return int(d-.5);
 else
     return int(d+.5);
}


double f(string s) { return parseFloat(s); }


double de(double d){
  if (! (d &lt; -1.0e-8 || d > 1.0e-8)) d = 0;
  return d;
}

void denorm(double &amp; d){
  if (! (d &lt; -1.0e-8 || d > 1.0e-8)) d = 0;
}


double angDiffR(double a1, double a2){
  if (a1>pi) a1-=twopi;
  if (a1&lt;-pi) a1+=twopi;
  if (a2>pi) a2-=twopi;
  if (a2&lt;-pi) a2+=twopi;
  double adiff = (a1-a2);
  if (abs(adiff) > pi) {
    a1+=twopi;
    adiff = (a1-a2);
    if (abs(adiff) > pi) {
      a1-=twopi;
      a2+=twopi;
      adiff = (a1-a2);
    }
  }
  return adiff;
}

void replaceString(string &amp; ioString,const string &amp;in stringToFind,const string &amp;in replaceString) {
    array&lt;string>@ pieces=ioString.split(stringToFind);
    if(@pieces!=null)
    {
      if(pieces.length>0)
        ioString=pieces[0];
      for(uint i=1;i&lt;pieces.length;i++)
      {
          ioString+=replaceString;
          ioString+=pieces[i];
      }
    }
}

string strtolower(string s){
  for(uint i=0;i&lt;s.length;i++){
    if ((s[i]>=65) and (s[i]&lt;=90)) s[i]=s[i]+32;
  }
  return s;
}


string trim(string s, string char = &quot;&quot;) {
  int first_not_empty = s.findFirstNotOf(&quot; \n\r\t&quot;);
  if (first_not_empty > 0) {
    s.erase(0, first_not_empty);
  }
  /* findLastNotOf not yet working
  int last_not_empty = s.findLastNotOf(&quot; \n\r&quot;);
  if (last_not_empty > 0) {
    s.erase(last_not_empty, 1000);
  } */
  for(int n=int(s.length)-1; n>=0; n--) {
    int tc = s[n];
    
    if (tc&lt;33) {
      s.erase(n);
    } else {
      break;
    }
  }

  return s;
}


string escape(string s){
  string se = s;
  replaceString(se, &quot;&lt;&quot;, &quot;&amp;lt;&quot;);
  replaceString(se, &quot;\&quot;&quot;, &quot;&amp;quot;&quot;);
  return se;
}

string escapeq(string s){
  string se = escape(s);
  replaceString(se, &quot;'&quot;, &quot;`&quot;);
  return se;
}

string str_repeat(string s, int repeat){
  string r;
  for(int n=0;n&lt;repeat;n++) {
    r = r+s;
  }
  return r;
}



string strFrom(string s, string from, int shift = 0){
  int pos = s.findFirst(from);
  if (pos >-1) return s.substr(pos+shift);
  return &quot;&quot;;
}

string strFrom(string s, array&lt;string> from_ar, int shift = 0){
  int pos = findFirstAny(s, from_ar);
  if (pos >-1) return s.substr(pos+shift);
  return &quot;&quot;;
}

string strTill(string s, string till, int shift = 0){
  int pos = s.findFirst(till);
  if (pos >-1) return s.substr(0, pos+shift);
  return s;
}

string strTill(string s, array&lt;string> till_ar, int shift = 0){
  int pos = findFirstAny(s, till_ar);
  if (pos >-1) return s.substr(0, pos+shift);
  return s;
}



int findFirstAny(string s, array&lt;string> needles_ar, int lastpos = 0){
  int pos = -1, best_pos = -1;
  for(uint i=0;i&lt;needles_ar.length;i++) {
    pos = s.findFirst(needles_ar[i], lastpos);
    if ((pos >=0) and ((best_pos > pos) or (best_pos &lt; 0))) best_pos = pos;
  }
  return best_pos;
}

int removeFromArray(array&lt;string> &amp; list, string &amp;in value){
    int pos = list.find(value);
    if (pos>-1) {
        list.removeAt(pos);
    }
    return pos;
}




void convertRGBtoHSL(double &amp;in r, double &amp;in g, double &amp;in b, double &amp;out h, double &amp;out s, double &amp;out l){
   double cmax = r;
   if (g>cmax) cmax = g;
   if (b>cmax) cmax = b;
   double cmin = r;
   if (g&lt;cmin) cmin = g;
   if (b&lt;cmin) cmin = b;
   double delta = cmax-cmin;
   if (delta == 0) {
    h = 0;
   } else if (cmax == r) {
    h = 60 * (((g-b)/delta));
    if (g&lt;b) h+=360;
   } else if (cmax == g) {
    h = 60 * (((b-r)/delta) + 2);
   } else {
    h = 60 * (((r-g)/delta) + 4);
   }
   l=(cmax+cmin)/2;
   if (delta == 0) {
    s = 0;
   } else {
    s = delta/(1-abs(2*l-1));
   }
}


void convertHSLtoRGB(double &amp;in h, double &amp;in s, double &amp;in l, double &amp;out r, double &amp;out g, double &amp;out b){
  double c = (1-abs(2*l-1))*s;
  double x = c*(1-abs(((h/60)%2) - 1));
  double m = l-c/2;
  if (h&lt;60) {
    r = c; g = x; b = 0;
  } else if (h&lt;120) {
    r = x; g = c; b = 0;
  } else if (h&lt;180) {
    r = 0; g = c; b = x;
  } else if (h&lt;240) {
    r = 0; g = x; b = c;
  } else if (h&lt;300) {
    r = x; g = 0; b = c;
  } else {
    r = c; g = 0; b = x;
  }
  r += m; g += m; b += m;
}



void saveDebug(string data, string filename = &quot;&quot;){
  file f;
  if (filename == &quot;&quot;) filename = &quot;&quot;&quot;$SKINS_DIR$debug.txt&quot;&quot;&quot;;
  confirmPath(filename);
  datetime d;
  data = data+&quot;\n\nSAVED: &quot;+formatFloat(d.get_hour(),&quot;0&quot;, 2, 0) + &quot;:&quot; + formatFloat(d.get_minute(),&quot;0&quot;, 2, 0) + &quot;:&quot; + formatFloat(d.get_second(),&quot;0&quot;, 2, 0);

  if (f.open(filename, &quot;w&quot;) >= 0) {
    bool ok = (f.writeString(data) > 0);
    f.close();
  }
}

string cp866_cp1251( string &amp; s ) {
  for (uint i=0; i&lt;s.length; i++) {
    if ((s[i]>127) &amp;&amp; (s[i]&lt;176)) {
      s[i] += 64;
    } else if ((s[i]>223) &amp;&amp; (s[i]&lt;240)) {
      s[i] += 16;
    }
  }
  return s;
}


" _src="$SCRIPTS_DIR$common.as" />
	  
	  <!-- different stuff for Windows and Mac -->
	  <IF_WINDOWS>
	  	<SCRIPT script="bool IS_WINDOWS = true; bool IS_MAC = false; " />
	  </IF_WINDOWS>

	  <IF_MAC>
	  	<SCRIPT script="bool IS_WINDOWS = false; bool IS_MAC = true; " />
	  </IF_MAC>

		<!-- additional scripting possibilities -->
	  <SCRIPT script="
	  	/* status set  */
	  	void status(string text){  
	  		status_custom_text = text; 
	  	} 
	  	/* status get */
	  	string status(){ 
	  		return &quot;&quot; + status_custom_text; 
	  	} 
			/* animated status fade-in/fade-out messages */
			void status(string text, float seconds_to_show){
				st_anim_timer_passed = 0;
				st_anim_timer_end = seconds_to_show*1000; /* from seconds to milliseconds */
				if (st_anim_timer.enabled &lt; 1) {
					if (status_custom_text_prev == &quot;&quot;) { 
						status_custom_text_prev = status(); 
					}
					st_anim_timer.enabled = true;
				}
				a_status_custom_text_opacity = 0;
				status(text);
			}
	  	" requires="st_anim_timer.enabled;st_anim_timer_passed;st_anim_timer_end;a_status_custom_text_opacity;status_custom_text;status_custom_text_prev" />
		
	  <!-- include LMR scripts -->
	  <VAR id="SCRIPTS_LMR_DIR" value="$LM_DIR$$CONTROLS_SUBDIR$/LMR_scripts/" />
		
		<R count="(($include_lmr_scripts$==1) + ($include_common_renders$==1))>0">
			<SCRIPT requires="" preprocess="true" script="



namespace LM{

  
  CanvasLight Light();
  CanvasCamera Camera();
  CanvasRenderSettingsParser RenderSettingsParser();

  
  enum RenderSettingsFromKUIMLLight{
    _RS_TYPE, _RS_INDEX, _RS_ENABLED, _RS_PREVIEW, _RS_ANGLE, _RS_ALT, _RS_DISTANCE, _RS_SIZE, _RS_INTENSITY, _RS_COLOR, _RS_X, _RS_Y, _RS_Z, _RS_REL_INDEX 
  }

  enum RenderSettingsFromKUIMLCamera{
    _RS_TYPE_, _RS_CAM_DISTANCE, _RS_CAM_PERSPECTIVE, _RS_CAM_X_OFFSET, _RS_CAM_Y_OFFSET
  }

  
  enum LightSourceParams{
    LS_ENABLED, LS_PREVIEW, LS_ANGLE, LS_ANGLE_RAD, LS_ALT, LS_ALT_RAD, LS_DISTANCE, LS_SIZE, LS_INTENSITY, LS_COLOR_R, LS_COLOR_G, LS_COLOR_B, LS_COLOR_H, LS_COLOR_S, LS_COLOR_L, LS_X, LS_Y, LS_Z, LS_RELATIVE_INDEX, LS_REL_ANGLE, LS_REL_ALT, LS_REL_DISTANCE, LS_REL_DISTANCE_MULT, LS_REL_SIZE, LS_REL_SIZE_MULT, LS_REL_INTENSITY, LS_REL_INTENSITY_MULT, LS_REL_X, LS_REL_Y, LS_REL_Z
  }

  
  class CanvasRenderSettingsParser{

    
    CanvasRenderSettingsParser(){
      
      if (render_settings_data == &quot;&quot;) {
        render_settings_data = &quot;$RENDER_SETTINGS_DATA$&quot;;
      }
      parseString(render_settings_data);

      
      if (Light.has_relative_sources) Light.recalcAllRelativeLightSources();
    }

    
    void parseString(string rs){
      Light.has_relative_sources = false;

      
      array&lt;string> arr = rs.split(&quot;||&quot;);

      
      for(uint n=0;n&lt;arr.length;n++) {
        if (!arr[n].isEmpty()) {
          array&lt;string> ar = arr[n].split(&quot;;&quot;);
          if (ar[_RS_TYPE] == &quot;ls&quot;) {
            ar.resize(_RS_REL_INDEX+1);
            if (ar[_RS_INDEX] == &quot;&quot;) continue;
            if (ar[_RS_ENABLED] == &quot;&quot;) continue;
            
            int ls_index = parseInt(ar[_RS_INDEX]);

            int rel_index = parseInt(ar[_RS_REL_INDEX]);
            if (ar[_RS_REL_INDEX] == &quot;&quot;) rel_index = -1;
            if (rel_index > -1) Light.has_relative_sources = true;

            
            double x = f(ar[_RS_X]), y = f(ar[_RS_Y]), z = f(ar[_RS_Z]);
            if ((x+y+z) != 0) {
              Light.setSourceXYZ(ls_index, rel_index, f(ar[_RS_ENABLED]), f(ar[_RS_PREVIEW]), x, y, z, f(ar[_RS_SIZE]), f(ar[_RS_INTENSITY]), ar[_RS_COLOR], arr[n] );
            } else {
              
              Light.setSource(ls_index, rel_index, f(ar[_RS_ENABLED]), f(ar[_RS_PREVIEW]), f(ar[_RS_ANGLE]), f(ar[_RS_ALT]), f(ar[_RS_DISTANCE]), f(ar[_RS_SIZE]), f(ar[_RS_INTENSITY]), ar[_RS_COLOR], arr[n] );
            }
          } else if (ar[_RS_TYPE] == &quot;cam&quot;) {
            
            Camera.distance = f(ar[_RS_CAM_DISTANCE]);
            Camera.perspective = f(ar[_RS_CAM_PERSPECTIVE]);
            Camera.x_offset = f(ar[_RS_CAM_X_OFFSET]);
            Camera.y_offset = f(ar[_RS_CAM_Y_OFFSET]);
          } else if (ar[_RS_TYPE] == &quot;amb&quot;) {
            Light.ambient_intensity = f(ar[_RS_TYPE_+1]);
          } else if (ar[_RS_TYPE] == &quot;rid&quot;) {
            Light.ref_intensity_distance = f(ar[_RS_TYPE_+1]);
          }
        }
      }

      Light.calcCombinedLight();
    }


  }

  class CanvasCamera{
    
    double perspective = 22, distance = 1000, x_offset = 0, y_offset = 0;
  }

  
  
  class CanvasLight{

    array&lt;array&lt;double>> sources; 

    
    double ref_intensity_distance = 500;
    double ambient_intensity = 0.45; 

    private array&lt;double> _default_source = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,1,0,1,0,1,0,0,0}; 

    bool has_relative_sources = false;

    
    void setSourceXYZ(int index, int rel_to, double enabled, double preview, double x, double y, double z, double size, double intensity, string color, string sourceLine = &quot;&quot;){
      
      
      double distance = sqrt(x*x + y*y + z*z); 
      double alt = atan2(z, sqrt(distance*distance - z*z))*180/pi;
      
      double angle = atan2(x,-y)*180/pi;
      

      
      setSource(index, rel_to, enabled, preview, angle, alt, distance, size, intensity, color, sourceLine);
    }

    
    void setSource(int index, int rel_to, double enabled, double preview, double angle, double alt, double distance, double size, double intensity, string color, string sourceLine = &quot;&quot;) {
      
      
      double angleR = angle*pi/180;

      
      if (alt &lt;= 0) alt = 0.05;
      if (alt >= 180) alt = 179.95;
      double altR = alt*pi/180;

      
      double r = double(parseInt(color.substr(1,2),16))/255.0;
      double g = double(parseInt(color.substr(3,2),16))/255.0;
      double b = double(parseInt(color.substr(5,2),16))/255.0;
      double hue,sat,lig;
      convertRGBtoHSL(r,g,b,hue,sat,lig);

      
      
      
      double x = cos(angleR-pi2)*distance*cos(altR);
      double y = sin(angleR-pi2)*distance*cos(altR);
      double z = sin(altR)*distance;

      
      verifyIndexes(index);

      
      array&lt;double>@ s = sources[index];
      if (enabled > -1) s[LS_ENABLED] = enabled;
      s[LS_ENABLED] = enabled;
      s[LS_PREVIEW] = preview;
      s[LS_ANGLE] = angle;
      s[LS_ANGLE_RAD] = angleR;
      s[LS_ALT] = alt;
      s[LS_ALT_RAD] = altR;
      s[LS_DISTANCE] = distance;
      s[LS_SIZE] = size;
      s[LS_INTENSITY] = intensity;
      s[LS_COLOR_R] = r;
      s[LS_COLOR_G] = g;
      s[LS_COLOR_B] = b;
      s[LS_COLOR_H] = hue;
      s[LS_COLOR_S] = sat;
      s[LS_COLOR_L] = lig;
      s[LS_X] = x;
      s[LS_Y] = y;
      s[LS_Z] = z;

      
      if ((rel_to != index) and (rel_to > -1) and (rel_to &lt; int(sources.length))) {
        setSourceRelative(index, rel_to, sourceLine);
      }

      
      calcRelativeSources(index);
    }

    
    void setSourceRelative(int index, int rel_to, string sourceLine = &quot;&quot;){

      array&lt;double>@ s = sources[index];
      s[LS_RELATIVE_INDEX] = rel_to;

      if (sourceLine.isEmpty()) return;

      array&lt;string> ar = sourceLine.split(&quot;;&quot;);

      
      if (isPlusMinus(ar[_RS_ANGLE])) s[LS_REL_ANGLE] = f(ar[_RS_ANGLE]);
      if (isPlusMinus(ar[_RS_ALT])) s[LS_REL_ALT] = f(ar[_RS_ALT]);
      if (isPlusMinus(ar[_RS_DISTANCE])) s[LS_REL_DISTANCE] = f(ar[_RS_DISTANCE]);
      if (isPlusMinus(ar[_RS_SIZE])) s[LS_REL_SIZE] = f(ar[_RS_SIZE]);
      if (isPlusMinus(ar[_RS_INTENSITY])) s[LS_REL_INTENSITY] = f(ar[_RS_INTENSITY]);

      
      if (isMultiply(ar[_RS_DISTANCE])) s[LS_REL_DISTANCE_MULT] = f(ar[_RS_DISTANCE].substr(1));
      if (isMultiply(ar[_RS_SIZE])) s[LS_REL_SIZE_MULT] = f(ar[_RS_SIZE].substr(1));
      if (isMultiply(ar[_RS_INTENSITY])) s[LS_REL_INTENSITY_MULT] = f(ar[_RS_INTENSITY].substr(1));
      if (!ar[_RS_X].isEmpty()) s[LS_REL_X] = f(ar[_RS_X]);
      if (!ar[_RS_Y].isEmpty()) s[LS_REL_Y] = f(ar[_RS_Y]);
      if (!ar[_RS_Z].isEmpty()) s[LS_REL_Z] = f(ar[_RS_Z]);
    }


    
    void setAngle(int index, double angle) {
      verifyIndexes(index);

      array&lt;double>@ s = sources[index];

      
      double angleR = angle*pi/180;
      double altR = s[LS_ALT_RAD];
      double distance = s[LS_DISTANCE];

      
      double x = cos(angleR-pi2)*distance*cos(altR);
      double y = sin(angleR-pi2)*distance*cos(altR);
      double z = sin(altR)*distance;

      s[LS_ANGLE] = angle;
      s[LS_ANGLE_RAD] = angleR;
      s[LS_X] = x;
      s[LS_Y] = y;
      s[LS_Z] = z;

      
      if (has_relative_sources) calcRelativeSources(index);
    }

    
    void recalcAllRelativeLightSources() {
      if (!has_relative_sources) return;
      for(uint n=0;n&lt;sources.length;n++) {
        calcRelativeSources(int(n));
      }
    }

    
    void calcRelativeSources(int index) {
      if (!has_relative_sources) return;
      double parent = rint(index);
      array&lt;double>@ p = sources[index];
      double angle, angleR, alt, altR, distance, size, intensity, mult, x, y, z, xr, yr, zr;

      
      for(uint n=0;n&lt;sources.length;n++) {
        
        if (closeTo(sources[n][LS_RELATIVE_INDEX],parent, 0.1)) {
          array&lt;double>@ c = sources[n];
          
          angle = p[LS_ANGLE] + c[LS_REL_ANGLE];
          if (angle > 180) angle -= 360;
          if (angle &lt; -180) angle += 360;
          c[LS_ANGLE] = angle;
          angleR = angle*pi/180;
          c[LS_ANGLE_RAD] = angleR;
          
          alt = p[LS_ALT] + c[LS_REL_ALT];
          if (alt &lt;= 0) alt = 0.05;
          if (alt >= 180) alt = 179.95;
          c[LS_ALT] = alt;
          altR = alt*pi/180;
          c[LS_ALT_RAD] = altR;
          
          distance = p[LS_DISTANCE] + c[LS_REL_DISTANCE];
          mult = c[LS_REL_DISTANCE_MULT];
          if (mult != 0) distance *= mult;
          c[LS_DISTANCE] = distance;
          
          size = p[LS_SIZE] + c[LS_REL_SIZE];
          mult = c[LS_REL_SIZE_MULT];
          if (mult != 0) size *= mult;
          c[LS_SIZE] = size;
          
          intensity = p[LS_INTENSITY] + c[LS_REL_INTENSITY];
          mult = c[LS_REL_INTENSITY_MULT];
          if (mult != 0) intensity *= mult;
          c[LS_INTENSITY] = intensity;

          
          
          
          x = cos(angleR-pi2)*distance*cos(altR);
          y = sin(angleR-pi2)*distance*cos(altR);
          z = sin(altR)*distance;

          xr = c[LS_REL_X]; yr = c[LS_REL_Y]; zr = c[LS_REL_Z];

          x += xr; y += yr; z += zr;
          c[LS_X] = x; c[LS_Y] = y; c[LS_Z] = z;

          
          if ((xr + yr + zr) != 0) {
            distance = sqrt(x*x + y*y + z*z); 
            alt = atan2(z, sqrt(distance*distance - z*z))*180/pi;
            angle = -atan2(x,-y)*180/pi;

            c[LS_DISTANCE] = distance;
            c[LS_ANGLE] = angle;
            angleR = angle*pi/180;
            c[LS_ANGLE_RAD] = angleR;
            c[LS_ALT] = alt;
            altR = alt*pi/180;
            c[LS_ALT_RAD] = altR;
          }

          
          calcRelativeSources(n);
        }
      }
    }

    double CL_x, CL_y, CL_z, CL_r, CL_g, CL_b, CL_AngleR, CL_distance, CL_AltR;
    void calcCombinedLight(){
      
      
      CL_x = 0; CL_y = 0; CL_z = 0;
      CL_r = 1; CL_g = 1; CL_b = 1;
      CL_AltR = pi*0.5;
      CL_AngleR = 0;
      CL_distance = 600;

      
      array&lt;array&lt;double>>@ lights = Light.sources;
      int nlights = int(lights.length);
      if (nlights == 0) return;

      double total_intensity = 0;

      for(int ls_n = 0; ls_n &lt; nlights; ls_n++) {
        
        array&lt;double>@ ls = lights[ls_n];
        if (ls[LS_ENABLED] == 0) continue; 
        
        
        double Lintensity = ls[LS_INTENSITY]*(1/pow(ls[LS_DISTANCE]/Light.ref_intensity_distance, 2));

        CL_x += ls[LS_X]*Lintensity;
        CL_y += ls[LS_Y]*Lintensity;
        CL_z += ls[LS_Z]*Lintensity;

        CL_r += ls[LS_COLOR_R]*Lintensity;
        CL_g += ls[LS_COLOR_G]*Lintensity;
        CL_b += ls[LS_COLOR_B]*Lintensity;

        total_intensity += Lintensity;
      }

      CL_r /= total_intensity;
      CL_g /= total_intensity;
      CL_b /= total_intensity;

      
      CL_x /= total_intensity;
      CL_y /= total_intensity;
      CL_z /= total_intensity;

      
      CL_AngleR = atan2(CL_x, -CL_y);
      
      CL_distance = sqrt(CL_x*CL_x + CL_y*CL_y + CL_z*CL_z); 
      CL_AltR = atan2(CL_z, sqrt(CL_distance*CL_distance - CL_z*CL_z));  

      
    }

    
    void verifyIndexes(int index) {
      
      if (int(sources.length) &lt;= index) {
        sources.resize(index+1);
      }

      
      for(uint n=0;n&lt;sources.length;n++) {
        if (sources[n].length == 0) {
          sources[n] = _default_source;
        } 
      }
    }


    
    void Debug() {

      

      
      
      
      

      

      
    }

    
    bool isPlusMinus(string val) {
      
      return ((val[0] == 43) || (val[0] == 45));
    }
    
    bool isMultiply(string val) {
      
      return ((val[0] == 42));
    }
    
  } 


  


enum renderBoxEnum{
  RB_GRADIENT_TYPE,
  RB_GLOBAL_OPACITY,
  RB_GRADIENT_SHIFT,
  RB_STROKE_WIDTH,
  RB_STROKE_EXPAND,
  RB_STROKE_ROUND,
  RB_Y_OFFSET,
  RB_RESERVED_1,
  RB_RESERVED_2,
  RB_RESERVED_3,
  RB_BG1_COLOR = 10,
  RB_BG1_OPACITY,
  RB_BG1_POS,
  RB_BG2_COLOR,
  RB_BG2_OPACITY,
  RB_BG2_POS,
  RB_STROKE_COLOR,
  RB_STROKE_OPACITY,
  RB_RESERVED_4
}


void renderBox(double w, double h, string data, bool expand_invert = false) {
 auto ctx=Kt::Graphics::GetCurrentContext();
    array&lt;string> ar(20);
    ar = data.split(&quot;;&quot;);
    ar.resize(20);
    
    int gtype=parseInt(ar[RB_GRADIENT_TYPE]);
    double gop = parseFloat(ar[RB_GLOBAL_OPACITY]);
    double stroke_width=parseFloat(ar[RB_STROKE_WIDTH]);
    double expand=parseFloat(ar[RB_STROKE_EXPAND]);
    double round_size=parseFloat(ar[RB_STROKE_ROUND]);

    string fill_color=ar[RB_BG1_COLOR];
    double fill_opacity=parseFloat(ar[RB_BG1_OPACITY]);

    string stroke_color=ar[RB_STROKE_COLOR];
    double stroke_opacity=parseFloat(ar[RB_STROKE_OPACITY]);
    
    if (expand &lt; 0) { expand_invert = !expand_invert; expand=abs(expand); }
    double y_top = parseFloat(ar[RB_Y_OFFSET]);
    double s = round_size/2, sw2 = stroke_width/2;
    double x = s+sw2, y = y_top+sw2,  r, g, b, r2, g2, b2;
    ctx.path.Clear();

      /* draw corners using arcs */
      if (!expand_invert) { x -= expand; } else { y-=expand; }
      ctx.path.MoveTo(x,y);
      ctx.path.ArcNegative(x,y+s, s, 270, 180 ); 
      x-=s; y=h-s-sw2;
      if (expand_invert) { y+=expand; }
      ctx.path.LineTo(x, y);
      ctx.path.ArcNegative(x+s, y, s, 180, 90 ); 
      y+=s; x=w-s-sw2;
      if (!expand_invert) { x+=expand; }
      ctx.path.LineTo(x,y);
      ctx.path.ArcNegative(x,y-s, s, 90, 0); x+=s;
      y = y_top+s+sw2;
      if (expand_invert) { y-=expand; }
      ctx.path.LineTo(x, y);
      ctx.path.ArcNegative(x-s,y, s, 0, -90); 

    ctx.path.Close();
    
    r=double(parseInt(fill_color.substr(1,2),16))/255.0;
    g=double(parseInt(fill_color.substr(3,2),16))/255.0;
    b=double(parseInt(fill_color.substr(5,2),16))/255.0;

    if ((fill_opacity>0) or (gtype != 0)) {
      if (gtype == 0) {
      ctx.source.SetRGBA(r,g,b,fill_opacity*gop); 
      ctx.FillPath(); 
      } else {
        /* for gradients */
        double fill_pos=parseFloat(ar[RB_BG1_POS])/100;
        string fill_color2=ar[RB_BG2_COLOR];
        double fill_opacity2=parseFloat(ar[RB_BG2_OPACITY]);
        double fill_pos2=parseFloat(ar[RB_BG2_POS])/100;
        double shift = parseFloat(ar[RB_GRADIENT_SHIFT])/100;
        r2=double(parseInt(fill_color2.substr(1,2),16))/255.0;
        g2=double(parseInt(fill_color2.substr(3,2),16))/255.0;
        b2=double(parseInt(fill_color2.substr(5,2),16))/255.0;

        double ga=0, gb=0, gc=0, gd=0, gp1=fill_pos, gp2=fill_pos2, gp3=fill_pos2, gp4=fill_pos2;
        if ((gtype==1) or (gtype==3) or (gtype==4)) {
          gd = h;
        } else if (gtype==2) {
          gb = h;
        } else if ((gtype==5) or (gtype==7) or (gtype==8)) {
          gc = w;
        } else if (gtype==6) {
          ga = w;
        }
        if ((gtype==4) or (gtype==8)) {
          double z; 
          z=r; r=r2; r2=z;
          z=g; g=g2; g2=z;
          z=b; b=b2; b2=z;
          z=fill_opacity; fill_opacity=fill_opacity2; fill_opacity2=z;
          z=fill_pos; fill_pos=1-fill_pos2; fill_pos2=1-z;
        }
        if ((gtype==3) or (gtype==4) or (gtype==7) or (gtype==8)) {
          gp1=fill_pos;
          gp2=-0.5+fill_pos2;
          gp3=1.5-fill_pos2;
          gp4=1-fill_pos;
        }
        auto gradlb = ctx.get_patterns().NewLinearGradient(ga, gb, gc, gd);
        gradlb.AddColorStopRGBA(gp1+shift, r, g, b, fill_opacity*gop);
        gradlb.AddColorStopRGBA(gp2+shift, r2, g2, b2, fill_opacity2*gop);
        if ((gtype==3) or (gtype==4) or (gtype==7) or (gtype==8)) {
          gradlb.AddColorStopRGBA(gp3+shift, r2, g2, b2, fill_opacity2*gop);
          gradlb.AddColorStopRGBA(gp4+shift, r, g, b, fill_opacity*gop);
        }
        gradlb.SelectAsSource(); 
        ctx.FillPath(); 
      }
    } 
    ctx.settings.set_lineWidth(stroke_width);
    r=double(parseInt(stroke_color.substr(1,2),16))/255.0;
    g=double(parseInt(stroke_color.substr(3,2),16))/255.0;
    b=double(parseInt(stroke_color.substr(5,2),16))/255.0;
    ctx.source.SetRGBA(r,g,b,stroke_opacity*gop);
    ctx.StrokePath();
}













enum renderMeterEnum{
  RM_STYLE,
  RM_MIN_VAL,
  RM_MAX_VAL,
  RM_RES_1,
  RM_RES_2,
  RM_LEVEL_BG_OP = 5,
  RM_LED_DESIRED_QTY,
  RM_LED_MIN_SIZE,
  RM_LED_MAX_SIZE,
  RM_LED_SPACING,
  RM_HOLD_WIDTH = 10,
  RM_HOLD_COLORIZE,
  RM_INNER_PAD_H,
  RM_INNER_PAD_V,
  RM_RES_3,
  RM_STROKE_WIDTH = 15,
  RM_STROKE_EXPAND,
  RM_STROKE_ROUND,
  RM_LED_ROUND,
  /* 19-29 reserved */
  /* colors */
  RM_LH_R = 30, RM_LH_G, RM_LH_B, RM_LH_OP, RM_LH_POS, /* Level hi */
  RM_LM_R = 35, RM_LM_G, RM_LM_B, RM_LM_OP, RM_LM_POS, /* Level mid */
  RM_LL_R = 40, RM_LL_G, RM_LL_B, RM_LL_OP, RM_LL_POS, /* Level low */
  RM_HO_R = 45, RM_HO_G, RM_HO_B, RM_HO_OP, RM_HO_RESERVED, /* Hold line */
  RM_SS_R = 50, RM_SS_G, RM_SS_B, RM_SS_OP, RM_SS_RESERVED, /* Stripe stroke */
  RM_SB_R = 55, RM_SB_G, RM_SB_B, RM_SB_OP, RM_SB_RESERVED, /* Stripe bg */
}


void renderMeter(Kt::Graphics::Context@ ctx, double w, double h, double orientation, array&lt;double> &amp;in m, double level, double level_hold) {

  /* calculate coordinates */
  double style = m[RM_STYLE];
  double horizontal = 0, reverse = 0;
  if ((orientation == 1) or (orientation == 3)) { horizontal = 1; }
  if (orientation > 1.5) { reverse = 1; }
  
  double pad_left = m[RM_INNER_PAD_H];
  double pad_top = m[RM_INNER_PAD_V];
  if (horizontal > 0.5) {
    pad_top = m[RM_INNER_PAD_H];
    pad_left = m[RM_INNER_PAD_V];
  }
  double pad_right = pad_left;
  double pad_bottom = pad_top;
  double min_level=m[RM_MIN_VAL]; 
  double max_level=m[RM_MAX_VAL];
  double lev_bg_opacity=m[RM_LEVEL_BG_OP];
  double pad_v=pad_top+pad_bottom, pad_h=pad_left+pad_right;
  double hl = h-pad_v, wl = w-pad_h; /* height or width of levels */
  bool stroke_horizontal=(horizontal>0.5);
  double expand = m[RM_STROKE_EXPAND];
  double led_round = m[RM_LED_ROUND];
  double led_stroke_width = 0.01;

  if (expand &lt; 0) { stroke_horizontal = !stroke_horizontal; expand=abs(expand); }
  double g1, g2, g3, g4, r1, r2, r3, r4, hl1, hl2, hl3, hl4;

  /* fill back and stroke around all */
  ctx.path.Clear();
  ctx.settings.set_lineWidth(m[RM_STROKE_WIDTH]);
  double s=m[RM_STROKE_ROUND]/2, sw2 = m[RM_STROKE_WIDTH]/2; 
  if (s > (hl/2)) s = (hl/2);
  if (s > (wl/2)) s = (wl/2);
  double x=s+sw2, y=sw2;
  if (!stroke_horizontal) { x -= expand; } else { y-=expand; }
  ctx.path.MoveTo(x,y);
  ctx.path.ArcNegative(x,y+s, s, 270, 180 ); 
  x-=s; y=h-s-sw2;
  if (stroke_horizontal) { y+=expand; }
  ctx.path.LineTo(x, y);
  ctx.path.ArcNegative(x+s, y, s, 180, 90 ); 
  y+=s; x=w-s-sw2;
  if (!stroke_horizontal) { x+=expand; }
  ctx.path.LineTo(x,y);
  ctx.path.ArcNegative(x,y-s, s, 90, 0); x+=s;
  y = s+sw2;
  if (stroke_horizontal) { y-=expand; }
  ctx.path.LineTo(x, y);
  ctx.path.ArcNegative(x-s,y, s, 0, -90); 
  ctx.path.Close();
  ctx.source.SetRGBA(m[RM_SB_R], m[RM_SB_G], m[RM_SB_B], m[RM_SB_OP]); 
  ctx.FillPath(); 
  ctx.source.SetRGBA(m[RM_SS_R], m[RM_SS_G], m[RM_SS_B], m[RM_SS_OP]);
  ctx.StrokePath();
    
  
  if (level &lt; min_level) level = min_level;
  if (level > max_level) level = max_level;
  if (level_hold != UNKNOWN_VALUE) {
    if (level_hold &lt; min_level) level_hold = min_level;
    if (level_hold > max_level) level_hold = max_level;
  }

  
  if (horizontal &lt; 0.5) {
    double multfactor = (hl)/(max_level - min_level);
    double ys=(-level+max_level)*multfactor;
    double ysh=(-level_hold+max_level)*multfactor;
    g1 = pad_left; g3 = pad_left; g2 = pad_top; g4 = h-pad_bottom;
    r1 = pad_left; r2 = ys+pad_top; r3 = w-pad_h; r4 = hl-ys;
    /* vertical reversed */
    if (reverse > 0.5) {
      g2 = h-pad_bottom;
      g4 = pad_top;
      r2 = pad_top;
      ys = -(min_level-level)*multfactor;
      ysh = -(min_level-level_hold)*multfactor;
      r4 = ys;
    }
    /* hold level */
    hl1=pad_left; hl2=ysh+pad_top; hl3=w-pad_right; hl4=ysh+pad_top;
  }

  if (horizontal>0.5) {
    double multfactor = (wl)/(max_level - min_level);
    double xsh = pad_left+(level_hold-min_level)*multfactor;
    g1 = w-pad_right; g2 = pad_top; g3 = pad_left; g4 = pad_top; 
    r1 = pad_left; r2 = pad_top; r3 = (level-min_level)*multfactor; r4 = h-pad_v;
    if (reverse > 0.5) {
      g1 = pad_left; g3 = w-pad_right;
      r1 = pad_left+wl-(level-min_level)*multfactor; r3 = (level-min_level)*multfactor;
      xsh = w-pad_right-(level_hold-min_level)*multfactor;
    }
    hl1=xsh; hl2=pad_top; hl3=xsh; hl4=h-pad_bottom;
  }

  bool flat = ((style > 0.5) and (style &lt; 1.5));
  bool flat_with_bg = (flat and (lev_bg_opacity>0.001));
  bool leds = (style > 1.5);



  if (leds) {
    int desired_leds_count = int(m[RM_LED_DESIRED_QTY]);
    double min_led_spacing = m[RM_LED_SPACING];
    double led_spacing = min_led_spacing;
    double min_led_size = m[RM_LED_MIN_SIZE];
    double max_led_size = m[RM_LED_MAX_SIZE];
    double mlspace = h-pad_v; if (horizontal>0.5) mlspace = w-pad_h;
    double led_size;
    int leds_count = desired_leds_count+1;
    if (max_led_size &lt; min_led_size) max_led_size = min_led_size;
    
    if (min_led_size &lt; max_led_size){
      
      do { 
        leds_count--;
        led_size = (mlspace - (leds_count-1)*led_spacing)/leds_count;
      } while( led_size &lt; min_led_size );
      
      leds_count--;
      do { 
        leds_count++;
        led_size = (mlspace - (leds_count-1)*led_spacing)/leds_count;
      } while( led_size > max_led_size );

      led_size = (mlspace - (leds_count-1)*led_spacing)/leds_count;
    } else {
      
      led_size = min_led_size;
      
      do { 
        leds_count--;
        led_spacing = (mlspace - leds_count*led_size)/(leds_count-1);
      } while( led_spacing &lt; min_led_spacing );
    }



    double led_pos = pad_top; if (horizontal>0.5) led_pos = pad_left;
    double led_pos_perc = 0, led_pos_next_perc = 0; 
    double lev_perc = (level-min_level)/(max_level - min_level);
    double lev_hold_perc = (level_hold-min_level)/(max_level - min_level);
    int led_hold_no = int(lev_hold_perc*(leds_count-1.0) +.5);
    if (lev_hold_perc &lt; 0.000001) led_hold_no = -1; 
    double r, g, b, a;
    double step_size;
    bool show_led = false;
    for(int i=0;i&lt;leds_count;i++) {
      led_pos_perc = i/float(leds_count);
      led_pos_next_perc = (i+1)/float(leds_count);
      step_size = led_pos_next_perc-led_pos_perc;
      if ((1-led_pos_perc) &lt;= m[RM_LM_POS]+0.00005) {
        r = m[RM_LH_R]; g = m[RM_LH_G]; b = m[RM_LH_B]; a = m[RM_LH_OP];
      } else if ((1-led_pos_perc) &lt;= m[44]+0.00005) {
        r = m[RM_LM_R]; g = m[RM_LM_G]; b = m[RM_LM_B]; a = m[RM_LM_OP];
      } else {
        r = m[RM_LL_R]; g = m[RM_LL_G]; b = m[RM_LL_B]; a = m[RM_LL_OP];
      }

      
      if (horizontal&lt;0.5) {
        r1 = pad_left; r2 = h-led_pos-led_size; r3 = w-pad_h; r4 = led_size;
        if (reverse > 0.5) { r2 = led_pos; }
      } else {
        r1 = led_pos; r2 = pad_top; r3 = led_size; r4 = h-pad_v;
        if (reverse > 0.2) { r1 = w-led_pos-led_size; }
      }

      
      if (led_round > (r3/2)) led_round = (r3/2);
      if (led_round > (r4/2)) led_round = (r4/2);
      if (led_round &lt; 0.5) led_round = 0;

      
      if (lev_bg_opacity > 0.001) {
        ctx.path.Clear();
        ctx.source.SetRGBA(r, g, b, lev_bg_opacity*a);
        if (led_round == 0) { 
          ctx.path.Rectangle(r1, r2, r3, r4); 
        } else { 
          double tro=led_round; 
          double tsw=led_stroke_width, tsw2=tsw/2, tx=r1+tro+tsw2, ty=r2+tsw2;
          ctx.path.MoveTo(tx,ty);
          ctx.path.ArcNegative(tx,ty+tro, tro, 270, 180 ); tx-=tro; ty=ty+r4-tro-tsw2;
          ctx.path.LineTo(tx, ty);
          ctx.path.ArcNegative(tx+tro, ty, tro, 180, 90 ); ty+=tro; tx=tx+r3-tro-tsw2;
          ctx.path.LineTo(tx,ty);
          ctx.path.ArcNegative(tx,ty-tro, tro, 90, 0); tx+=tro; ty = r2+(tro+tsw2);
          ctx.path.LineTo(tx, ty);
          ctx.path.ArcNegative(tx-tro,ty, tro, 0, -90); 
          ctx.path.Close();
        }
        ctx.FillPath();
        
        
      }
      
      double a_ = a;
      show_led = false;
      if (lev_perc > led_pos_next_perc) {
        show_led = true; 
      } else if (lev_perc > led_pos_perc) {
        show_led = true;
        a = a_*(lev_perc-led_pos_perc)/(led_pos_next_perc-led_pos_perc);
      }
      
      if ((m[RM_HO_OP] > 0.005) and (i == led_hold_no)){
        show_led = true;
        a = m[RM_HO_OP]*a_; 
      }
      
      
      if (show_led) {
        ctx.path.Clear();
        ctx.source.SetRGBA(r, g, b, a);
        if (led_round == 0) { 
          ctx.path.Rectangle(r1, r2, r3, r4); 
        } else { 
          double tro=led_round; 
          double tsw=led_stroke_width, tsw2=tsw/2, tx=r1+tro+tsw2, ty=r2+tsw2;
          ctx.path.MoveTo(tx,ty);
          ctx.path.ArcNegative(tx,ty+tro, tro, 270, 180 ); tx-=tro; ty=ty+r4-tro-tsw2;
          ctx.path.LineTo(tx, ty);
          ctx.path.ArcNegative(tx+tro, ty, tro, 180, 90 ); ty+=tro; tx=tx+r3-tro-tsw2;
          ctx.path.LineTo(tx,ty);
          ctx.path.ArcNegative(tx,ty-tro, tro, 90, 0); tx+=tro; ty = r2+(tro+tsw2);
          ctx.path.LineTo(tx, ty);
          ctx.path.ArcNegative(tx-tro,ty, tro, 0, -90); 
          ctx.path.Close();
        }
        ctx.FillPath();
        
        
        
      }
      led_pos = led_pos + led_spacing+led_size;
    }

  } else {

    
    if (flat_with_bg) {
      
      auto gradlb = ctx.get_patterns().NewLinearGradient(g1, g2, g3, g4);
      double op3 = m[RM_LL_OP]*lev_bg_opacity;
      double op2 = m[RM_LM_OP]*lev_bg_opacity;
      double op1 = m[RM_LH_OP]*lev_bg_opacity;
      gradlb.AddColorStopRGBA(m[RM_LL_POS], m[RM_LL_R], m[RM_LL_G], m[RM_LL_B], op3);
      gradlb.AddColorStopRGBA(m[RM_LL_POS]-0.0015, m[RM_LM_R], m[RM_LM_G], m[RM_LM_B], op2);
      gradlb.AddColorStopRGBA(m[RM_LM_POS], m[RM_LM_R], m[RM_LM_G], m[RM_LM_B], op2);
      gradlb.AddColorStopRGBA(m[RM_LM_POS]-0.0015, m[RM_LH_R], m[RM_LH_G], m[RM_LH_B], op1);
      gradlb.AddColorStopRGBA(m[RM_LH_POS], m[RM_LH_R], m[RM_LH_G], m[RM_LH_B], op1);
      gradlb.SelectAsSource(); 
      ctx.path.Clear();
      ctx.path.Rectangle(pad_left, pad_top, w-pad_h, h-pad_v);
      ctx.FillPath();
    }


    /* draw main level bar */
    auto gradl = ctx.get_patterns().NewLinearGradient(g1, g2, g3, g4);
    gradl.AddColorStopRGBA(m[RM_LL_POS], m[RM_LL_R], m[RM_LL_G], m[RM_LL_B], m[RM_LL_OP]);
      if (flat) { gradl.AddColorStopRGBA(m[RM_LL_POS]-0.0015, m[RM_LM_R], m[RM_LM_G], m[RM_LM_B], m[RM_LM_OP]); }
    gradl.AddColorStopRGBA(m[RM_LM_POS], m[RM_LM_R], m[RM_LM_G], m[RM_LM_B], m[RM_LM_OP]);
      if (flat) { gradl.AddColorStopRGBA(m[RM_LM_POS]-0.0015, m[RM_LH_R], m[RM_LH_G], m[RM_LH_B], m[RM_LH_OP]); }
    gradl.AddColorStopRGBA(m[RM_LH_POS], m[RM_LH_R], m[RM_LH_G], m[RM_LH_B], m[RM_LH_OP]);
    gradl.SelectAsSource(); 
    ctx.path.Clear();
    ctx.path.Rectangle(r1, r2, r3, r4);
    ctx.FillPath();

    
    /* now draw hold-level line */
    if (m[RM_HOLD_COLORIZE] &lt; 0.5) ctx.source.SetRGBA(m[RM_HO_R], m[RM_HO_G], m[RM_HO_B], m[RM_HO_OP]); 
    ctx.settings.set_lineWidth(m[RM_HOLD_WIDTH]);
    ctx.path.Clear();
    ctx.path.MoveTo(hl1, hl2);
    ctx.path.LineTo(hl3, hl4);
    ctx.StrokePath();
  }
}



/*
meterRenderParams structure (params follow the same order as in $render_params_string$ string):
(0-4) style;min_level;max_level;-;-;
(5-9) level_bg_opacity;desired_leds_count;min_led_size;max_led_size;led_spacing
(10-14) hold_line_width;hold_line_use_color;inner_pad_h;inner_pad_v;-;
(15-19) stroke_width;stroke_expand;stroke_round;led_round;-;
(20-29) -;-;-;-;-;-;-;-;-;-;
(30-...) colors[color[r,g,b];opacity;shift];
*/
array&lt;double> meterRenderParams(80);

void meters_prepareParams(string render_params_string, array&lt;double> &amp; m){
  array&lt;string> ar(m.length); 
  ar = render_params_string.split(&quot;;&quot;);
  
  for (int i=0;i&lt;30;i++) {
    if (i+1 >= int(ar.length)) break;
    m[i] = parseFloat(ar[i]);
  }
  
  int cs = 30; 
  for (int i=0;i&lt;6;i++) {
    if (cs+i*3+3 >= int(ar.length)) break;
    meters_prepareParams_addColor(m, i, ar[cs+i*3], ar[cs+i*3+1], ar[cs+i*3+2]);
  }
}


void meters_prepareParams_addColor(array&lt;double> &amp; m, int i, string hexcolor, string op = &quot;1&quot;, string pos = &quot;0&quot;){
  double _r, _g, _b;
  if (hexcolor == &quot;&quot;) hexcolor = &quot;#777777&quot;;
  if (hexcolor.substr(0,1) != &quot;#&quot;) hexcolor = &quot;#&quot;+hexcolor;
  if (op == &quot;&quot;) op = &quot;1&quot;;
  if (pos == &quot;&quot;) pos = &quot;0&quot;;
  int cl = 5; 
  int cs = 30; 
  m[cl*i+cs+0] = double(parseInt(hexcolor.substr(1,2),16))/255.0;
  m[cl*i+cs+1] = double(parseInt(hexcolor.substr(3,2),16))/255.0;
  m[cl*i+cs+2] = double(parseInt(hexcolor.substr(5,2),16))/255.0;
  m[cl*i+cs+3] = parseFloat(op);
  m[cl*i+cs+4] = parseFloat(pos)/100;
}





enum bodyShaderParams{
  BS_OPACITY,
  BS_STYLE,
  BS_X1, 
  BS_Y1, 
  BS_R1,
  BS_X0, 
  BS_Y0, 
  BS_R0, 
  BS_LINK_LS
}

enum bodyShaderStyles{
  BS_S_RADIAL,
  BS_S_LINEAR
}

class bodyShaderClass{
  double x1, y1, r1; 
  double x0, y0, r0; 
  double op;
  int style, link_ls;
  bool preview_mode = false;

  bodyShaderClass(string bsdconst, Kt::String@ bsdparam, bool preview_mode = false){
    bsdparam = bsdconst;
    parseData(bsdparam);
    this.preview_mode = preview_mode;
  }

  void parseData(string s_params) {
    array&lt;string> ar = s_params.split(&quot;;&quot;);
    ar.resize(BS_LINK_LS+1);
    this.style = parseInt(ar[BS_STYLE]);
    this.x1 = f(ar[BS_X1]);
    this.y1 = f(ar[BS_Y1]);
    this.r1 = f(ar[BS_R1]);
    this.x0 = f(ar[BS_X0]);
    this.y0 = f(ar[BS_Y0]);
    this.r0 = f(ar[BS_R0]);
    this.op = f(ar[BS_OPACITY]);
    this.link_ls = parseInt(ar[BS_LINK_LS]);
  }

  void Draw(double h, double w){  
    
    
    auto ctx=Kt::Graphics::GetCurrentContext();
    ctx.settings.set_blendMode(Kt::Graphics::kDrawOpXor);

    double xc = w*0.5, yc = h*0.5;
    double xi = xc+x0, yi = yc+y0;

    if (!preview_mode) {
      
      if (link_ls > 1) {
        
        array&lt;array&lt;double>>@ lights = Light.sources;
        int nsources = lights.length;
        int source_no = link_ls-2;
        xi = xc;
        yi = yc;
        if (source_no &lt; nsources) {
          if (lights[source_no][LS_ENABLED] > 0) {
            xi = xc+lights[source_no][LS_X];
            yi = yc+lights[source_no][LS_Y];
          }
        }
      } else if (link_ls == 1) {
        
        xi = xc+Light.CL_x;
        yi = yc+Light.CL_y;
        
      }
    }

    if (style == BS_S_RADIAL) {
      auto g = ctx.patterns.NewRadialGradient(xc+x1, yc+y1, r1, xi, yi, r0);
      g.AddColorStopRGBA(0, 1, 1, 1, op);
      g.AddColorStopRGBA(1, 1, 1, 1, 0);
      g.SelectAsSource(); 
    } else {
      auto g = ctx.patterns.NewLinearGradient(xc+x1, yc+y1, xi, yi);
      g.AddColorStopRGBA(0, 1, 1, 1, op);
      g.AddColorStopRGBA(1, 1, 1, 1, 0);
      g.SelectAsSource(); 
    }
    
    ctx.path.Clear();
    ctx.path.Rectangle(0,0,w,h);
    ctx.FillPath();
    
    ctx.settings.set_blendMode(Kt::Graphics::kDrawOpOver);
  }
}






  enum SimpleKnobParams{
    RSK_ANGLE_START, RSK_ANGLE_END, RSK_BODY_COLOR, RSK_BODY_OPACITY, RSK_BODY_SIZE, RSK_MARKER_START, RSK_MARKER_END, RSK_MARKER_WIDTH, RSK_MARKER_COLOR, RSK_MARKER_OPACITY, RSK_MARKER_TYPE, RSK_MARKER_STROKE_WIDTH
  }

  enum SimpleKnobMarkers { RSK_MT_NONE, RSK_MT_LINE, RSK_MT_ROUNDED, RSK_MT_ROUNDED_FILLED, RSK_MT_CIRCLE, RSK_MT_CIRCLE_FILLED }

  class SimpleKnob{
    double marker_start, marker_end, marker_width = 3, marker_stroke_width;
    double angle_start = -135, angle_end = 135, angle_center = 0, angle_width = 270;
    double cw, ch, cw2, ch2, body_radius;
    double bodyR, bodyG, bodyB, bodyA;
    double markerR, markerG, markerB, markerA;
    int marker_type = 1;

    
    SimpleKnob(double size, string s_params){
      this.cw = size;
      this.ch = size;
      cw2 = cw/2; ch2 = ch/2;

      
      array&lt;string> ar = s_params.split(&quot;;&quot;);

      body_radius = cw2*f(ar[RSK_BODY_SIZE]);
      marker_width = size*0.1*f(ar[RSK_MARKER_WIDTH]);
      marker_start = cw2*(1-f(ar[RSK_MARKER_START]))*f(ar[RSK_BODY_SIZE]);
      marker_end = cw2*(1-f(ar[RSK_MARKER_END]))*f(ar[RSK_BODY_SIZE]);
      marker_type = parseInt(ar[RSK_MARKER_TYPE]);
      marker_stroke_width = f(ar[RSK_MARKER_STROKE_WIDTH])*0.025*size;

      
      angle_start = f(ar[RSK_ANGLE_START]);
      angle_end = f(ar[RSK_ANGLE_END]);
      if (angle_end &lt; angle_start) {
        angle_start = -f(ar[RSK_ANGLE_START]);
        angle_end = -f(ar[RSK_ANGLE_END]);
      }

      angle_width = (angle_end-angle_start);
      angle_center = 90 - (angle_start+angle_end)/2 ; 

      bodyR = double(parseInt(ar[RSK_BODY_COLOR].substr(1,2),16))/255.0;
      bodyG = double(parseInt(ar[RSK_BODY_COLOR].substr(3,2),16))/255.0;
      bodyB = double(parseInt(ar[RSK_BODY_COLOR].substr(5,2),16))/255.0;
      bodyA = f(ar[RSK_BODY_OPACITY]);

      markerR = double(parseInt(ar[RSK_MARKER_COLOR].substr(1,2),16))/255.0;
      markerG = double(parseInt(ar[RSK_MARKER_COLOR].substr(3,2),16))/255.0;
      markerB = double(parseInt(ar[RSK_MARKER_COLOR].substr(5,2),16))/255.0;
      markerA = f(ar[RSK_MARKER_OPACITY]);
    }

    
    void render(double nval){
      auto ctx=Kt::Graphics::GetCurrentContext();
      if (nval&lt;0) nval=0;
      if (nval>1) nval=1;
      double nvalc = nval-0.5; 
      double adeg = (angle_center - nvalc*angle_width);
      double arad = adeg*pi/180;

      double si = sin(arad), co = cos(arad);
      double dxme = cw2 + co*marker_end;
      double dyme = ch2 - si*marker_end;
      double dxms = cw2 + co*marker_start;
      double dyms = ch2 - si*marker_start;
      double mdeg = 270-adeg;

      
      ctx.path.Clear();
      ctx.source.SetRGBA(bodyR, bodyG, bodyB, bodyA);
      ctx.path.Arc(cw2, ch2, body_radius, 0.001, 0);
      ctx.FillPath();

      
      ctx.path.Clear();
      ctx.source.SetRGBA(markerR, markerG, markerB, markerA);
      
      switch(marker_type) {
        
        case RSK_MT_ROUNDED:
        case RSK_MT_ROUNDED_FILLED:
        case RSK_MT_CIRCLE:
        case RSK_MT_CIRCLE_FILLED:
          if ((marker_type == RSK_MT_CIRCLE) or (marker_type == RSK_MT_CIRCLE_FILLED)) {
            ctx.path.Arc(dxms, dyms, marker_width*0.5, 0.001, 0);
          } else {
            ctx.path.Arc(dxms, dyms, marker_width*0.5, mdeg, mdeg+180);
            ctx.path.Arc(dxme, dyme, marker_width*0.5, mdeg+180, mdeg+360);
          }
          ctx.path.Close();
          if ((marker_type == RSK_MT_ROUNDED_FILLED) or (marker_type == RSK_MT_CIRCLE_FILLED)) {
            ctx.FillPath();
          } else {
            ctx.settings.set_lineWidth(marker_stroke_width);
            ctx.StrokePath();
          }
          break;

        default:
        
          ctx.settings.set_lineWidth(marker_width);
          ctx.path.MoveTo(dxme, dyme);
          ctx.path.LineTo(dxms, dyms);
          ctx.StrokePath(); 
      }
    }
  }

}" _src="$SCRIPTS_DIR$common_renders.as" />
			<EXPOSED_OBJECTS object_ids="render_settings_changed.*;render_settings_data.*" />
			<ACTION_TRIGGER event_id="render_settings_data.value_changed" script="LM::RenderSettingsParser.parseString(render_settings_data); render_settings_changed++; " requires="render_settings_data.value_changed;render_settings_changed" />
		</R>

		<!-- include render objects -->
		<R count="($include_lmr_scripts$==1)">
			<SCRIPT src="$SCRIPTS_LMR_DIR$CanvasObject.as" preprocess="true" />
			<SCRIPT src="$SCRIPTS_LMR_DIR$CanvasWidget.as" preprocess="true" />
			<SCRIPT src="$SCRIPTS_LMR_DIR$Knob.as" preprocess="true" />
			<SCRIPT src="$SCRIPTS_LMR_DIR$Slider.as" preprocess="true" />
			<SCRIPT src="$SCRIPTS_LMR_DIR$Joystick.as" preprocess="true" />
			<SCRIPT src="$SCRIPTS_LMR_DIR$Meter.as" preprocess="true" />
		</R>
		
	</TEMPLATE>
	
	<!-- used for generating unique IDs for CANVASes and other elements -->
	<VAR id="LMID" formula="0" /> <!-- keep here number to generate unique IDs -->
	<TEMPLATE id="NEXT_LMID"><VAR id="LMID" formula="$LMID$+1" /></TEMPLATE>
	<VAR id="LMPR" value="" /> <!-- prefix to use with LMID -->
	
	<!-- often used vars -->


	<!--  COMMON TEMPLATES -->

	<!-- build time IF -->
	<TEMPLATE id="IF" condition="0">
	  <REPEAT count="($condition$)!=0" index_name="_if_index_">
	    <TEMPLATE_INNER_CONTENT/>
	  </REPEAT>
	</TEMPLATE>

	<!-- simple next N (increase N) -->
	<TEMPLATE id="NEXT_N">
	  <VAR id="N" formula="$N$+1" />
	</TEMPLATE>

	<!-- system type (Windows, Mac) detection tags -->
	<!-- first convert _SYSTEM_TYPE_ to integer to use in IF formulas -->
	<TEMPLATE id="SYSTEM_DETECTION">
	  <VAR id="SYS_Windows" value="1" />
	  <VAR id="SYS_Mac" value="2" />
	  <VAR id="SYS_NO" value="$SYS_$_SYSTEM_TYPE_$$" />
	</TEMPLATE>
	<SYSTEM_DETECTION />
	<TEMPLATE id="IF_WINDOWS">
	  <IF condition="$SYS_NO$ == $SYS_Windows$"><TEMPLATE_INNER_CONTENT /></IF>
	</TEMPLATE>
	<TEMPLATE id="IF_MAC">
	  <IF condition="$SYS_NO$ == $SYS_Mac$"><TEMPLATE_INNER_CONTENT /></IF>
	</TEMPLATE>

	<!-- depending on system type -->
	<IF_WINDOWS>
	  <VAR id="DEFAULT_EDITOR" value="notepad.exe"/>
	  <VAR id="FILE_EXPLORER_APP_NAME" value="Explorer"/>
	  <VAR id="FILE_EXPLORER_APP" value="explorer.exe"/>
	  <VAR id="DEFAULT_FONT" value="Microsoft Sans Serif"/>
	  <VAR id="DEFAULT_MONOSPACE_FONT" value="Consolas"/>
	  <VAR id="SYS_NO" value="1" />
	  <!-- host app detection for WINDOW is disabled by default, cause there's no need for it yet and it slows skin loading -->
	  <VAR id="HOST_APP" value="" _script="
			string sysout; 
			string command = &quot;echo off&amp;TITLE lm_host_detect &amp; FOR /F \&quot;tokens=* USEBACKQ\&quot; %F IN (`tasklist /v /fo csv ^| findstr /i \&quot;lm_host_detect\&quot;`) DO ( FOR /F \&quot;tokens=2 delims=,\&quot; %G IN (\&quot;%F\&quot;) DO ( wmic process get processid,parentprocessid,executablepath|find /i %G )) &amp; &quot;;
			system(command, sysout);
			if (sysout.length>0) {
				int pos = sysout.findFirstOf(&quot;  &quot;);
				if (pos>1) {
					sysout=sysout.substr(pos);
					pos=sysout.findFirstNotOf(&quot; &quot;);
					sysout=sysout.substr(pos);
					string parent_pid = &quot;&quot;+parseInt(sysout);
					system(&quot;wmic process where processId=&quot;+parent_pid+&quot; get ExecutablePath&quot;, sysout);
					if (sysout.length > 0) {
						pos=sysout.findFirstOf(&quot;\n&quot;);
						sysout=sysout.substr(pos+1);
						for(uint i = sysout.length-1;i>0;i--) {
								if (sysout[i] &lt; 33) continue;
								return sysout.substr(0,i+1);
						}
					}
				}
			}
			return &quot;&quot;;
			" />
	</IF_WINDOWS>
	<IF_MAC>
	  <VAR id="DEFAULT_EDITOR" value="TextEdit"/>
	  <VAR id="FILE_EXPLORER_APP_NAME" value="Finder"/>
	  <VAR id="FILE_EXPLORER_APP" value="Finder"/>
	  <VAR id="DEFAULT_FONT" value="Lucida Grande"/>
	  <VAR id="DEFAULT_MONOSPACE_FONT" value="Courier"/>
	  <VAR id="SYS_NO" value="2" />
	  <VAR id="HOST_APP" script="
			string sysout;       
			system(&quot;ps aux -o ppid | grep $$&quot;, sysout); 
			if (sysout.length > 0) {
				string pid = sysout.substr((sysout.length)-7,10);
				int pos = pid.findFirstNotOf(&quot; &quot;);
				if (pos > 0) pid = &quot;&quot;+parseInt(pid.substr(pos));
				if (pid.length > 0) {
					system(&quot;lsof -p &quot;+pid+&quot; | grep txt | grep -m1 \&quot;\&quot;&quot;, sysout); 
					if (sysout.length > 0) {
						pos = sysout.findFirstOf(&quot;/&quot;);
						if (pos > -1) {
							sysout = sysout.substr(pos);
							for(uint i = sysout.length-1;i>0;i--) {
									if (sysout[i] &lt; 33) continue;
									return sysout.substr(0,i+1);
							}
						}
					}
				}
			}
			return &quot;&quot;;
			" />
		<VAR id="IS_REAPER_ON_MAC" script="string hostapp = &quot;$HOST_APP$&quot;; if ((hostapp.findFirst(&quot;REAPER&quot;)>-1) || (hostapp.findFirst(&quot;Reaper&quot;)>-1)) return &quot;1&quot;; else return &quot;0&quot;;" />
		
		<!-- disable cursors for Reaper on Mac -->
		<R count="($IS_REAPER_ON_MAC$ > 0)" index_name="_tmprom">
			<VAR id="CUR_HAND" value="system::normal" />
			<VAR id="CUR_CROSS" value="system::normal" />
			<VAR id="CUR_OPEN_HAND" value="system::normal" />
			<VAR id="CUR_SIZE" value="system::normal" />
			<VAR id="CUR_SIZE_V" value="system::normal" />
			<VAR id="CUR_SIZE_H" value="system::normal" />
			<VAR id="CUR_SIZE_UP_LEFT" value="system::normal" />
			<VAR id="CUR_IBEAM" value="system::normal" />
			<!-- and redefine some elements without cursor changes -->
			<UNDEFINE>
				<IAB /><IPB /><IPMB />
			</UNDEFINE>
			<DEFINE>
				<IAB base_type="INVISIBLE_ACTION_BUTTON" width="100%" height="100%" />
			  <IPB base_type="INVISIBLE_PARAM_BUTTON" positions_count="2" width="100%" height="100%"  />
			  <IPMB base_type="INVISIBLE_PARAM_MENU_BUTTON" width="100%" height="100%" reverse_mouse_wheel="true" />
			</DEFINE>
		</R>
	</IF_MAC>
	

	

	


	
	
	<!-- determining if we're in Plug-n-Script or generic Blue Cat Plugin -->
	<VAR id="IS_PNS" value="false" />
	<IF condition="($PLUGIN_OUTPUT_STRINGS_COUNT$ > 20)*($PLUGIN_INPUT_STRINGS_COUNT$ > 16)*($PLUGIN_INPUT_CUSTOM_PROPERTIES_COUNT$ == 0)*($PLUGIN_OUTPUT_CURVES_COUNT$ == 0)*($PLUGIN_OUTPUT_SURFACES_COUNT$ == 0)">
	  <VAR id="IS_PNS" value="true" />
	</IF>

	<!-- quick templates to isolate portions of code depending on state -->
	<TEMPLATE id="IF_PNS">
	  <REPEAT count="($IS_PNS$ == true)" index_name="_if_pns_"><TEMPLATE_INNER_CONTENT /></REPEAT>
	</TEMPLATE>
	<TEMPLATE id="IF_NOT_PNS">
	  <REPEAT count="($IS_PNS$ == false)" index_name="_if_notpns_"><TEMPLATE_INNER_CONTENT /></REPEAT>
	</TEMPLATE>
	<VAR id="IS_EXPORTED" value="true" />
	<IF_PNS>
	  <REPEAT count="($SCRIPT_EDIT_MODE$ == true)">
	    <VAR id="IS_EXPORTED" value="false" />
	  </REPEAT>
	</IF_PNS>
	<TEMPLATE id="IF_EXPORTED">
	  <REPEAT count="($IS_EXPORTED$ == true)" index_name="_if_expted_"><TEMPLATE_INNER_CONTENT /></REPEAT>
	</TEMPLATE>
	<TEMPLATE id="IF_NOT_EXPORTED">
	  <REPEAT count="($IS_EXPORTED$ == false)" index_name="_if_not_expted_"><TEMPLATE_INNER_CONTENT /></REPEAT>
	</TEMPLATE>

	<!-- if we're in some generic Blue Cat Plugin, generate default PNS vars -->
	<IF_NOT_PNS>
	  <VAR id="SCRIPT_EDIT_MODE" value="0" />
	  <VAR id="SCRIPT_PARAMS_COUNT" value="0" />
	  <VAR id="SCRIPT_OUT_PARAMS_COUNT" value="0" />
	  <VAR id="SCRIPT_STRINGS_COUNT" value="0" />
	</IF_NOT_PNS>

	<!-- strings holding text editor files -->
	<STRING id="edit_script_app" default="$DEFAULT_EDITOR$" exposed="true" />
	<STRING id="edit_kuiml_app" default="$DEFAULT_EDITOR$" exposed="true" />
	<STRING id="open_log_app" default="$DEFAULT_EDITOR$" exposed="true" />
	<REQUIRED_OBJECTS object_ids="edit_script_app;edit_kuiml_app;open_log_app" />

	<!-- when in Plug-N-Script trying to catch selected editors -->
	<IF condition="$SCRIPT_EDIT_MODE$">
	  <STRING_LINK from="global.edit_script_application" to="edit_script_app" enabled="true" />
	  <STRING_LINK from="global.edit_kuiml_application" to="edit_kuiml_app" enabled="true" />
	  <STRING_LINK from="global.open_log_application" to="open_log_app" enabled="true" />
	</IF>
	
	<!-- ================== -->
	<!-- ADDITIONAL HELPERS -->
	<!-- ================== -->
	
	<!-- shorter action trigger on value change -->
	<TEMPLATE id="ONCHANGE" param_id="_" obj="" param_ids="" o=""
		script="int d=1;" action="" action_id=""
		condition="1" condition_formula="" if="" when=""
		async="false" requires="">
		<!-- get objects -->
		<LV id="objs_" value="$param_id$" />
		<R index_list="$param_ids$"><LV id="objs_" value="$param_ids$" /></R>
		<R index_list="$obj$"><LV id="objs_" value="$obj$" /></R>
		<R index_list="$o$"><LV id="objs_" value="$o$" /></R>
		<!-- get condition -->
		<LV id="_condition" value="$condition$" />
		<R index_list="$condition_formula$"><LV id="_condition" value="$condition_formula$" /></R>
		<R index_list="$if$"><LV id="_condition" value="$if$" /></R>
		<R index_list="$when$"><LV id="_condition" value="$when$" /></R>
		<LV id="_act_id" value="" /><LV id="IS_ACTION" value="0" />
		<R index_list="$action$"><LV id="_act_id" value="$action$" /></R>
		<R index_list="$action_id$"><LV id="_act_id" value="$action_id$" /></R>
		<R index_list="$_act_id$"><LV id="IS_ACTION" value="1" /></R>
		<!-- output element -->
		<R count="($IS_ACTION$==0)" index_name="_tmpnisa">
			<R index_list="$objs_$">
			  <ACTION_TRIGGER event_id="$index$.value_changed" requires="$o$.*" script="$script$" condition_formula="$_condition$" async="$async$" />
			</R>
		</R>
		<R count="($IS_ACTION$)" index_name="_tmpisa">
			<R index_list="$objs_$">
			  <ACTION_TRIGGER event_id="$index$.value_changed" requires="$o$.*" action_id="$_act_id$" condition_formula="$_condition$" async="$async$" />
			</R>
		</R>

		<R index_list="$requires$">
			<REQUIRED_OBJECTS object_ids="$requires$" />
			<EXPOSED_OBJECTS object_ids="$requires$" />
		</R>
	</TEMPLATE>

	<TEMPLATE id="ONCLICK" o="" 
		script="" left_script="" right_script="" left_down_script="" right_down_script="" left_up_script="" right_up_script="" any_up_script="" any_down_script=""
		action="" action_id="" 
		url="" title="" title_string_id=""
		requires="" cursor="$CUR_HAND$">
		
		<!-- generate widget id or take given -->
		<LV id="WID" script="if (&quot;$id$&quot; == &quot;$&quot;+&quot;id$&quot;) return &quot;onclick_$LMPR$$LMID$&quot;; else return &quot;$id$&quot;;" />
		<NEXT_LMID />

		<!-- We can have several scenarios for onclick:
		1) Create a clickable element (INVISIBLE_ACTION_BUTTON) in place of ONCLICK (if no "o" is set)
		2) Add handler to trace clicks on another object, if "o" (object) is set.
		 -->
		
		<!-- if we have an "o" (objects) set, we set handlers to watch that another object -->
		<LV id="_on_another_object" value="0" />
		<LV id="_objects" value="" />
		<R index_list="$o$">
			<LV id="_on_another_object" value="1" />
			<LV id="_objects" value="$o$" />
		</R>
		
		<!-- prepare scripts for left clicks -->
		<LV id="_left_down_script" value="$left_down_script$" />
		<LV id="_left_up_script" value="$script$" />
		<R index_list="$left_script$"><LV id="_left_up_script" value="$left_script$" /></R>
		<R index_list="$left_up_script$"><LV id="_left_up_script" value="$left_up_script$" /></R>

		<!-- prepare scripts for right clicks -->
		<LV id="_right_down_script" value="$right_down_script$" />
		<LV id="_right_up_script" value="$right_script$" />
		<R index_list="$right_up_script$"><LV id="_right_up_script" value="$right_up_script$" /></R>
		
		<!-- scripts for both left or right buttons -->
		<R index_list="$any_down_script$">
			<LV id="_left_down_script" value="$any_down_script$" />
			<LV id="_right_down_script" value="$any_down_script$" />
		</R>
		<R index_list="$any_up_script$">
			<LV id="_left_up_script" value="$any_up_script$" />
			<LV id="_right_up_script" value="$any_up_script$" />
		</R>

		<!-- generate action id, or take given -->
		<LV id="ACTID" value="action_$WID$" />\
		<R index_list="$action$"><LV id="ACTID" value="$action$" /></R>
		<R index_list="$action_id$"><LV id="ACTID" value="$action_id$" /></R>
		
		<!-- if open url, create an action for that -->
    <LV id="IS_OPEN_URL" value="0" />
    <R index_list="$url$"><LV id="IS_OPEN_URL" value="1" /></R>
		<R count="$IS_OPEN_URL$">
			<ACTION id="$ACTID$" type="OpenUrl" name="$title$" url="$url$" />
		</R>
		
		<!-- if simple left click script is set, create action for that -->
    <LV id="IS_SCRIPT" value="0" />
    <R index_list="$_left_up_script$"><LV id="IS_SCRIPT" value="1" /></R>
		<R count="$IS_SCRIPT$">
			<ACTION id="$ACTID$" type="Script" name="$title$" script="$_left_up_script$" />
		</R>

		<!-- Scenario 1: if no objects given: create element for clicking -->
    <R count="($_on_another_object$ == 0)">
    	
    	<LV id="SIMPLE_IAB" value="1" />
    	<R index_list="$_left_down_script$$_right_down_script$$_right_up_script$" index_name="_tmpoc1"><LV id="SIMPLE_IAB" value="0" /></R>
    	
    	<!-- 
    		if no left down or right scripts given
    		we can create simple invisible action button
    	-->
    	<R count="$SIMPLE_IAB$ > 0">
    		<IAB id="$WID$" action_id="$ACTID$" cursor="$cursor$"><R index_list="$title$" index_name="_tmpoctt1"><TT text="$title$" /></R><R index_list="$title_string_id$" index_name="_tmpoctt2"><TT string_id="$title_string_id$" /></R></IAB>
    	</R>
			
			<!-- otherwise we create widget for tracking mouse events -->
    	<R count="$SIMPLE_IAB$ == 0">
    		<WIDGET id="$WID$" cursor="$cursor$" mouse_sensitive="true" width="100%" height="100%"><R index_list="$title$" index_name="_tmpoctt1"><TT text="$title$" /></R><R index_list="$title_string_id$" index_name="_tmpoctt2"><TT string_id="$title_string_id$" /></R></WIDGET>
    		<!-- add handlers like for scenario 2 -->
    		<LV id="_objects" value="$WID$" />
    	</R>

    </R>
    
		<!-- Scenario 2: if objects given: create handlers to watch mouse_events -->
    <R index_list="$_objects$">
			<!-- var to remember mouse button -->
			<SCRIPT script="int $WID$_$index$_mouse_down_before = -1;" />

    	<!-- on mouse down event -->
			<ONCHANGE when="$index$.mouse_down > 0" o="$index$.mouse_down" script="
				int m = rint($index$.mouse_down);
				$WID$_$index$_mouse_down_before = m;
				if (m == 1) { $_left_down_script$; }
				else if (m == 2) { $_right_down_script$; }
    		" />

    	<!-- on mouse up event -->
    	<ONCHANGE when="$index$.mouse_down == 0" o="$index$.mouse_down" script="
				int m = $WID$_$index$_mouse_down_before;
				if (m == 1) { $_left_up_script$; }
				else if (m == 2) { $_right_up_script$; }
				else { $_left_up_script$; $_right_up_script$;  }
    		" />
    </R>

    <R index_list="$requires$">
    	<REQUIRED_OBJECTS object_ids="$requires$" />
    	<EXPOSED_OBJECTS object_ids="$requires$" />
    </R>
  </TEMPLATE>

	<!-- a quick alias for right click only.
	If you need both left and right handlers, use ONCLICK directly -->
	<TEMPLATE id="ONRCLICK" o="" script="">
		<ONCLICK o="$o$" right_up_script="$script$" />
	</TEMPLATE>

	<!-- ###################################### -->
	<!-- MAPPINGS (rewritten from legacy mappings.inc) -->
	<!-- ###################################### -->
	
	<EPARAM id="generic_param" /> <!-- to use in case of missing parameters -->
	<STRING id="str_empty" default="" />
	<EXPOSED_OBJECTS object_ids="generic_param.*" />
	<IF_PNS>
	  <!-- extra input params exist when plugin is not exported -->
	  <VAR id="HAS_EXTRA_INPUT_PARAMS" formula="$SCRIPT_PARAMS_COUNT$!=($PLUGIN_INPUT_PARAMS_COUNT$-1)"/>

	  <!-- map status bar params -->
	  <VAR id="script_status" value="dsp.private_output0" />
	  <VAR id="script_status_string" value="dsp.output_string0" />

	  <!-- map input parameters -->
	  <VAR id="bypass" value="dsp.input0" />
	  <VAR id="N" value="1" />
	  <VAR id="reload_script" value="generic_param" />
	  <IF condition="$HAS_EXTRA_INPUT_PARAMS$">
	    <VAR id="reload_script" value="dsp.input1" />
	    <VAR id="show_levels" value="dsp.input2" />
	    <REQUIRED_OBJECTS object_ids="$show_levels$" />
	    <PARAM_LINK from="a_meters_display" to="$show_levels$" />
	  	<VAR id="N" value="8" /> <!-- start from 7, when extra params exist -->
	  </IF>
	  <REPEAT count="$SCRIPT_PARAMS_COUNT$">
	    <VAR id="script_input$index$" value="dsp.input$N$" /><NEXT_N />
	  </REPEAT>

	  <!-- map input strings -->
	  <STRING id="script_file_selection" value="dsp.input_string0" />
	  <VAR id="N" value="1" />
	  <REPEAT count="$SCRIPT_STRINGS_COUNT$">
	  	<VAR id="script_input_string$index$" value="dsp.input_string$N$" />
	  	<VAR id="custom_string$index$" value="dsp.input_string$N$"/>
	  	<NEXT_N />
	  </REPEAT>

	  <!-- map private output params -->
	  <VAR id="script_status" value="dsp.private_output0" />
	  <VAR id="script_input_params_count" value="dsp.private_output1" />
	  <VAR id="script_output_params_count" value="dsp.private_output2" />
	  <VAR id="N" value="3" />
	  <REPEAT count="$SCRIPT_PARAMS_COUNT$" index_name="i">
	      <VAR id="script_input_param$i$_min" value="dsp.private_output$N$" /><NEXT_N />
	      <VAR id="script_input_param$i$_max" value="dsp.private_output$N$" /><NEXT_N />
	      <VAR id="script_input_param$i$_default" value="dsp.private_output$N$" /><NEXT_N />
	      <REQUIRED_OBJECTS object_ids="dsp.private_output$N$" /> <!-- to not strip steps -->
	      <VAR id="script_input_param$i$_steps" value="dsp.private_output$N$" /><NEXT_N />
	  </REPEAT>
	  <REPEAT count="$SCRIPT_OUT_PARAMS_COUNT$">
	      <VAR id="script_output_param$index$_min" value="dsp.private_output$N$" /><NEXT_N />
	      <VAR id="script_output_param$index$_max" value="dsp.private_output$N$" /><NEXT_N />
	      <VAR id="script_output_param$index$_default" value="dsp.private_output$N$" /><NEXT_N />
	  </REPEAT>
	  <REPEAT count="$PLUGIN_AUDIO_INPUTS_COUNT$" index_name="CH" start="1">
	      <VAR id="input_level$CH$" value="dsp.private_output$N$" /><NEXT_N />
	      <VAR id="input_hold_level$CH$" value="dsp.private_output$N$" /><NEXT_N />
	  </REPEAT>
	  <REPEAT count="$PLUGIN_AUDIO_OUTPUTS_COUNT$" index_name="CH" start="1">
	      <VAR id="output_level$CH$" value="dsp.private_output$N$" /><NEXT_N />
	      <VAR id="output_hold_level$CH$" value="dsp.private_output$N$" /><NEXT_N />
	  </REPEAT>
	  <VAR id="script_input_strings_count" value="dsp.private_output$N$" /><NEXT_N />
	  <VAR id="script_output_strings_count" value="dsp.private_output$N$" /><NEXT_N />
	  <VAR id="script_file_type" value="dsp.private_output$N$" /><NEXT_N />

	  <!-- map output params -->
	  <VAR id="N" value="0" />
	  <REPEAT count="$SCRIPT_OUT_PARAMS_COUNT$">
	      <VAR id="script_output$index$" value="dsp.output$N$" /><NEXT_N />
	  </REPEAT>

	  <!-- map output strings -->
	  <VAR id="script_status_string" value="dsp.output_string0" />
	  <VAR id="script_name_string" value="dsp.output_string1" />
	  <VAR id="script_description_string" value="dsp.output_string2" />
	  <VAR id="script_author_string" value="dsp.output_string3" />
	  <VAR id="script_file_path" value="dsp.output_string4" />
	  <VAR id="log_file_path" value="dsp.output_string5" />
	  <VAR id="script_doc_path" value="dsp.output_string6" />
	  <VAR id="script_gui_path" value="dsp.output_string7" />
	  <VAR id="N" value="8" />
	  <REPEAT count="$SCRIPT_PARAMS_COUNT$"> <!-- 48 IN VERSION 3.2 -->
      <VAR id="script_input_param$index$_name" value="dsp.output_string$N$"/><NEXT_N />
      <VAR id="script_input_param$index$_unit" value="dsp.output_string$N$"/><NEXT_N />
      <VAR id="script_input_param$index$_enum_values" value="dsp.output_string$N$"/><NEXT_N />
      <VAR id="script_input_param$index$_value_format" value="dsp.output_string$N$"/><NEXT_N />
	  </REPEAT>
	  <REPEAT count="$SCRIPT_OUT_PARAMS_COUNT$"> <!-- 32 IN VERSION 3.2 -->
      <VAR id="script_output_param$index$_name" value="dsp.output_string$N$"/><NEXT_N />
      <VAR id="script_output_param$index$_unit" value="dsp.output_string$N$"/><NEXT_N />
      <VAR id="script_output_param$index$_enum_values" value="dsp.output_string$N$"/><NEXT_N />
      <VAR id="script_output_param$index$_value_format" value="dsp.output_string$N$"/><NEXT_N />
	  </REPEAT>
	  <REPEAT count="$SCRIPT_STRINGS_COUNT$"> <!-- 16 IN VERSION 3.2 -->
	     <VAR id="script_input_string$index$_name" value="dsp.output_string$N$"/><NEXT_N />
	  </REPEAT>
		<REPEAT count="$SCRIPT_OUT_STRINGS_COUNT$"> <!-- 16 IN VERSION 3.2 -->
			<VAR id="script_output_string$index$_name" value="dsp.output_string$N$"/><NEXT_N />
		</REPEAT>
		<REPEAT count="$SCRIPT_OUT_STRINGS_COUNT$"> <!-- 16 IN VERSION 3.2 -->
			<VAR id="script_output_string$index$" value="dsp.output_string$N$"/>
			<VAR id="custom_out_string$index$" value="dsp.output_string$N$"/>
			<NEXT_N />
		</REPEAT>

	  <!-- Main audio bus channels-->
	  <FORMULA_PARAM id="main_bus_channels_count" formula="min(dsp.connected_inputs_count,dsp.connected_outputs_count)"/>

	  <!-- Custom parameters, built from param details in current script -->
	  <REPEAT count="$SCRIPT_PARAMS_COUNT$">
	    <!-- Input param for display and control, linked to actual DSP param-->
	    <PARAM id="custom_param$index$" min="0" max="1" default="0" name="Param $index$"/>

	    <PARAM_LINK from="$script_input_param$index$_min$" to="custom_param$index$.min"/>
	    <PARAM_LINK from="$script_input_param$index$_max$" to="custom_param$index$.max"/>
	    <PARAM_LINK from="$script_input_param$index$_default$" to="custom_param$index$.default"/>
	    <STRING_LINK from="$script_input_param$index$_unit$" to="custom_param$index$.unit"/>
	    <STRING_LINK from="$script_input_param$index$_name$" to="custom_param$index$.name"/>
	    <STRING_LINK from="$script_input_param$index$_value_format$" to="custom_param$index$.value_format"/>
	    <STRING_LINK from="$script_input_param$index$_enum_values$" to="custom_param$index$.enum_values"/>

	    <!-- additional steps link from letimix skin -->
	    <PARAM id="custom_param$index$_steps" min="0" max="$_PARAM_MAX_$" default="2" />
			<PARAM_LINK from="$script_input_param$index$_steps$" to="custom_param$index$_steps" />
			
			<PARAM_LINK from="$script_input$index$$" to="custom_param$index$" normalized="true" enabled="true" capture_enabled="false"/>
	    <!-- we enable back link from custom_paramN to dsp.inputM -->
	    <!-- in the default BC skin it's enabled only when capturing, but why? -->
	    <!-- <PARAM_LINK from="custom_param$index$" to="$script_input$index$$" enabled="true" normalized="true"/>
	    -->
			<PARAM_LINK from="custom_param$index$" to="$script_input$index$$" enabled="false" id="custom_param$index$_backlink" normalized="true"/>
	    <PARAM_LINK from="custom_param$index$.capturing" to="custom_param$index$_backlink.enabled"/>
	  	
	    <REQUIRED_OBJECTS object_ids="custom_param$index$.value_changed" />
	  </REPEAT>

	  <REPEAT count="$SCRIPT_OUT_PARAMS_COUNT$">
	    <!-- Output param for display, linked to actual DSP param-->
	    <PARAM id="custom_out_param$index$" min="0" max="1" default="0" name="Out Param $index$"/>
	    <PARAM_LINK from="$script_output_param$index$_min$" to="custom_out_param$index$.min"/>
	    <PARAM_LINK from="$script_output_param$index$_max$" to="custom_out_param$index$.max"/>
	    <PARAM_LINK from="$script_output_param$index$_default$" to="custom_out_param$index$.default"/>
	    <STRING_LINK from="$script_output_param$index$_unit$" to="custom_out_param$index$.unit"/>
	    <STRING_LINK from="$script_output_param$index$_name$" to="custom_out_param$index$.name"/>
	    <STRING_LINK from="$script_output_param$index$_value_format$" to="custom_out_param$index$.value_format"/>
	    <STRING_LINK from="$script_output_param$index$_enum_values$" to="custom_out_param$index$.enum_values"/>
	    <PARAM_LINK from="$script_output$index$$" to="custom_out_param$index$" normalized="true"/>
	    <REQUIRED_OBJECTS object_ids="custom_out_param$index$.value_changed" />
	  </REPEAT>

	  <!-- make sure DSP data is not stripped -->
	  <REQUIRED_OBJECTS object_ids="dsp;dsp.sample_rate;dsp.max_block_size;dsp.output_string0;dsp.private_output0" />
		
		<!-- make sure DSP data is not stripped -->
		<REPEAT count="$PLUGIN_INPUT_PARAMS_COUNT$">
		  <REQUIRED_OBJECTS object_ids="dsp.input$index$;dsp.input$index$.value_changed;Show_dsp.input$index$_ControlSetup"/>
		</REPEAT>
		<REPEAT count="$PLUGIN_INPUT_STRINGS_COUNT$">
		  <REQUIRED_OBJECTS object_ids="dsp.input_string$index$;dsp.input_string$index$.value_changed"/>
		</REPEAT>
		<REPEAT count="$PLUGIN_OUTPUT_PARAMS_COUNT$">
		  <REQUIRED_OBJECTS object_ids="dsp.output$index$;dsp.output$index$.value_changed;Show_dsp.output$index$_ControlSetup"/>
		</REPEAT>
		<REPEAT count="$PLUGIN_OUTPUT_STRINGS_COUNT$">
	    <REQUIRED_OBJECTS object_ids="dsp.output_string$index$;dsp.output_string$index$.value_changed"/>
	  </REPEAT>

	  <!-- editable mode: make sure DSP data is not stripped (not exposing all to improve performance)-->
	  <IF condition="$SCRIPT_EDIT_MODE$">
	    <REPEAT count="$PLUGIN_PRIVATE_OUTPUT_PARAMS_COUNT$">
	      <REQUIRED_OBJECTS object_ids="dsp.private_output$index$;dsp.private_output$index$.value_changed"/>
	    </REPEAT>
	  </IF>
	</IF_PNS>

	<!-- dummy params for generic plugin (not PNS) -->
	<IF_NOT_PNS>
	  <ESTRING id="generic_string" default="" />
	  <ESTRING id="plugin_name_string" default="$PLUGIN_NAME$" />
	  <VAR id="bypass" value="dsp.input0" />
	  <VAR id="reload_script" value="generic_param" />
	  <VAR id="script_status" value="generic_param" />
	  <VAR id="script_status_string" value="generic_string" />
	  <VAR id="script_name_string" value="plugin_name_string" />
	  <VAR id="script_description_string" value="generic_string" />
	  <VAR id="script_author_string" value="generic_string" />
	  <VAR id="script_file_path" value="generic_string" />
	  <VAR id="log_file_path" value="generic_string" />
	  <VAR id="script_doc_path" value="generic_string" />
	  <VAR id="script_gui_path" value="generic_string" />
	  <VAR id="script_input_params_count" value="generic_param" />
	  <VAR id="script_output_params_count" value="generic_param" />
	  <VAR id="script_input_strings_count" value="generic_param" />
	  <VAR id="script_output_strings_count" value="generic_param" />

	  <!-- make sure DSP data is not stripped -->
	  <REQUIRED_OBJECTS object_ids="dsp.sample_rate;dsp.max_block_size"/>
	</IF_NOT_PNS>
	  
	  <!-- for both PNS and Generic plugin -->
	  <VAR id="input_channels_count" value="$PLUGIN_AUDIO_INPUTS_COUNT$"/>
	  <VAR id="output_channels_count" value="$PLUGIN_AUDIO_OUTPUTS_COUNT$"/>
	  <!-- Opacity -->
	  <PARAM id="global_opacity" min="0" max="100" default="100" unit="%" persistent="true"/>
	  <PARAM_LINK from="global_opacity" to="window.opacity" normalized="true"/>
	  
	  <!-- for compliance with default skin -->
	  <PARAM id="theme.show_settings" type="boolean" default="0" locked="false" exposed="true" />

	  <!-- more useful params -->
	  <FORMULA_PARAM id="skin_loading" formula="alive&amp;&amp;(window.loaded==false)" type="boolean" default="false"/>
	  <!--
	  <FORMULA_PARAM id="gui_zoom_ok" formula="(gui.zoom-floor(gui.zoom)&lt;0.2)" type="boolean" default="true"/>
	-->

	  <STRING id="current_preset_name_with_asterisk" default="" />
	  <STRING id="asterisk" default=" *" />
	  <STRING id="noasterisk" default="" />
	  <STRING_MULTI_LINK id="link_current_preset_name_with_asterisk" from="current_preset.name;asterisk" to="current_preset_name_with_asterisk" />
	  <STRING_MULTI_LINK id="link_current_preset_name_with_noasterisk" from="current_preset.name;noasterisk" to="current_preset_name_with_asterisk" />
	  <PARAM_LINK from="current_preset.modified" to="link_current_preset_name_with_asterisk.enabled" formula="(x > 0.5)"/>
	  <PARAM_LINK from="current_preset.modified" to="link_current_preset_name_with_noasterisk.enabled" formula="(x &lt; 0.5)" />

	<!-- ###################################### -->
	<!-- END OF MAPPINGS  -->
	<!-- ###################################### -->


	











	<!-- ###################################### -->
	<!-- COMMON GRAPHICS AND TEMPLATES  -->
	<!-- ###################################### -->


	<!-- Simple SVG Background -->
	<TEMPLATE id="SVG_BG" color="#EEEEEE" opacity="1">
	  <svg width="100%" height="100%" viewBox='0 0 10 10' opacity="$opacity$">
	    <rect fill="$color$" width="100%" height="100%" />
	  </svg>
	</TEMPLATE>

	<!-- Custom Gradient-capable Background -->
	<TEMPLATE id="SVG_GRADIENT" type="1" opacity="1" color1="#EEEEEE" color2="#000000" opacity1="1" opacity2="1" pos1="0" pos2="100" shift="0">
	    <!-- vertical up-down -->
	    <LV id="x1" value="0" />
	    <LV id="y1" value="0" />
	    <LV id="y2" value="10" />
	    <LV id="x2" value="0" />
	    <LV id="gcolor1" value="$color1$" />
	    <LV id="gcolor2" value="$color2$" />
	    <LV id="gopacity1" value="$opacity1$" />
	    <LV id="gopacity2" value="$opacity2$" />
	    <LV id="s1" formula="$pos1$+$shift$" /> <!-- stop positions -->
	    <LV id="s2" formula="$pos2$+$shift$" />
	    <LV id="s3" value="100+$shift$" />
	    <LV id="s4" value="100+$shift$" />
	    <!-- flat (no gradient, fill with primary color) -->
	    <REPEAT count="($type$ == 0)" index_name="_i00_">
	      <LV id="gcolor2" value="$color1$" />
	      <!-- <LV id="gopacity1" value="1" /> ignore color1 opacity (use global) -->
	      <LV id="gopacity2" value="$gopacity1$" />
	      <LV id="s1" value="0" />
	      <LV id="s2" value="100" />
	    </REPEAT>
	    <!-- vertical up-down -->
	    <REPEAT count="($type$ == 1)" index_name="_i01_">
	      <LV id="x1" value="0" />
	      <LV id="y1" value="0" />
	      <LV id="y2" value="10" />
	      <LV id="x2" value="0" />
	    </REPEAT>
	    <!-- vertical down-up -->
	    <REPEAT count="($type$ == 2)" index_name="_i02_">
	      <LV id="x1" value="0" />
	      <LV id="y1" value="10" />
	      <LV id="y2" value="0" />
	      <LV id="x2" value="0" />
	    </REPEAT>
	    <!-- vertical edges-center -->
	    <REPEAT count="($type$ == 3)" index_name="_i03_">
	      <LV id="s2" formula="-50+$pos2$+$shift$" />
	      <LV id="s3" formula="150-$pos2$+$shift$" />
	      <LV id="s4" formula="100-$pos1$+$shift$" />
	    </REPEAT>
	    <!-- vertical center-edges -->
	    <REPEAT count="($type$ == 4)" index_name="_i04_">
	      <LV id="s1" formula="100-$pos2$+$shift$" />
	      <LV id="s2" formula="50-$pos1$+$shift$" />
	      <LV id="s3" formula="50+$pos1$+$shift$" />
	      <LV id="s4" formula="$pos2$+$shift$" />
	      <LV id="gcolor1" value="$color2$" />
	      <LV id="gcolor2" value="$color1$" />
	      <LV id="gopacity1" value="$opacity2$" />
	      <LV id="gopacity2" value="$opacity1$" />
	    </REPEAT>

	    <!-- horizontal left-right -->
	    <REPEAT count="($type$ == 5)" index_name="_i05_">
	      <LV id="x1" value="0" />
	      <LV id="y1" value="0" />
	      <LV id="y2" value="0" />
	      <LV id="x2" value="10" />
	    </REPEAT>
	    <!-- horizontal right-left -->
	    <REPEAT count="($type$ == 6)" index_name="_i06_">
	      <LV id="x1" value="10" />
	      <LV id="y1" value="0" />
	      <LV id="y2" value="0" />
	      <LV id="x2" value="0" />
	    </REPEAT>
	    <!-- horizontal edges-center -->
	    <REPEAT count="($type$ == 7)" index_name="_i07_">
	      <LV id="x1" value="0" />
	      <LV id="y1" value="0" />
	      <LV id="y2" value="0" />
	      <LV id="x2" value="10" />
	      <LV id="s2" formula="-50+$pos2$+$shift$" />
	      <LV id="s3" formula="150-$pos2$+$shift$" />
	      <LV id="s4" formula="100-$pos1$+$shift$" />
	    </REPEAT>
	    <!-- horizontal center-edges -->
	    <REPEAT count="($type$ == 8)" index_name="_i08_">
	      <LV id="x1" value="0" />
	      <LV id="y1" value="0" />
	      <LV id="y2" value="0" />
	      <LV id="x2" value="10" />
	      <LV id="gcolor1" value="$color2$" />
	      <LV id="gcolor2" value="$color1$" />
	      <LV id="gopacity1" value="$opacity2$" />
	      <LV id="gopacity2" value="$opacity1$" />
	      <LV id="s1" formula="100-$pos2$+$shift$" />
	      <LV id="s2" formula="50-$pos1$+$shift$" />
	      <LV id="s3" formula="50+$pos1$+$shift$" />
	      <LV id="s4" formula="$pos2$+$shift$" />
	    </REPEAT>

	    <!-- show gradient -->
	    <svg width="100%" height="100%" viewBox='0 0 10 10' opacity="$opacity$">
	      <linearGradient id="grad" x1="$x1$" x2="$x2$" y1="$y1$" y2="$y2$">
	        <stop offset="$s1$%" stop-color="$gcolor1$" stop-opacity="$gopacity1$" />
	        <stop offset="$s2$%" stop-color="$gcolor2$" stop-opacity="$gopacity2$" />
	        <stop offset="$s3$%" stop-color="$gcolor2$" stop-opacity="$gopacity2$" />
	        <stop offset="$s4$%" stop-color="$gcolor1$" stop-opacity="$gopacity1$" />
	      </linearGradient>
	      <rect fill="url(#grad)" width="100%" height="100%" />
	    </svg>
	</TEMPLATE>

	<!-- complex background with edges -->
	<TEMPLATE id="LM_BG" type="1" opacity="1" color1="#EEEEEE" color2="#000000" opacity1="1" opacity2="1" pos1="0" pos2="100" shift="0" edges_mode="0" edge1="10" edge2="20" color3="#00FF00" color4="#FF0000" opacity3="1" opacity4="1" pos3="0" pos4="100">
	  <!-- edge A gradient -->
	  <LV id="ga_type" value="1" />
	  <LV id="ga_col1" value="$color3$" />
	  <LV id="ga_col2" value="$color1$" />
	  <LV id="ga_op1" value="$opacity3$" />
	  <LV id="ga_op2" value="$opacity1$" />
	  <LV id="ga_pos1" value="$pos3$" />
	  <LV id="ga_pos2" value="100" />

	  <!-- edge B gradient -->
	  <LV id="gb_type" value="1" />
	  <LV id="gb_col1" value="$color2$" />
	  <LV id="gb_col2" value="$color4$" />
	  <LV id="gb_op1" value="$opacity2$" />
	  <LV id="gb_op2" value="$opacity4$" />
	  <LV id="gb_pos1" value="0" />
	  <LV id="gb_pos2" value="$pos4$" />

	  <!-- if no gradient -->
	  <REPEAT count="($type$ == 0)" index_name="_i10_">
	    <LV id="gb_col1" value="$color1$" />
	    <LV id="gb_op1" value="$opacity1$" />
	  </REPEAT>

	  <!-- if reversed colors -->
	  <REPEAT count="($type$ == 2)+($type$ == 6)" index_name="_i12_">
	    <LV id="ga_col2" value="$color2$" />
	    <LV id="ga_op2" value="$opacity2$" />
	    <LV id="gb_col1" value="$color1$" />
	    <LV id="gb_op1" value="$opacity1$" />
	  </REPEAT>

	  <!-- if colors to center -->
	  <REPEAT count="($type$ == 3)+($type$ == 7)" index_name="_i13_">
	    <LV id="gb_col1" value="$color1$" />
	    <LV id="gb_op1" value="$opacity1$" />
	  </REPEAT>

	  <!-- if colors from center -->
	  <REPEAT count="($type$ == 4)+($type$ == 8)" index_name="_i14_">
	    <LV id="ga_col2" value="$color2$" />
	    <LV id="ga_op2" value="$opacity2$" />
	  </REPEAT>

	  <!-- define are edges up-down or left-right -->
	  <LV id="edges_are_updown" formula="($type$ &lt; 5)*($edges_mode$ == 0) + ($edges_mode$ &lt; 9)*($edges_mode$ != 0)" />
	  <LV id="edges_are_leftright" formula="($type$ > 4)*($edges_mode$ == 0) + ($edges_mode$ > 8)*($edges_mode$ != 0)" />

	  <!-- if up-down edges -->
	  <REPEAT count="($edges_are_updown$ > 0)" index_name="_ilud_">
	    <!-- different edges types -->
	    <REPEAT count="($edges_mode$ == 1)" index_name="_et1_">
	      <LV id="ga_type" value="1" /> 
	      <LV id="gb_type" value="1" /> 
	    </REPEAT>
	    <REPEAT count="($edges_mode$ == 2)" index_name="_et2_">
	      <LV id="ga_type" value="5" /> 
	      <LV id="gb_type" value="5" /> 
	    </REPEAT>
	    <REPEAT count="($edges_mode$ == 3)" index_name="_et3_">
	      <LV id="ga_type" value="6" /> 
	      <LV id="gb_type" value="6" /> 
	    </REPEAT>
	    <REPEAT count="($edges_mode$ == 4)" index_name="_et4_">
	      <LV id="ga_type" value="5" /> 
	      <LV id="gb_type" value="6" /> 
	    </REPEAT>
	    <REPEAT count="($edges_mode$ == 5)" index_name="_et5_">
	      <LV id="ga_type" value="1" /> 
	      <LV id="gb_type" value="5" /> 
	    </REPEAT>
	    <REPEAT count="($edges_mode$ == 6)" index_name="_et6_">
	      <LV id="ga_type" value="5" /> 
	      <LV id="gb_type" value="1" /> 
	    </REPEAT>
	    <REPEAT count="($edges_mode$ == 7)" index_name="_et7_">
	      <LV id="ga_type" value="7" /> 
	      <LV id="gb_type" value="8" /> 
	    </REPEAT>
	    <REPEAT count="($edges_mode$ == 8)" index_name="_et8_">
	      <LV id="ga_type" value="8" /> 
	      <LV id="gb_type" value="7" /> 
	    </REPEAT>

	    <CELL width="100%" height="100%">
	      <CELL width="100%" height="$edge1$">
	        <SVG_GRADIENT type="$ga_type$" opacity="$opacity$" color1="$ga_col1$" color2="$ga_col2$" opacity1="$ga_op1$" opacity2="$ga_op2$" pos1="$ga_pos1$" pos2="$ga_pos2$" shift="0" />
	      </CELL>
	      <CELL width="100%" flex="1">
	        <SVG_GRADIENT type="$type$" opacity="$opacity$" color1="$color1$" color2="$color2$" opacity1="$opacity1$" opacity2="$opacity2$" pos1="$pos1$" pos2="$pos2$" shift="$shift$" />
	      </CELL>
	      <CELL width="100%" height="$edge2$">
	        <SVG_GRADIENT type="$gb_type$" opacity="$opacity$" color1="$gb_col1$" color2="$gb_col2$" opacity1="$gb_op1$" opacity2="$gb_op2$" pos1="$gb_pos1$" pos2="$gb_pos2$" shift="0" />
	      </CELL>
	    </CELL>
	  </REPEAT>

	  <!-- if left-right edges -->
	  <REPEAT count="($edges_are_leftright$ > 0)" index_name="_illr_">

	    <REPEAT count="($edges_mode$ &lt; 10)" index_name="_et09_">
	      <LV id="ga_type" value="5" /> 
	      <LV id="gb_type" value="5" /> 
	    </REPEAT>
	    <REPEAT count="($edges_mode$ == 10)" index_name="_et10_">
	      <LV id="ga_type" value="1" /> 
	      <LV id="gb_type" value="1" /> 
	    </REPEAT>
	    <REPEAT count="($edges_mode$ == 11)" index_name="_et11_">
	      <LV id="ga_type" value="1" /> 
	      <LV id="gb_type" value="2" /> 
	    </REPEAT>
	    <REPEAT count="($edges_mode$ == 12)" index_name="_et12_">
	      <LV id="ga_type" value="2" /> 
	      <LV id="gb_type" value="1" /> 
	    </REPEAT>
	    <REPEAT count="($edges_mode$ == 13)" index_name="_et13_">
	      <LV id="ga_type" value="2" /> 
	      <LV id="gb_type" value="2" /> 
	    </REPEAT>
	    <REPEAT count="($edges_mode$ == 14)" index_name="_et14_">
	      <LV id="ga_type" value="3" /> 
	      <LV id="gb_type" value="3" /> 
	    </REPEAT>
	    <REPEAT count="($edges_mode$ == 15)" index_name="_et15_">
	      <LV id="ga_type" value="4" /> 
	      <LV id="gb_type" value="4" /> 
	    </REPEAT>
	    <REPEAT count="($edges_mode$ == 16)" index_name="_et16_">
	      <LV id="ga_type" value="4" /> 
	      <LV id="gb_type" value="3" /> 
	    </REPEAT>

	    <ROW width="100%" height="100%">
	      <CELL width="$edge1$" height="100%">
	        <SVG_GRADIENT type="$ga_type$" opacity="$opacity$" color1="$ga_col1$" color2="$ga_col2$" opacity1="$ga_op1$" opacity2="$ga_op2$" pos1="$ga_pos1$" pos2="$ga_pos2$" shift="0" />
	      </CELL>
	      <CELL height="100%" flex="1">
	        <SVG_GRADIENT type="$type$" opacity="$opacity$" color1="$color1$" color2="$color2$" opacity1="$opacity1$" opacity2="$opacity2$" pos1="$pos1$" pos2="$pos2$" shift="$shift$" />
	      </CELL>
	      <CELL width="$edge2$" height="100%">
	        <SVG_GRADIENT type="$gb_type$" opacity="$opacity$" color1="$gb_col1$" color2="$gb_col2$" opacity1="$gb_op1$" opacity2="$gb_op2$" pos1="$gb_pos1$" pos2="$gb_pos2$" shift="0" />
	      </CELL>
	    </ROW>
	  </REPEAT>
	</TEMPLATE>

	<!-- show background with data comma-separated -->
	<TEMPLATE id="LM_BG_PARSER" data="">
	  <VAR id="N" value="0" />
	  <REPEAT index_list="$data$">
	    <VAR id="T$N$" value="$index$" /><NEXT_N />
	  </REPEAT>
	  <LM_BG type='$T0$' opacity='$T1$' shift='$T2$' edges_mode='$T3$' edge1='$T4$' edge2='$T5$' color1='$T10$' opacity1='$T11$' pos1='$T12$' color2='$T13$' opacity2='$T14$' pos2='$T15$' color3='$T16$' opacity3='$T17$' pos3='$T18$' color4='$T19$' opacity4='$T20$' pos4='$T21$' />
	</TEMPLATE>


	<!-- LM_BOX_RAW: An element capable of drawing gradient-filled backgrounds, stroked with rounded corners (similar to LM_BG, LM_BG_PARSER, but using CANVAS instead of svg)
	gradient_type;global_opacity;gradient_shift;stroke_width;stroke_expand;stroke_round;y_offset;;;;#bgcolor1;opacity1;pos1;#bgcolor2;opacity2;pos2;#strokecolor;opacity3;unused; -->
	<TEMPLATE id="LM_BOX_RAW" data="0;0.6;0;1.7;0;10;0;;;;#FFFFFF;1;0;#FFFFFF;1;100;#777777;0.5;0" expand_invert="0" width="100%" height="100%" opacity="1" min_width="10" min_height="10">	  
		<LV id="CNVID" value="cnvboxraw_$LMPR$$LMID$" /><NEXT_LMID />
	   <CANVAS opacity="$opacity$" id="$CNVID$" width="$width$" height="$height$" min_width="$min_width$" min_height="$min_height$" render_script="LM::renderBox(this.width, this.height, &quot;$data$;;;;;;;;;;;;;;;;;;;&quot;, ($expand_invert$>0.5));" requires="$CNVID$.width;$CNVID$.height;$CNVID$.opacity;renderBox" />
	</TEMPLATE>
	
	<!-- a wrap-up for LM_BOX_RAW with more readable params -->
	<TEMPLATE id="LM_BOX" width="100%" height="100%" round="10" opacity="0.5" fill_color="#EEEEEE" fill_opacity="0" fill_pos="0" stroke_color="#777777" stroke_opacity="0.5" stroke_width="1.7" stroke_expand="0" gradient_type="0" gradient_shift="0" fill_color2="" fill_opacity2="0" fill_pos2="100" y_offset="0" render_opacity="1" min_width="10" min_height="10">

		<LM_BOX_RAW opacity="$opacity$" width="$width$" height="$height$" min_width="$min_width$" min_height="$min_height$" data="$gradient_type$;$render_opacity$;$gradient_shift$;$stroke_width$;$stroke_expand$;$round$;$y_offset$;;;;$fill_color$;$fill_opacity$;$fill_pos$;$fill_color2$;$fill_opacity2$;$fill_pos2$;$stroke_color$;$stroke_opacity$;;" />
	</TEMPLATE>

	
	<!-- ###################################### -->
	<!-- COMMON RENDER OBJECTS, BASIC RENDER CONTROLS ETC   -->
	<!-- ###################################### -->


	<!-- LM_CANVAS template (CANVAS that can be used to draw multiple widgets) -->
	<TEMPLATE id="LM_CANVAS" width="300" height="200">
	  <LV id="ELMID" value="$id$" />
	  <SCRIPT script="LM::Canvas obj_$ELMID$($width$, $height$); " />
	  <CANVAS opacity="1" id="$ELMID$" width="$width$" height="$height$" render_script="obj_$ELMID$.DrawItems()" />
	</TEMPLATE>

	<!-- template for simple knob -->
	<TEMPLATE id="LMR_TPL_SIMPLE_KNOB" 
	  param_id="_" visible="true" opacity="1" positions_count="201" pixel_range="128" zoom="1" offset="0" reverse="false" 
	  disabled="false" disabled_opacity="0.2"
	  size="52" body_size="0.95" scaling="1" color="#000000" body_opacity="1"
	  marker_start="0.0" marker_end="0.56" marker_width="1" marker_color="#FFFFFF" marker_opacity="1" marker_stroke_width="1" marker_type="1"
	  angle_start="-135" angle_end="135"
	  color1="" color2="" opacity1="" opacity2=""
	  title="" title_as_param_tooltip="0"
	  >
	  
	  <!-- generate element id -->
	  <LV id="ELMID" value="knob_$LMPR$_$LMID$" /><VAR id="LMID" formula="$LMID$ + 1" />
	  <LV id="ID_IS_SET" script="if (&quot;$id$&quot; == &quot;$&quot;+&quot;id$&quot;) return &quot;0&quot;; else return &quot;1&quot;;" />

	  <!-- generate id if not given -->
	  <LV id="W_ID" value="$id$" />
	  <R count="$ID_IS_SET$ == 0">
	  	<LV id="W_ID" value="$ELMID$" />
	  </R>
	  <LV id="_color" value="$color$" />
	  <LV id="_body_opacity" value="$body_opacity$" />
	  <LV id="_marker_color" value="$marker_color$" />
	  <LV id="_marker_opacity" value="$marker_opacity$" />
	  <!-- aliases for auto-layout compatibility -->
	  <R index_list="$color1$"><LV id="_color" value="$color1$" /></R>
		<R index_list="$color2$"><LV id="_marker_color" value="$color2$" /></R>
		<R index_list="$opacity1$"><LV id="_body_opacity" value="$opacity1$" /></R>
		<R index_list="$opacity2$"><LV id="_marker_opacity" value="$opacity2$" /></R>

		<LV id="_size" formula="$size$*$scaling$" />

	  <!-- create param with normalized value (from 0 to 1) -->
	  <FPARAM id="$ELMID$_nval" min="0" max="1" formula="$W_ID$.zoom*(abs($reverse$-($param_id$-$param_id$.min)/($param_id$.max-$param_id$.min))) - ($W_ID$.zoom - 1)*$W_ID$.offset" exposed="true" />
	  
	  <!-- calculate additional local vars -->
	  <LV id="knob_image_scaling" formula="$_size$" />

	  <!-- create object -->
	  <SCRIPT script="LM::SimpleKnob obj_$ELMID$($_size$, &quot;$angle_start$;$angle_end$;$_color$;$_body_opacity$;$body_size$;$marker_start$;$marker_end$;$marker_width$;$_marker_color$;$_marker_opacity$;$marker_type$;$marker_stroke_width$&quot;); 
	    bool obj_$ELMID$_initialized = false;" />

	  <CELL>
	    <LAYER_STACK>
	        <CANVAS opacity="$opacity$" id="cnv_$ELMID$" width="$_size$" height="$_size$" render_script="obj_$ELMID$.render($ELMID$_nval);" requires="" />
	        <IMAGE_PARAM_KNOB id="$W_ID$" param_id="$param_id$" opacity="$opacity$" image_scaling="$knob_image_scaling$" positions_count="$positions_count$" visible="$visible$" pixel_range="$pixel_range$" image="$LM_DIR$$CONTROLS_SUBDIR$/empty.png" images_count="1" image_orientation="vertical" cursor="$CUR_HAND$" ignore_mask_files="true" reverse="$reverse$" zoom="$zoom$" offset="$offset$" opaque_mouse_mask="true">
	        	<R index_list="$title$">
	        		<R count="$title_as_param_tooltip$==0"><TT text="$title$"/></R>
							<R count="$title_as_param_tooltip$"><PARAM_TOOLTIP param_id="$param_id$" content="$title$"/></R>
	        	</R>
	        	<TEMPLATE_INNER_CONTENT />
	        </IMAGE_PARAM_KNOB>
	        
	        <!-- if id is set, create control links  -->
	        <R count="$ID_IS_SET$">
	          <PARAM_LINK from="$W_ID$.visible" to="cnv_$ELMID$.display" id="link_$W_ID$_visible" />
	          <PARAM_LINK from="$W_ID$.display" to="cnv_$ELMID$.display" />
	          <PARAM_LINK from="$W_ID$.opacity" to="cnv_$ELMID$.opacity" />
	          <!-- additional "disabled" attribute -->
	          <PARAM id="$id$.disabled" type="boolean" default="false" />
	          <PARAM_LINK from="$id$.disabled" to="cnv_$ELMID$.opacity" formula="1+$disabled_opacity$-x" />
	          <PARAM_LINK from="$id$.disabled" to="link_$W_ID$_visible.enabled" formula="1-x" />
	          <PARAM_LINK from="$id$.disabled" to="$W_ID$.visible" formula="1-x" />
	         </R>
	    </LAYER_STACK>

	    <ACTION_TRIGGER event_id="$param_id$.value_changed" script="cnv_$ELMID$.Invalidate()" requires="cnv_$ELMID$.Invalidate" />
	  </CELL>

	</TEMPLATE>
	
	<DEFINE>
		<LMR_KNOB base_type="LMR_TPL_SIMPLE_KNOB" size="50" color="#2c9fdf" marker_color="#EEEEEE" marker_end="0.56" />
	</DEFINE>

	<!-- ==================== -->
	<!-- SVG ICONS  -->
	<!-- ==================== -->

	<TEMPLATE id="SVG_ICON_DROPDOWN" color="#777777" vo="0" size="16" ho="0" opacity="1">
	  <svg v_offset="$vo$" h_offset="$ho$" width="$size$" height="$size$" viewBox="20 20 60 60" opacity="$opacity$"><polygon points="51.2,62.7 69,45 33,45" stroke="$color$" fill="$color$" /></svg>
	</TEMPLATE>

	<TEMPLATE id="SVG_ICON_UPDOWN" color="#777777" size="16" opacity="1">
	<svg width="$size$" height="20" viewBox="20 10 60 60"  opacity="$opacity$">
	  <polygon points="51,20 69,36 33,36" stroke="$color$" fill="$color$" /><polygon points="51,62 69,46 33,46" stroke="$color$" fill="$color$" /></svg>
	</TEMPLATE>

	<TEMPLATE id="SVG_ICON_PREV" color="#777777" size="16" opacity="1">
		<svg width="$size$" height="$size$" viewBox="-120 170 700 650" opacity="$opacity$">
		<path fill="$color$" d="M400 270c0 0 0 460 0 460c0 0 -400 -230 -400 -230c0 0 400 -230 400 -230" />
		</svg>
	</TEMPLATE>

	<TEMPLATE id="SVG_ICON_NEXT" color="#777777" size="16" opacity="1">
	<svg width="$size$" height="$size$" viewBox="-180 170 700 650" opacity="$opacity$">
	<path fill="$color$" d="M0 270c0 0 400 230 400 230c0 0 -400 230 -400 230c0 0 0 -460 0 -460c0 0 0 0 0 0" />
	</svg>
	</TEMPLATE>

	<TEMPLATE id="SVG_ICON_MENU" color="#777777" size="16" opacity="1">
	<svg h_offset="2" width="$size$" height="$size$" viewBox="0 1 80 40" opacity="$opacity$">
	  <line class="cls-1" x1="0" y1="10" x2="60" y2="10" stroke="$color$" stroke-width="5" /><line class="cls-1" x1="0" y1="20" x2="60" y2="20" stroke="$color$" stroke-width="5" /><line class="cls-1" x1="0" y1="30" x2="60" y2="30" stroke="$color$" stroke-width="5" />
	</svg>
	</TEMPLATE>

	<TEMPLATE id="SVG_ICON_INFO" color="#777777" size="16" opacity="1">
	<svg width="$size$" height="$size$" viewBox="1 2 21 21" opacity="$opacity$">
	    <path fill="$color$" stroke="none" d="M11 17h2v-6h-2v6zm1-15C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zM11 9h2V7h-2v2z"/></svg>
	</TEMPLATE>

	<TEMPLATE id="SVG_ICON_QUESTION" color="#777777" size="16" opacity="1">
		<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 525 525"  width="$size$" height="$size$" fill="$color$" opacity="$opacity$"><path d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 448c-110.532 0-200-89.431-200-200 0-110.495 89.472-200 200-200 110.491 0 200 89.471 200 200 0 110.53-89.431 200-200 200zm107.244-255.2c0 67.052-72.421 68.084-72.421 92.863V300c0 6.627-5.373 12-12 12h-45.647c-6.627 0-12-5.373-12-12v-8.659c0-35.745 27.1-50.034 47.579-61.516 17.561-9.845 28.324-16.541 28.324-29.579 0-17.246-21.999-28.693-39.784-28.693-23.189 0-33.894 10.977-48.942 29.969-4.057 5.12-11.46 6.071-16.666 2.124l-27.824-21.098c-5.107-3.872-6.251-11.066-2.644-16.363C184.846 131.491 214.94 112 261.794 112c49.071 0 101.45 38.304 101.45 88.8zM298 368c0 23.159-18.841 42-42 42s-42-18.841-42-42 18.841-42 42-42 42 18.841 42 42z"/></svg>
	</TEMPLATE>

	<TEMPLATE id="SVG_ICON_UNDO" color="#777777" size="16" opacity="1">
	<svg width="$size$" height="$size$" viewBox="0 -2 18 18" opacity="$opacity$">
	<path fill="$color$" stroke="none" d="M11.904 16c1.777-3.219 2.076-8.13-4.904-7.966v3.966l-6-6 6-6v3.881c8.359-0.218 9.29 7.378 4.904 12.119z"></path>
	</svg>
	</TEMPLATE>

	<TEMPLATE id="SVG_ICON_REDO" color="#777777" size="16" opacity="1">
	<svg width="$size$" height="$size$" viewBox="0 -2 18 18" opacity="$opacity$">
	<path fill="$color$" stroke="none" d="M9 3.881v-3.881l6 6-6 6v-3.966c-6.98-0.164-6.681 4.747-4.904 7.966-4.386-4.741-3.455-12.337 4.904-12.119z"></path>
	</svg>
	</TEMPLATE>

	<!-- status icons -->
	<!-- play -->
	<TEMPLATE id="SVG_ICON_RUNNING" size="16" color="#777777" opacity="1">
	  <svg width="$size$" height="$size$" viewBox="0 0 20 20" opacity="$opacity$">
	    <path fill="$color$" d="M2.93 17.07A10 10 0 1 1 17.07 2.93 10 10 0 0 1 2.93 17.07zm12.73-1.41A8 8 0 1 0 4.34 4.34a8 8 0 0 0 11.32 11.32zM7 6l8 4-8 4V6z"/>
	  </svg>
	</TEMPLATE>

	<!-- attention -->
	<TEMPLATE id="SVG_ICON_WARNING" size="16" color="#777777" opacity="1">
	  <svg width="$size$" height="$size$" viewBox="0 0 1000 1000" opacity="$opacity$">
	    <path fill="$color$" d="M956.5390625 874c6.667 10.667 6.667 22 0 34c-6.667 10.667 -16.667 16 -30 16c0 0 -892 0 -892 0c-12 0 -21.333 -5.333 -28 -16c-8 -12 -8.667 -23.333 -2 -34c0 0 446 -782 446 -782c5.333 -12 15.333 -18 30 -18c14.667 0 24.667 6 30 18c0 0 446 782 446 782m-420 -50c0 0 0 -100 0 -100c0 0 -110 0 -110 0c0 0 0 100 0 100c0 0 110 0 110 0c0 0 0 0 0 0m0 -174c0 0 0 -300 0 -300c0 0 -110 0 -110 0c0 0 0 300 0 300c0 0 110 0 110 0c0 0 0 0 0 0" />
	  </svg>
	</TEMPLATE>

	<!-- errors -->
	<TEMPLATE id="SVG_ICON_ERROR" size="16" color="#777777" opacity="1">
	  <svg width="$size$" height="$size$" viewBox="0 0 20 20" opacity="$opacity$"><path fill="$color$" d="M2.93 17.07A10 10 0 1 1 17.07 2.93 10 10 0 0 1 2.93 17.07zM11.4 10l2.83-2.83-1.41-1.41L10 8.59 7.17 5.76 5.76 7.17 8.59 10l-2.83 2.83 1.41 1.41L10 11.41l2.83 2.83 1.41-1.41L11.41 10z"/></svg>
	</TEMPLATE>

	<!-- stopwatch -->
	<TEMPLATE id="SVG_ICON_STOPWATCH" size="16" color="#777777" opacity="1">
	  <svg width="$size$" height="$size$" viewBox="2 3 20 21" opacity="$opacity$"><g><path fill="$color$" d="M19.414 8.902c.104-.048.206-.108.293-.195l.5-.5c.391-.391.391-1.023 0-1.414s-1.023-.391-1.414 0l-.5.5-.115.173c-1.387-1.312-3.188-2.19-5.189-2.41l.011-.056v-1h1c.55 0 1-.45 1-1s-.45-1-1-1h-4c-.55 0-1 .45-1 1s.45 1 1 1h1v1l.012.057c-4.506.492-8.012 4.307-8.012 8.943 0 4.971 4.029 9 9 9s9-4.029 9-9c0-1.894-.588-3.648-1.586-5.098zm-7.414 12.098c-3.859 0-7-3.14-7-7s3.141-7 7-7 7 3.14 7 7-3.141 7-7 7zM13 13v-2c0-.55-.45-1-1-1s-1 .45-1 1v3c0 .55.45 1 1 1h3c.55 0 1-.45 1-1s-.45-1-1-1h-2zM12 8c-3.312 0-6 2.688-6 6s2.688 6 6 6 6-2.688 6-6-2.688-6-6-6zm0 11c-2.757 0-5-2.243-5-5s2.243-5 5-5 5 2.243 5 5-2.243 5-5 5z"/></g></svg>
	</TEMPLATE>

	<!-- setting icons -->
	<TEMPLATE id="SVG_ICON_SETTINGS" color="#777777" size="18" opacity="1">
	  <svg width="$size$" height="$size$" viewBox="-1 -1 26 26" stroke="$color$" fill="none" stroke-width="2" opacity="$opacity$"><circle cx="12" cy="12" r="3"></circle><path stroke="$color$" d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path></svg>
	</TEMPLATE>

	<TEMPLATE id="SVG_ICON_SETTINGS_SOLID" color="#777777" size="20" opacity="1">
	  <svg width="$size$" height="$size$" viewBox="0 0 16 16" opacity="$opacity$"><path stroke="$color$" fill="$color$" d="M14 8.77v-1.6l-1.94-.64-.45-1.09.88-1.84-1.13-1.13-1.81.91-1.09-.45-.69-1.92h-1.6l-.63 1.94-1.11.45-1.84-.88-1.13 1.13.91 1.81-.45 1.09L0 7.23v1.59l1.94.64.45 1.09-.88 1.84 1.13 1.13 1.81-.91 1.09.45.69 1.92h1.59l.63-1.94 1.11-.45 1.84.88 1.13-1.13-.92-1.81.47-1.09L14 8.75v.02zM7 11c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3z"/></svg>
	</TEMPLATE>



	<TEMPLATE id="SVG_ICON_SAVE" color="#777777" size="20" opacity="1">
	  <svg xmlns="http://www.w3.org/2000/svg" width="$size$" height="$size$" viewBox="0 0 24 24" fill="none" stroke="$color$" stroke-width="2" opacity="$opacity$"><path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"></path><polyline points="17 21 17 13 7 13 7 21"></polyline><polyline points="7 3 7 8 15 8"></polyline></svg>
	</TEMPLATE>

	<TEMPLATE id="SVG_ICON_EYE" color="#777777" size="20" opacity="1">
	  <svg width="$size$" height="$size$" viewBox="0 0 576 512" opacity="$opacity$"><path fill="$color$" stroke="$color$" d="M288 144a110.94 110.94 0 0 0-31.24 5 55.4 55.4 0 0 1 7.24 27 56 56 0 0 1-56 56 55.4 55.4 0 0 1-27-7.24A111.71 111.71 0 1 0 288 144zm284.52 97.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400c-98.65 0-189.09-55-237.93-144C98.91 167 189.34 112 288 112s189.09 55 237.93 144C477.1 345 386.66 400 288 400z"/></svg>
	</TEMPLATE>

	<TEMPLATE id="SVG_ICON_ADJUST" color="#777777" size="20" opacity="1">
	  <svg width="$size$" height="$size$" viewBox="1.5 1.2 21 22.2" opacity="$opacity$"><path fill="$color$" fill-opacity="0.9" stroke="none" d="M12 4c-4.418 0-8 3.582-8 8s3.582 8 8 8 8-3.582 8-8-3.582-8-8-8zm0 14c-3.314 0-6-2.686-6-6s2.686-6 6-6 6 2.686 6 6-2.686 6-6 6zM12 7v10c2.757 0 5-2.243 5-5s-2.243-5-5-5z"/></svg>
	</TEMPLATE>

	<TEMPLATE id="SVG_ICON_POWER" color="#777777" size="20" opacity="1">
	  <svg width="$size$" height="$size$" viewBox="3 4 17 17" opacity="$opacity$"><path fill="$color$" stroke="none" d="M11.5 18.573c-1.736 0-3.368-.676-4.596-1.903-1.227-1.228-1.904-2.86-1.904-4.597s.677-3.369 1.904-4.597c.391-.391 1.023-.391 1.414 0s.391 1.023 0 1.414c-.85.851-1.318 1.981-1.318 3.183s.468 2.333 1.318 3.183c.85.85 1.979 1.317 3.182 1.317s2.332-.468 3.182-1.317c.851-.85 1.318-1.98 1.318-3.183s-.468-2.333-1.318-3.183c-.391-.391-.391-1.023 0-1.414s1.023-.391 1.414 0c1.227 1.229 1.904 2.861 1.904 4.597s-.677 3.369-1.904 4.597c-1.228 1.227-2.86 1.903-4.596 1.903zM11.5 11c-.553 0-1-.448-1-1v-5c0-.552.447-1 1-1s1 .448 1 1v5c0 .552-.447 1-1 1z"/></svg>
	</TEMPLATE>

	<TEMPLATE id="SVG_ICON_ZOOM" color="#777777" size="16" opacity="1">
	  <svg width="$size$" height="$size$" viewBox="-55 -55 420 420" opacity="$opacity$">
	    <path d="M273.587,214.965c49.11-49.111,49.109-129.021,0-178.132c-49.111-49.111-129.02-49.111-178.13,0
	      C53.793,78.497,47.483,140.462,76.51,188.85c0,0,2.085,3.498-0.731,6.312c-16.065,16.064-64.263,64.263-64.263,64.263
	      c-12.791,12.79-15.836,30.675-4.493,42.02l1.953,1.951c11.343,11.345,29.229,8.301,42.019-4.49c0,0,48.096-48.097,64.128-64.128
	      c2.951-2.951,6.448-0.866,6.448-0.866C169.958,262.938,231.923,256.629,273.587,214.965z M118.711,191.71
	      c-36.288-36.288-36.287-95.332,0.001-131.62c36.288-36.287,95.332-36.288,131.619,0c36.288,36.287,36.288,95.332,0,131.62
	      C214.043,227.996,155,227.996,118.711,191.71z" stroke="#AAAAAA" fill="$color$"/>
	    <path d="M126.75,118.424c-1.689,0-3.406-0.332-5.061-1.031c-6.611-2.798-9.704-10.426-6.906-17.038
	        c17.586-41.559,65.703-61.062,107.261-43.476c6.611,2.798,9.704,10.426,6.906,17.038c-2.799,6.612-10.425,9.703-17.039,6.906
	        c-28.354-11.998-61.186,1.309-73.183,29.663C136.629,115.445,131.815,118.424,126.75,118.424z" stroke="#AAAAAA" fill="$color$"/>
	  </svg>
	</TEMPLATE>

	<TEMPLATE id="SVG_ICON_FILE" color="#777777" size="16" opacity="1">
	  <svg width="$size$" height="$size$" viewBox="25.5 25 50 50" opacity="$opacity$"><polyline points="55.63 30.4 55.63 41.28 66.58 41.28" stroke="$color$" fill="none" stroke-width="3" /><path d="M54.29,30H37.37a3.28,3.28,0,0,0-3.28,3.28V66.72A3.28,3.28,0,0,0,37.37,70H63.63a3.28,3.28,0,0,0,3.28-3.28V42.62A3.23,3.23,0,0,0,66,40.34l-9.39-9.39A3.23,3.23,0,0,0,54.29,30Z" stroke="$color$" fill="none" stroke-width="3" /></svg>
	</TEMPLATE>
	
	 <TEMPLATE id="SVG_ICON_FOLDER" color='#777777' size="16" opacity='1'>
    <svg width="$size$" height="$size$" viewBox="0 0 576 512" opacity="$opacity$"><path fill="$color$" d="M527.9 224H480v-48c0-26.5-21.5-48-48-48H272l-64-64H48C21.5 64 0 85.5 0 112v288c0 26.5 21.5 48 48 48h400c16.5 0 31.9-8.5 40.7-22.6l79.9-128c20-31.9-3-73.4-40.7-73.4zM48 118c0-3.3 2.7-6 6-6h134.1l64 64H426c3.3 0 6 2.7 6 6v42H152c-16.8 0-32.4 8.8-41.1 23.2L48 351.4zm400 282H72l77.2-128H528z"/>
    </svg>
  </TEMPLATE>

	<TEMPLATE id="SVG_ICON_EDIT" color="#777777" size="14" opacity="1">
	  <svg width="$size$" height="$size$" viewBox="0 0 576 512" opacity="$opacity$"><path fill="$color$" stroke="$color$" d="M402.3 344.9l32-32c5-5 13.7-1.5 13.7 5.7V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V112c0-26.5 21.5-48 48-48h273.5c7.1 0 10.7 8.6 5.7 13.7l-32 32c-1.5 1.5-3.5 2.3-5.7 2.3H48v352h352V350.5c0-2.1.8-4.1 2.3-5.6zm156.6-201.8L296.3 405.7l-90.4 10c-26.2 2.9-48.5-19.2-45.6-45.6l10-90.4L432.9 17.1c22.9-22.9 59.9-22.9 82.7 0l43.2 43.2c22.9 22.9 22.9 60 .1 82.8zM460.1 174L402 115.9 216.2 301.8l-7.3 65.3 65.3-7.3L460.1 174zm64.8-79.7l-43.2-43.2c-4.1-4.1-10.8-4.1-14.8 0L436 82l58.1 58.1 30.9-30.9c4-4.2 4-10.8-.1-14.9z"/></svg>
	</TEMPLATE>

	<TEMPLATE id="SVG_ICON_OPACITY" color="#777777" size="12" opacity="1">
	  <svg height="$size$" width="$size$" viewBox="0 0 512 512" opacity="$opacity$"><path stroke="$color$" fill="$color$" d="M8 256c0 136.966 111.033 248 248 248s248-111.034 248-248S392.966 8 256 8 8 119.033 8 256zm248 184V72c101.705 0 184 82.311 184 184 0 101.705-82.311 184-184 184z"  /></svg>
	</TEMPLATE>

	<TEMPLATE id="SVG_ICON_LIST" color="#777777" size="16" opacity="1">
	  <svg height="$size$" width="$size$" viewBox="0 0 20 20" opacity="$opacity$"><path stroke="none" fill="$color$" d="M1 4h2v2H1V4zm4 0h14v2H5V4zM1 9h2v2H1V9zm4 0h14v2H5V9zm-4 5h2v2H1v-2zm4 0h14v2H5v-2z"/></svg>
	</TEMPLATE>

	<TEMPLATE id="SVG_ICON_CLOSE" color="#777777" size="16" opacity="1">
	  <svg viewBox="0 0 20 20" width="$size$" height="$size$" opacity="$opacity$"><path fill="$color$" d="M10 8.586L2.929 1.515 1.515 2.929 8.586 10l-7.071 7.071 1.414 1.414L10 11.414l7.071 7.071 1.414-1.414L11.414 10l7.071-7.071-1.414-1.414L10 8.586z"/></svg>
	</TEMPLATE>

	<TEMPLATE id="SVG_ICON_CORNER_RESIZE" color="#777777" size="16" opacity="1">
		<svg width="$size$" height="$size$" viewBox="0 0 10 10" opacity="$opacity$">
		  <polygon points="0,10 10,0" stroke="$color$" fill="$color$" />
		  <polygon points="4,10 10,4" stroke="$color$" fill="$color$" />
		  <polygon points="8,10 10,8" stroke="$color$" fill="$color$" />
		</svg>
	</TEMPLATE>
	
	<TEMPLATE id="SVG_ICON_CHECKBOX" size="16" color='#777777' opacity='1'>
		<svg width="$size$" height="$size$" opacity="$opacity$" viewBox="0 0 512 512"><path stroke="$color$" fill="$color$" d="M400 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V80c0-26.51-21.49-48-48-48zm0 400H48V80h352v352zm-35.864-241.724L191.547 361.48c-4.705 4.667-12.303 4.637-16.97-.068l-90.781-91.516c-4.667-4.705-4.637-12.303.069-16.971l22.719-22.536c4.705-4.667 12.303-4.637 16.97.069l59.792 60.277 141.352-140.216c4.705-4.667 12.303-4.637 16.97.068l22.536 22.718c4.667 4.706 4.637 12.304-.068 16.971z"/></svg>
	</TEMPLATE>

	<TEMPLATE id="SVG_ICON_CHECKBOX_EMPTY" size="16" color='#777777' opacity='1'>
		<svg width="$size$" height="$size$" opacity="$opacity$" viewBox="0 0 512 512"><path stroke="$color$" fill="$color$" d="M400 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V80c0-26.51-21.49-48-48-48zm0 400H48V80h352v352z"/></svg>
	</TEMPLATE>

	<TEMPLATE id="LM_CHECKBOX" param_id="" hint="" text="" size="16" color="#777777" opacity="1">
		<LV id="ELMID" value="checkbox_$LMPR$_$LMID$" /><VAR id="LMID" formula="$LMID$ + 1" />
		<LS>
			<ROW>
				<LAYER_STACK>
					<CELL id='$ELMID$_on'><SVG_ICON_CHECKBOX size="$size$" color="$color$" opacity="$opacity$" /></CELL>
					<CELL id='$ELMID$_off'><SVG_ICON_CHECKBOX_EMPTY size="$size$" color="$color$" opacity="$opacity$" /></CELL>
					<PARAM_LINK from='$param_id$' to="$ELMID$_on.display" />
					<PARAM_LINK from='$param_id$' to="$ELMID$_off.display" formula="x==0"/>
				</LAYER_STACK>
				<R index_list="$text$">
					<CELL width='2' />
					<TEXT value="$text$"></TEXT>
				</R>
			</ROW>
			<IPB param_id="$param_id$"><TOOLTIP text='$hint$' /></IPB>
		</LS>
	</TEMPLATE>

	<TEMPLATE id="SVG_ICON_PLUS" color="#777777" size="14" opacity="0.9" vo="0" ho="0" >
	  <svg v_offset="$vo$" h_offset="$ho$" width="$size$" height="$size$" viewBox="0 0 512 512" opacity="$opacity$"><path stroke="$color$" fill="$color$" d="M352 240v32c0 6.6-5.4 12-12 12h-88v88c0 6.6-5.4 12-12 12h-32c-6.6 0-12-5.4-12-12v-88h-88c-6.6 0-12-5.4-12-12v-32c0-6.6 5.4-12 12-12h88v-88c0-6.6 5.4-12 12-12h32c6.6 0 12 5.4 12 12v88h88c6.6 0 12 5.4 12 12zm96-160v352c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V80c0-26.5 21.5-48 48-48h352c26.5 0 48 21.5 48 48zm-48 346V86c0-3.3-2.7-6-6-6H54c-3.3 0-6 2.7-6 6v340c0 3.3 2.7 6 6 6h340c3.3 0 6-2.7 6-6z"/></svg>
	</TEMPLATE>

	<TEMPLATE id="SVG_ICON_MINUS" color="#777777" size="14" opacity="0.9" vo="0" ho="0" >
	  <svg v_offset="$vo$" h_offset="$ho$" width="$size$" height="$size$" viewBox="0 0 512 512" opacity="$opacity$"><path stroke="$color$" fill="$color$" d="M108 284c-6.6 0-12-5.4-12-12v-32c0-6.6 5.4-12 12-12h232c6.6 0 12 5.4 12 12v32c0 6.6-5.4 12-12 12H108zM448 80v352c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V80c0-26.5 21.5-48 48-48h352c26.5 0 48 21.5 48 48zm-48 346V86c0-3.3-2.7-6-6-6H54c-3.3 0-6 2.7-6 6v340c0 3.3 2.7 6 6 6h340c3.3 0 6-2.7 6-6z" /></svg>
	</TEMPLATE>

	<!-- ###################################### -->
	<!-- END OF COMMON GRAPHICS AND TEMPLATES  -->
	<!-- ###################################### -->







<!-- <PARAM_TEXT param_id="$reload_script$" /> -->

	<!-- ###################################### -->
	<!-- CORE SKIN VARS, ACTIONS AND TRIGGERS  -->
	<!-- ###################################### -->

	<!-- is rewritten to "true" if settings editor is included -->
	<VAR id="SKIN_EDITABLE" value="false" />
	<FPARAM id="skin_kuiml_tool_enabled" formula="((skin_scanner_enabled > 0.5) or (controls_gen_enabled > 0.5))" type="boolean" />
	
	<!-- NO_EXPORT -->
	<!-- if we're in Plug-n-Script (not exported plugin) -->
	<IF condition="$SCRIPT_EDIT_MODE$">
			<SCRIPT script="bool lm_gui_first_opening = true; " />
						
			<!-- alias to script_status: RUNNING (0), WARNING (1), ERROR (2), STOPWATCH (3) -->
			<EPARAM id="LM_SCRIPT_STATUS" max="3" /><PARAM_LINK from="$script_status$" to="LM_SCRIPT_STATUS" />

			<!-- trigger to reload body on opening  -->
			<ACTION_TRIGGER event_id="window.loaded.value_changed" condition_formula="window.loaded==1" script="$reload_script$ = 0; if (lm_gui_first_opening) { reloadBody(); lm_gui_first_opening = false; } " requires="$reload_script$" async="true" />

			<!-- action to reload script -->
			<ACTION id="ReloadScript" type="Script" name="Reload script" script="$reload_script$ = abs($reload_script$ - 1); LM_SCRIPT_STATUS = 3; if (skin_kuiml_tool_enabled > 0.5) reloadBody();" />
			<!-- trigger reload on new script loaded (script changed) -->
			<ACTION_TRIGGER event_id="$script_file_path$.value_changed" action_id="ReloadScript" async="true" condition_formula="($script_file_path$.length > 0)*(skin_kuiml_tool_enabled &lt; 0.5)" />

			<!-- (re)load body content after .as script reloaded (still testing) -->
			<ACTION_TRIGGER event_id="LM_SCRIPT_STATUS.value_changed" condition_formula="(LM_SCRIPT_STATUS &lt; 3)" script="if ((!lm_gui_first_opening) and (skin_kuiml_tool_enabled &lt; 0.5)) reloadBody();" async="false" />

			<!-- action for full skin + script reloading -->
			<ACTION id="ReloadSkin" type="Script" name="Reload skin" script="$reload_script$ = 1; double zoom_delta = 0.0000000001; double gzd = gui.zoom-floor(gui.zoom); if ((gzd > 0) and (gzd &lt; 0.5)) { zoom_delta = -zoom_delta; } gui.zoom=gui.zoom+zoom_delta; " requires="gui.zoom;$reload_script$" exposed="true" />
	</IF>
	<!-- END_NO_EXPORT -->
	
	<!--
	<FORMULA_PARAM id="gzd" formula="gui.zoom-floor(gui.zoom)" />
	<PARAM_TEXT param_id="gzd" value_format="3.10" content="{value}" />
	<PARAM_TEXT_CONTROL param_id="gui.zoom" value_format="3.10" content="{value}" />
	-->
	
	<!-- if we're in exported plugin -->
	<IF condition="!$SCRIPT_EDIT_MODE$">
			<!-- NO_EXPORT_IF_STATIC -->
	    <!-- trigger to reload subgui on opening  -->
	    <ACTION_TRIGGER event_id="window.loaded.value_changed" condition_formula="window.loaded==1" script="reloadBody()" requires="" async="true" />
	    <!-- END_NO_EXPORT_IF_STATIC -->
	    <!-- in exported plugin there might be no easy way to reload script -->
	    <ACTION id="ReloadScript" type="Script" name="---" script="bool no_reload_possible = true;" requires="$reload_script$" />
	    <!-- action for full skin reloading -->
	    <ACTION id="ReloadSkin" type="Script" name="Reload skin" script="double zoom_delta = 0.0000000001; double gzd = gui.zoom-floor(gui.zoom); if ((gzd > 0) and (gzd &lt; 0.5)) { zoom_delta = -zoom_delta; } gui.zoom=gui.zoom+zoom_delta; " requires="gui.zoom" exposed="true" />
	</IF>

	<!-- trigger to reload GUI back to previous zoom level on skin reload -->
	<!--
	<ACTION_TRIGGER event_id="window.loaded.value_changed" condition_formula="(gui.zoom-floor(gui.zoom)>0.5)" script="gui.zoom=gui.zoom+0.5; " requires="gui.zoom"/>
	-->

	<!-- ==================== -->
	<!-- MISC SKIN PARTS -->
	<!-- ==================== -->

	<!-- ###################################### -->
	<!-- TOOLBAR ELEMENTS  -->
	<!-- ###################################### -->
	
	<!-- add version info to plugin title (for exported plugins) -->
	<LV id="LM_plugin_version_fmt_val" value="" />
	<IF_EXPORTED>
		<R index_list="$PLUGIN_VERSION$">
			<LV id="LM_plugin_version_fmt_val" value=" $PLUGIN_VERSION$" />
		</R>
	</IF_EXPORTED>
	<IF_NOT_EXPORTED>
		<LV id="LM_plugin_version_fmt_val" value="" />
	</IF_NOT_EXPORTED>
	<STRING id="LM_plugin_version_fmt" default="$LM_plugin_version_fmt_val$" />

	<STRING id="script_name_short" default="No Script"/>
	<IF condition="$SCRIPT_EDIT_MODE$">
	  <ACTION id="ShowDefaultScriptsMenu" type="DisplayPlugNScriptMenu" script_file_name_string_id="script_name_short" name="Select script" />
	  <ACTION id="OpenScriptFile" type="Script" script="
		string s = $script_file_path$; 
		string ext = (s.substr(s.length-3)); 
		/* for binary sources open .cpp */
		if ((ext ==&quot;x64&quot;) or (ext ==&quot;x86&quot;) or (ext ==&quot;bin&quot;)) { 
			s = s.substr(0, s.length-3);
			s += &quot;cpp&quot;;
		} 
		script_file_to_edit = s; 
		OpenScriptFile_();"
		name="Edit .cxx file" requires="OpenScriptFile_" />
	</IF>
	<IF condition="!$SCRIPT_EDIT_MODE$">
	  <ACTION id="ShowDefaultScriptsMenu" type="DisplayMessageBox" 
	    title="Action missing"  message="This action is unavailable now." style="info" name="Action Unavailable" />
	   <ACTION id="OpenScriptFile" type="DisplayMessageBox" 
	    title="Action missing"  message="This action is unavailable now." style="info" name="Action Unavailable" />
	</IF>
	<ESTRING id="some_url" default="https://google.com/" />
	<ACTION type="OpenUrl" id="openSomeUrl" url_string_id="some_url" name="Open url or file" />

	<!-- actions for menus -->
	<!-- for windows explorer we have to change / to \ -->
	<STRING id="MainSkinFilenamePrep" default="$SKIN_FILE$" />
	<STRING id="CommonFilenamePrep" default="$_FILE_$" />

	<IF_WINDOWS>
		<ONLOAD requires="MainSkinFilename;MainSkinFilenamePrep;CommonFilenamePrep" script="
			array&lt;string> ars = (MainSkinFilenamePrep+&quot;&quot;).split(&quot;/&quot;); 
			MainSkinFilenamePrep = join(ars, &quot;\\&quot;); 
			ars = (CommonFilenamePrep+&quot;&quot;).split(&quot;/&quot;); 
			CommonFilenamePrep = join(ars, &quot;\\&quot;); 
		" />
	</IF_WINDOWS>
	<ACTION id="OpenSkinFile" type="OpenUrl" url_string_id="MainSkinFilenamePrep" application_string_id="edit_kuiml_app" name="Edit .xml file" />
	<ACTION id="OpenSkinDir" type="OpenUrl" url_string_id="MainSkinFilenamePrep" application="$FILE_EXPLORER_APP$" name="Open skin folder" exposed="true" />

	<ACTION id="OpenLMDir" type="OpenUrl" url_string_id="CommonFilenamePrep" application="$FILE_EXPLORER_APP$" name="Open LM folder" exposed="true" />

	<ACTION id="OpenSkinDirWrap" name="Open skin folder" type="Script" script="if (Kt::Keyboard::IsShiftKeyDown() || Kt::Keyboard::IsCtrlKeyDown()) {
			OpenLMDir();
		} else {
			OpenSkinDir();
		}" />
	
	<ESTRING id="script_file_to_edit" />
	<ACTION id="OpenScriptFile_" type="OpenUrl" url_string_id="script_file_to_edit" application_string_id="edit_script_app" name="Edit .cxx file" />

	<ACTION id="OpenKUIMLFile" type="OpenUrl" url_string_id="$script_gui_path$" application_string_id="edit_kuiml_app" name="Edit .kuiml file" />
	<ACTION id="OpenScriptDirectory" type="OpenUrl" url_string_id="$script_file_path$" application="$FILE_EXPLORER_APP$" name="Open script folder"/>
	<ACTION id="OpenScriptDoc" type="OpenUrl" url_string_id="$script_doc_path$" name="Open script manual" />
	
	<ACTION id="OpenInfo" type="Script" script="string s = a_toolbar_infolink; 
	  if (s == &quot;&quot;) { 
	    DisplayAbout();
	  } else if ((s.findFirstOf(&quot;http://&quot;) == 0) or (s.findFirstOf(&quot;https://&quot;) == 0)) {
	    some_url = s;
	    openSomeUrl();
	  } else {
	    some_url = &quot;&quot;&quot;$SKINS_DIR$&quot;&quot;&quot;+a_toolbar_infolink;
	    openSomeUrl();
	  }" name="Open plugin info" />
	<ACTION id="ToggleControlsSettings" type="Script" script="theme.show_settings = abs(theme.show_settings - 1);" name="Toggle controls settings" />

	<ACTION type="DisplayMessageBox" 
	    id="CustomMenuUnavailable"
	    title="Custom menu missing" 
	    message="Create custom menu and assign it like this:&#10;@a_custom_menu = [your_menu_name].Popup;" 
	    style="info" 
	    timeout="-1" 
	    name="Custom Menu Unavailable Message Box"
	/>
	<ACTION type="DisplayMessageBox" 
	    id="ActionUnavailable"
	    title="Action missing" 
	    message="This action is unavailable now." 
	    style="info" 
	    timeout="-1" 
	    name="Action Unavailable Message Box"
	/>
	<!-- NO_EXPORT -->
	<ACTION type="Script" 
	    id="IgnoreCustomKUIML"
	    script = "a_ignore_custom_kuiml=abs(1-a_ignore_custom_kuiml); reloadBody();"
	    name="Ignore .kuiml (use auto-layout)"
	    enabled="true"
	/>
	<ACTION type="Script" 
	    id="AutoReloadScript"
	    script = "auto_reload_script=abs(1-auto_reload_script);"
	    name="Auto-reload script"
	    enabled="true"
	/>

	<FPARAM id="IgnoreCustomKUIML_enabled" formula="a_custom_kuiml_available*(skin_scanner_enabled &lt; 0.5)*(controls_gen_enabled &lt; 0.5)" />
	<PARAM_LINK from="IgnoreCustomKUIML_enabled" to="IgnoreCustomKUIML.enabled" />
	<!-- END_NO_EXPORT -->

	<EXPOSED_OBJECTS object_ids="ActionUnavailable" />
	<ACT id="toggle_bypass" script="$bypass$ = abs($bypass$-1)" />

	<!-- this menu is used only if toolbar (and so toolbar menu) is not included -->
	<POPUP_MENU id="menu_lm_core">
	  <MENU_ITEM action_id="OpenMenuOriginal" />
		
		<!-- NO_EXPORT -->
	  <IF_NOT_EXPORTED>
		  <MENU_SEPARATOR />
		  <MENU_ITEM action_id="AutoReloadScript" checked_param_id="auto_reload_script" />
		  <MENU_SEPARATOR />
		  <MENU_ITEM action_id="IgnoreCustomKUIML" checked_param_id="a_ignore_custom_kuiml_checkbox" />
		  <MENU_ITEM action_id="ReloadScript" />
		  <MENU_ITEM action_id="OpenScriptFile" />
		  <MENU_ITEM action_id="OpenKUIMLFile" />
		  <MENU_ITEM action_id="OpenScriptDirectory" />
		  <MENU_SEPARATOR />
		  <MENU_ITEM action_id="ReloadSkin" />
		  <MENU_ITEM action_id="OpenSkinFile" />
		  <MENU_ITEM action_id="OpenSkinDirWrap" />
		  <MENU_SEPARATOR />
				
			<ACTION id="ShowSkinScannerPlaceholder" type="Script" name="Show skin scanner" script="a_show_skin_scanner()" />
		  <ACTION id="ShowControlsGenPlaceholder" type="Script" name="Show controls generator" script="a_show_controls_gen()" />
		  <ACTION id="OpenGlobalPrefsPlaceholder" type="Script" name="Global preferences" script="a_show_global_prefs()" />
		  <ACTION id="OpenSettingsPlaceholder" type="Script" name="Open settings" script="a_open_settings()" />
		  <ACTION id="OpenExportPlaceholder" type="Script" name="Export plugin" script="a_open_export()" />
			<ACTION id="OpenAboutLMSkinPlaceholder" type="Script" name="About LM Skin" script="a_open_about_lmskin()" />	

			<MENU_ITEM action_id="ShowSkinScannerPlaceholder" checked_param_id="skin_scanner_enabled" />
			<MENU_ITEM action_id="ShowControlsGenPlaceholder" checked_param_id="controls_gen_enabled" />
			<MENU_ITEM action_id="OpenGlobalPrefsPlaceholder" />
		  <MENU_ITEM action_id="OpenSettingsPlaceholder" />
			
			<MENU_SEPARATOR />

			<MENU_ITEM action_id="OpenExportPlaceholder" />
		  <MENU_ITEM action_id="OpenLogFile" />

		  <MENU_SEPARATOR />

		  <MENU_ITEM action_id="OpenAboutLMSkinPlaceholder" />
		</IF_NOT_EXPORTED>
		<!-- END_NO_EXPORT -->

		<IF_EXPORTED>

		  <MENU_SEPARATOR />
		  <MENU_ITEM action_id="ReloadSkin" />
		  <MENU_ITEM action_id="OpenSkinFile" />
		  <MENU_ITEM action_id="OpenSkinDirWrap" />
		  <MENU_SEPARATOR />
			<MENU_ITEM action_id="OpenLogFile" />
		</IF_EXPORTED>
	  

	</POPUP_MENU>
	
	<!-- flag to check if skin settings were included -->
	<VAR id="SKIN_SETTINGS_INCLUDED" value="0" />
	<VAR id="SKIN_SKANNER_INCLUDED" value="0" />
	<VAR id="CONTROLS_GEN_INCLUDED" value="0" />
	<VAR id="GLOBAL_PREFS_INCLUDED" value="0" />
	<VAR id="ABOUT_LMSKIN_INCLUDED" value="0" />
	<VAR id="EXPORT_INCLUDED" value="0" />


	<EXPOSED_OBJECTS object_ids="menu_lm_core.*;menu_lm_custom.*;" />
	<ACT id="OpenMenuLM" name="Open Extended Menu" script="a_lm_menu()" />
	<ACT id="OpenMenuOriginal" name="Main menu" script="OpenMenu()" />
	<ONLOAD script="@a_lm_menu = menu_lm_core.Popup; 
		@a_open_settings = ActionUnavailable;
		@a_show_skin_scanner = ActionUnavailable;
		@a_show_controls_gen = ActionUnavailable;
		@a_show_global_prefs = ActionUnavailable;
		@a_open_export = ActionUnavailable;
		@a_open_about_lmskin = ActionUnavailable;
		" />

	<EXPOSED_OBJECTS object_ids="CustomMenuUnavailable" />
	<ACT id="OpenCustomMenu" name="Open Extended Menu" script="a_custom_menu()" />
	<ONLOAD script="@a_custom_menu = CustomMenuUnavailable;" />

	<!-- ///////////////////// -->
	<!--        METERS         -->
	<!-- ///////////////////// -->

	<!-- create an element for meters box background -->
	<TEMPLATE id="LM_METERS_BOX" data="$METERS_BOX$">
	  <LM_BOX_RAW data="$data$" expand_invert="$METERS_ARE_HORIZONTAL$" />
	</TEMPLATE>

	<!-- ///////////////////// -->
	<!--      DECORATIONS      -->
	<!-- ///////////////////// -->

	<TEMPLATE id="LM_TOOLBAR_DECOR" toolbar="" opacity="1">
	  <!-- show only if decor globally enabled -->
	  <VAR id="_DECOR_DISPLAY" value="$DECOR_DISPLAY$" />
	  <R count="($SKIN_EDITABLE$)*1"><VAR id="_DECOR_DISPLAY" value="1" /></R>
	  <WIDGET id="toolbar_decor" width="100%" height="100%" opacity="$opacity$">
	    <LAYER_STACK width="100%" height="100%">
	      <R count="($_DECOR_DISPLAY$ != 0)" index_name="__dr100">
	        <LM_DECOR group="$toolbar$" />
	      </R>
	    </LAYER_STACK>
	  </WIDGET>
	  <R count="($SKIN_EDITABLE$)*1"><PARAM_LINK from="a_decor_display" to="toolbar_decor.display" /></R>
	</TEMPLATE>

	<TEMPLATE id="LM_BODY_DECOR" body1="" body2="" body3="" body4="" opacity="1">
	  <!-- show only if decor globally enabled -->
	  <VAR id="_DECOR_DISPLAY" value="$DECOR_DISPLAY$" />
	  <R count="($SKIN_EDITABLE$)*1">
	    <VAR id="_DECOR_DISPLAY" value="1" />
	  </R>
	  <WIDGET id="body_decor" width="100%" height="100%" opacity="$opacity$">
	    <LAYER_STACK width="100%" height="100%">
	      <R count="($_DECOR_DISPLAY$ != 0)" index_name="__dr101">
	        <LM_DECOR group="$body1$" />
	        <LM_DECOR group="$body2$" />
	        <LM_DECOR group="$body3$" />
	        <LM_DECOR group="$body4$" />
	      </R>
	    </LAYER_STACK>
	  </WIDGET>
	  <R count="($SKIN_EDITABLE$)*1">
	    <PARAM_LINK from="a_decor_display" to="body_decor.display" />
	  </R>
	</TEMPLATE>

	<TEMPLATE id="LM_STATUS_DECOR" status="" opacity="1">
	  <!-- show only if decor globally enabled -->
	  <VAR id="_DECOR_DISPLAY" value="$DECOR_DISPLAY$" />
	  <R count="($SKIN_EDITABLE$)*1"><VAR id="_DECOR_DISPLAY" value="1" /></R>
	  <WIDGET id="status_decor" width="100%" height="100%" opacity="$opacity$">
	    <LAYER_STACK width="100%" height="100%">
	      <R count="($_DECOR_DISPLAY$ != 0)" index_name="__dr102">
	        <LM_DECOR group="$status$" />
	      </R>
	    </LAYER_STACK>
	  </WIDGET>
	  <R count="($SKIN_EDITABLE$)*1"><PARAM_LINK from="a_decor_display" to="status_decor.display" /></R>
	</TEMPLATE>

	<!-- unparse and display decoration group -->
	<TEMPLATE id="LM_DECOR" group="" opacity="1">
	  
	  <LV id="N1" value="0" /><LV id="N2" value="0" />
	  <VAR id="V01" value="0" />
	  <ROW reflow="true" width="300">
	    <REPEAT index_list="$group$">
	      <VAR id="V$N1$$N2$" value="$index$" />
	      <LV id="N2" formula="$N2$+1" />
	      <LV id="N1" formula="($N2$ > 14)*($N1$+1) + ($N2$ &lt; 15)*($N1$)" />
	      <LV id="N2" formula="($N2$ > 14)*(0) + ($N2$ &lt; 15)*($N2$)" />
	    </REPEAT>
	  </ROW>

	  <!-- unparse: V00-V014- group settings; V10-V114, V20-V214, etc - image settings
	  [GROUP]
	  Name;Display;Opacity;Width;Height;H-Pad;V-Pad;H-Offset;V-Offset;Group-Image-Scaling;Alignment;;;;;
	  [IMAGE]
	  Filename;Display;Opacity;Width;Height;H-Pad;V-Pad;H-Offset;V-Offset;Image-Scaling;Alignment;Mode (Normal/Stretch/Repeat);;;;
	  -->
	  
	  <!-- display group if not empty and enabled -->
	  <REPEAT count="($N1$>1)*$V01$" index_name="_dummyif1">
	    <LV id="GROP" formula="$opacity$ * $V02$" /> <!-- opacity group * template -->
	    <LV id="GHA" value="center" />
	    <LV id="GVA" value="center" />
	    <R count="($V010$>=1)*($V010$&lt;=3)"><LV id="GVA" value="top" /></R>
	    <R count="($V010$>=5)*($V010$&lt;=7)"><LV id="GVA" value="bottom" /></R>
	    <R count="($V010$==1)+($V010$==7)+($V010$==8)"><LV id="GHA" value="left" /></R>
	    <R count="($V010$>=3)*($V010$&lt;=5)"><LV id="GHA" value="right" /></R>
	    
	    <WIDGET opacity="$GROP$" width="$V03$" height="$V04$" h_margin="$V05$" v_margin="$V06$" h_offset="$V07$" v_offset="$V08$" v_align="$GVA$" h_align="$GHA$" >
	      <LAYER_STACK width="100%" height="100%">
	        <REPEAT count="($N1$-1)" start="1" index_name="I">
	          <REPEAT count="($V$I$1$>0)" index_name="_dummyimen1">

	            <LV id="IA" value="$V$I$10$" /> <!-- alignment code 0 to 8 -->
	            <LV id="IVA" value="center" />
	            <LV id="IHA" value="center" />
	            <LV id="IMS" formula="$V$I$9$*$V09$" /> <!-- image scaling + group scaling -->
	            <LV id="IM" value="$V$I$11$" /> <!-- image mode: 0, 1- stretch, 2 - repeat -->
	            <LV id="ISTR" value="" />
	            <LV id="IREP" value="" />
	            <R count="($IA$>=1)*($IA$&lt;=3)"><LV id="IVA" value="top" /></R>
	            <R count="($IA$>=5)*($IA$&lt;=7)"><LV id="IVA" value="bottom" /></R>
	            <R count="($IA$==1)+($IA$==7)+($IA$==8)"><LV id="IHA" value="left" /></R>
	            <R count="($IA$>=3)*($IA$&lt;=5)"><LV id="IHA" value="right" /></R>
	            <R count="($IM$==1)"><LV id="ISTR" value="true" /></R>
	            <R count="($IM$==2)"><LV id="IREP" value="true" /></R>
	            
	            <LS width="100%" height="100%" h_margin="$V$I$5$" v_margin="$V$I$6$">
	              <IMAGE image="$LM_DIR$$DECOR_SUBDIR$/$V$I$0$" opacity="$V$I$2$" width="$V$I$3$" height="$V$I$4$" h_offset="$V$I$7$" v_offset="$V$I$8$" image_scaling="$IMS$" stretch="$ISTR$" repeat="$IREP$" v_align="$IVA$" h_align="$IHA$" />
	            </LS>
	          </REPEAT>
	        </REPEAT>
	      </LAYER_STACK>
	    </WIDGET>
	  </REPEAT>
	</TEMPLATE>


	<!-- ELEMENTS TO MAKE PARTS OF SKIN INDEPENDENT -->
	<PARAM id="instant_link_enabled" type="boolean" default="false" exposed="true" />

	<ESTRING id="a_font_names" default="$FONT_NAMES_COMMON$" />
	<EPARAM id="a_font_names_count" min="0" max="250" default="0" />

	<EPARAM id="a_toolbar_display" min="0" max="1" default="1" />
	<EPARAM id="a_toolbar_invalidate" min="0" max="1000000000" default="0" />
	<STRING id="a_toolbar_bg_innerKUIML" default="&lt;SKIN width='100%' height='100%'>&lt;/SKIN>" />
	<EPARAM id="a_toolbar_area_min_height" max="1000" default="23" />
	<EPARAM id="a_toolbar_v_offset" min="-100" max="100" default="0" />
	<EPARAM id="a_toolbar_pad_h" max="100" default="0" />
	<EPARAM id="a_toolbar_pad_v" max="100" default="0" />
	<ESTRING id="a_toolbar_innerKUIML" default="&lt;SKIN> &lt;/SKIN>" />
	<ESTRING id="a_toolbar_infolink" default="http://www.bluecataudio.com/" />
	<ESTRING id="a_toolbar_items_left" default="MENU;ZOOM" />
	<ESTRING id="a_toolbar_items_center" default="TITLE;PRESETS" />
	<ESTRING id="a_toolbar_items_right" default="UNDO;REDO;INFO;PRESETMENU;SCRIPTMENU;SKINMENU" />
	<ESTRING id="a_toolbar_max_in_row" default="10;2;10" />
	<ESTRING id="a_toolbar_icons" default="18;#333333;1;8;4;0" />
	<ESTRING id="a_toolbar_title" default="500;10;0;0;0;1;;; ;Arial;+2;bold;-;#000000" />
	<ESTRING id="a_toolbar_title_text" default="" />
	<ESTRING id="a_toolbar_title_fixed_text" default="" />
	<IF_NOT_EXPORTED>
		<!-- add text to title for Skin scanner, etc -->
		<STRING id="str_skin_scanner_enabled" default=" | Skin scanner" />
		<STRING id="str_controls_gen_enabled" default=" | Controls generator" />
		<STRING id="str_toolbar_title_after" default="" />
			<STRING_LINK id="slink_title_no_addon" from="str_empty" to="str_toolbar_title_after" enabled="true" />
			<STRING_LINK id="slink_title_addon_ss" from="str_skin_scanner_enabled" to="str_toolbar_title_after" enabled="false" />
			<STRING_LINK id="slink_title_addon_cg" from="str_controls_gen_enabled" to="str_toolbar_title_after" enabled="false" />
		<FORMULA_PARAM id="fp_show_default_title" formula="(skin_scanner_enabled &lt; 0.5)*(controls_gen_enabled &lt; 0.5)" />
		<PARAM_LINK from="skin_scanner_enabled" to="slink_title_addon_ss.enabled" />
		<PARAM_LINK from="controls_gen_enabled" to="slink_title_addon_cg.enabled" />
		<PARAM_LINK from="fp_show_default_title" to="slink_title_no_addon.enabled" />

		<STRING_MULTI_LINK from="$script_name_string$;str_toolbar_title_after" to="a_toolbar_title_text" />
	</IF_NOT_EXPORTED>
	<IF_EXPORTED>
		<STRING_LINK from="$script_name_string$" to="a_toolbar_title_text" />
	</IF_EXPORTED>



	<ESTRING id="a_toolbar_presets" default="130;20;3;3;0;0;0; ;14;#FFFFFF;0.8;-3;1 ;;;;;;;; ;Arial;-2;-;-;#FFFFFF;;0;;;0;1;-2;1;0;7;;;;;#333333;0;31.67;#9F9F9F;0.28;65;#FFFFFF;0.45;0" />

	<STRING id="a_toolbar_font_size" default="+1" />
	<STRING id="a_toolbar_text_color" default="" />
	<EPARAM id="a_toolbar_icons_size" min="0" max="48" default="16" />
	<ESTRING id="a_toolbar_icons_color" default="" />
	<EPARAM id="a_toolbar_icons_opacity" default="1" />
	<ESTRING id="a_toolbar_font_size2" default="-2" />
	<ESTRING id="a_toolbar_text_color2" default="" />
	<EPARAM id="a_toolbar_icons_size2" max="48" default="14" />
	<ESTRING id="a_toolbar_icons_color2" default="" />
	<EPARAM id="a_toolbar_icons_opacity2" default="1" />
	<EPARAM id="a_toolbar_inner_pad_h" max="100" default="0" />
	<EPARAM id="a_toolbar_inner_pad_v" max="100" default="0" />

	<STRING id="a_body_innerKUIML" default="&lt;SKIN width='100%' height='100%'>&lt;/SKIN>" />
	<ESTRING id="a_body_auto_layout" />
	<ESTRING id="a_body_auto_layout_theme" />

	<!-- params to calculate number of auto-layout controls -->
	<!--
	<EPARAM id="AL_switches_count" max="100" />
	<EPARAM id="AL_inputs_count" max="100" />
	<EPARAM id="AL_outputs_count" max="100" />
	-->

	<STRING id="a_body_bg_innerKUIML" default="&lt;SKIN width='100%' height='100%'>&lt;/SKIN>" />
	<EPARAM id="a_custom_kuiml_available" default="0" />
	<IF_NOT_EXPORTED>
		<EPARAM id="a_ignore_custom_kuiml" max="1" default="0" persistent="true" />
	</IF_NOT_EXPORTED>
	<IF_EXPORTED>
		<EPARAM id="a_ignore_custom_kuiml" max="1" default="0" />
	</IF_EXPORTED>
	<FPARAM id="a_ignore_custom_kuiml_checkbox" formula="a_custom_kuiml_available*a_ignore_custom_kuiml" />
	<EPARAM id="a_body_v_align" max="2" default="0" />
	<EPARAM id="a_body_pad_h" max="100" default="100" />
	<EPARAM id="a_body_pad_v" max="100" default="100" />
	<EPARAM id="a_body_min_w" max="1920" default="300" />
	<EPARAM id="a_body_min_h" max="1080" default="100" />
	<STRING id="a_body_font" default="+0" />

	<EPARAM id="a_meters_display" max="3" default="3" />
	<EPARAM id="a_meters_input_channels" max="10" default="8" />
	<EPARAM id="a_meters_output_channels" max="10" default="8" />

	<EPARAM id="a_meters_placement" max="1" default="0" />
	<EPARAM id="a_meters_min_width" min="1" max="250" default="16" />
	<EPARAM id="a_meters_min_width_single" min="1" max="50" default="8" />
	<EPARAM id="a_meters_pad_v" max="100" default="0" />
	<EPARAM id="a_meters_pad_h" max="100" default="0" />
	<EPARAM id="a_meters_v_offset" min="-100" max="100" default="0" />
	<EPARAM id="a_meters_box_pad_a" max="100" default="0" />
	<EPARAM id="a_meters_box_pad_b" max="100" default="0" />
	<EPARAM id="a_meters_box_offset" min="-100" max="100" default="0" />
	<EPARAM id="a_meters_box_spacing" min="0" max="20" default="0" />

	<EPARAM id="a_meters_group_spacing" max="100" default="0" />
	<EPARAM id="a_meters_group_input" max="8" default="0" />
	<EPARAM id="a_meters_group_output" max="8" default="0" />

	<EPARAM id="a_meters_invalidate" min="0" max="10000000000" default="0" />
	<ESTRING id="a_meters_box_widget_innerKUIML" default="&lt;SKIN width='100%' height='100%'>&lt;COMMON_SCRIPTS cnvn='4900' cnvp='MBW' />&lt;/SKIN>" />

	<EPARAM id="a_status_invalidate" min="0" max="1000000" default="0" />
	<EPARAM id="a_status_display" min="0" max="2" default="1" />
	<PARAM id="_a_log_unusual_text" type="boolean" default="false" exposed="true" />
	<PARAM id="_a_do_show_status_area" type="boolean" default="false" exposed="true" />
	<EPARAM id="a_status_area_min_height" max="100" default="22" />
	<STRING id="a_status_bg_innerKUIML" default="&lt;SKIN width='100%' height='100%'>&lt;/SKIN>" />
	<EPARAM id="a_status_v_offset" min="-100" max="100" default="0" />
	<EPARAM id="a_status_pad_h" max="100" default="0" />
	<ESTRING id="a_status_content_params" default=";0;-;-;#FFFFFF;;5" />
	<ESTRING id="a_status_layout_params" default="0;0;135;1;150" />
	
	<ESTRING id="a_status_flex_cells" default="1;0;0" />
	<ESTRING id="a_status_logline_innerKUIML" />
	<ESTRING id="a_status_innerKUIML" default="&lt;SKIN> &lt;/SKIN>" />
	<ESTRING id="a_status_items_left" default="LOG_LINE" />
	<ESTRING id="a_status_items_center" default="" />
	<ESTRING id="a_status_items_right" default="" />
	<ESTRING id="status_custom_text" default="" />
	<ESTRING id="status_custom_text_prev" default="" />
	<REQUIRED_OBJECTS object_ids="status_custom_text;status_custom_text_prev" />
	<ACTION id="OpenLogFile" type="OpenUrl" url_string_id="$log_file_path$"  application_string_id="open_log_app" name="Open log file" />

	<EPARAM id="a_decor_display" default="1" />
	
	<ESTRING id="kuiml_log" default="" />
	<REQUIRED_OBJECTS object_ids="kuiml_log.*" />

	<ESTRING id="a_lm_lic" default="" />
	<REQUIRED_OBJECTS object_ids="a_lm_lic.*" />

	<EPARAM id="skin_scanner_enabled" default="0" />
	<EPARAM id="skin_scanner_init_times" default="0" />
	<ESTRING id="SKIN_SCANNER" default="" />
	<ESTRING id="SKIN_SCANNER_MODE" default="menu::Knobs" />
	<EPARAM id="controls_gen_enabled" default="0" />
	<ESTRING id="CONTROLS_GEN_DRAFT" default="" />
	<ESTRING id="CONTROLS_GEN_PARAMS" default="" />
	<IF_NOT_EXPORTED>
		<PERSISTENT_OBJECTS object_ids="skin_scanner_enabled;SKIN_SCANNER;SKIN_SCANNER_MODE;controls_gen_enabled;CONTROLS_GEN_DRAFT;CONTROLS_GEN_PARAMS" />
	</IF_NOT_EXPORTED>
	<EPARAM id="script_kuiml_loaded_ok" max="100000" />
	
	<!-- NO_EXPORT -->
	<!-- include skin scanner common script -->
	<TEMPLATE id="INCLUDE_SKIN_SCANNER_COMMON_SCRIPT" force_include="0">
			<SCRIPT src="$LM_DIR$$EDITORS_SUBDIR$/skin_scanner/ss_common.as" preprocess="true" requires="a_lm_lic" />
			<ONLOAD script="@a_lm_lic_string = a_lm_lic;" />
	</TEMPLATE>
	<!-- include skin scanner common script once -->
	<VAR id="SKIN_SCANNER_INCLUDED" value="0" />
	<TEMPLATE id="INCLUDE_ONCE_SKIN_SCANNER_COMMON_SCRIPT" force_include="0">
		<R count="($SKIN_SCANNER_INCLUDED$ != 1)">
			<INCLUDE_SKIN_SCANNER_COMMON_SCRIPT />
			<VAR id="SKIN_SCANNER_INCLUDED" value="1" />
		</R>
	</TEMPLATE>

	<EPARAM id="show_skin_settings_window" />

	<!-- auto-reload scripts feature -->
	<EPARAM id="auto_reload_script" persistent="true" />
	<IF_NOT_EXPORTED>
		<TIMER refresh_time_ms="500" id="auto_reload_timer" />
		<ACTION_TRIGGER event_id="auto_reload_timer.elapsed" script="autoReload_onTimer(); " requires="auto_reload_timer.*" />
		<PARAM_LINK from="auto_reload_script" to="auto_reload_timer.enabled" />
	</IF_NOT_EXPORTED>
	<!-- END_NO_EXPORT -->
	
	<!-- status animation timer and routine -->
	<TIMER refresh_time_ms="40" id="st_anim_timer" enabled="false" />
	<EPARAM id="a_status_custom_text_opacity" default="1" />
	<EPARAM id="st_anim_timer_passed" default="0" max="1000000" />
	<EPARAM id="st_anim_timer_end" default="0" max="1000000" />
	<EXPOSED_OBJECTS object_ids="st_anim_timer.enabled;a_status_custom_text_opacity" />
	<SCRIPT script="bool st_anim_timer_fadeout_started = false;" />
	<ACTION_TRIGGER event_id="st_anim_timer.elapsed" script="
		float interval = 40;
		if (st_anim_timer_passed == 0) { st_anim_timer_fadeout_started = false;	}
		st_anim_timer_passed = interval + st_anim_timer_passed;
		if ((a_status_custom_text_opacity &lt; 1) and (!st_anim_timer_fadeout_started)) {
			a_status_custom_text_opacity = a_status_custom_text_opacity + 0.3;
		}
		if ((!st_anim_timer_fadeout_started) and (st_anim_timer_passed >= (st_anim_timer_end - interval*5)) and (st_anim_timer_passed &lt; (0+st_anim_timer_end))) { 
			st_anim_timer_fadeout_started = true; 
		}
		if (st_anim_timer_fadeout_started) {
			a_status_custom_text_opacity = a_status_custom_text_opacity - 0.2;
		}
		if (st_anim_timer_passed >= (0+st_anim_timer_end)) {
			if (st_anim_timer_fadeout_started) {
				status(&quot;&quot; + status_custom_text_prev);
				status_custom_text_prev = &quot;&quot;;
			}
			st_anim_timer_fadeout_started = false;
			if (a_status_custom_text_opacity &lt; 1) {
				a_status_custom_text_opacity = a_status_custom_text_opacity + 0.3;
			} else {
				st_anim_timer.enabled = false;
			}
		}
		" requires="st_anim_timer.enabled;on_st_anim_timer" />
	

	<!-- ###################################### -->
	<!-- VARS TEMPLATES / DEFAULT VARS VALUES  -->
	<!-- ###################################### -->

	<TEMPLATE id="LOAD_FONTS" dir="$LM_DIR$$FONTS_SUBDIR$/" files="" ignore_missing="true">
	  <VAR id="LOAD_FONTS_DIR" value="$dir$" />
	  <VAR id="LOAD_FONTS_FILES" value="$files$" />
	  <REPEAT index_list="$LOAD_FONTS_FILES$">
	    <LOAD_FONT file="$LOAD_FONTS_DIR$$index$" ignore_missing="$ignore_missing$" />
	  </REPEAT>
	</TEMPLATE>

	<TEMPLATE id="VARS_TOOLBAR" display="1" min_height="25" pad_h="5" pad_v="0" v_offset="0" items_left="MAINMENU;ZOOM" items_center="TITLE" items_right="SCRIPTMENU;SKINMENU" max_in_row="5;1;3" bg="0;0.97;0;1;0;0;;;; ;#404040;1;33 ;#222222;1;100 ;#2C3A47;0.45;100 ;#1A1A1A;1;25" _auto_color="1;-30;0;-12;1;-38;1;0;1;0;1;0" icons="16;#FFFFFF;1;1;0;0" title="500;50;4;0;0;-1;1;; ;;+1;bold;-;#FFFFFF;" presets="130;20;3;3;0;0;0; ;14;#FFFFFF;0.8;-3;1 ;;;;;;;; ;Arial;-2;-;-;#FFFFFF;;0;;;0;1;-2;1;0;7; ;;;;#333333;0;31.67;#9F9F9F;0.28;65;#FFFFFF;0.45;0" title_text="" info_link="http://bluecataudio.com/" title_action_num="3" title_cus_action ="OpenMenu" title_cus_action_hint="Open menu" skinmenu_action="skin_menu.Popup" skinmenu_action_hint="Current script menu" mainmenu_action="OpenMenu" mainmenu_action_hint="Open menu" settings_action="" settings_action_hint="Settings" scriptmenu_action="ShowDefaultScriptsMenu" scriptmenu_action_hint="Select script" custom_items="" custom_items_names="">

	  <VAR id="TOOLBAR_DISPLAY" value="$display$" />
	  <VAR id="TOOLBAR_DISPLAY_BOOL" value="false" />
	  <IF condition="$display$"><VAR id="TOOLBAR_DISPLAY_BOOL" value="true" /></IF>
	  <VAR id="TOOLBAR_MIN_HEIGHT" value="$min_height$" />
	  <VAR id="TOOLBAR_PAD_H" value="$pad_h$" />
	  <VAR id="TOOLBAR_PAD_V" value="$pad_v$" />
	  <VAR id="TOOLBAR_V_OFFSET" value="$v_offset$" />
	  <VAR id="TOOLBAR_BG" value="$bg$" />
	  <VAR id="TOOLBAR_ITEMS_LEFT" value="$items_left$" />
	  <VAR id="TOOLBAR_ITEMS_CENTER" value="$items_center$" />
	  <VAR id="TOOLBAR_ITEMS_RIGHT" value="$items_right$" />
	  <VAR id="TOOLBAR_MAX_IN_ROW" value="$max_in_row$" />
	  <VAR id="TOOLBAR_ICONS" value="$icons$" />
	  <VAR id="TOOLBAR_TITLE" value="$title$" />
	  <VAR id="TOOLBAR_TITLE_TEXT" value="$title_text$" />
	  <VAR id="TOOLBAR_PRESETS" value="$presets$" />
	  <VAR id="TOOLBAR_INFO_LINK" value="$info_link$" />
	  <VAR id="TOOLBAR_INFO_LINK_HINT" value="Display 'About'" />
	  <REPEAT index_list="$TOOLBAR_INFO_LINK$">
	    <VAR id="TOOLBAR_INFO_LINK_HINT" value="$TOOLBAR_INFO_LINK$" />
	  </REPEAT>

	  <VAR id="TOOLBAR_CUSTOM_ITEMS" value="$custom_items$" />
	  <VAR id="TOOLBAR_CUSTOM_ITEMS_NAMES" value="$custom_items_names$" />

	  <VAR id="TOOLBAR_TITLE_ACTION_NUM" value="$title_action_num$" />

	  <VAR id="TOOLBAR_TITLE_CUS_ACTION" value="$title_cus_action$" />
	  <VAR id="TOOLBAR_TITLE_CUS_ACTION_HINT" value="$title_cus_action_hint$" />

	  <VAR id="TOOLBAR_SKINMENU_ACTION" value="$skinmenu_action$" />
	  <VAR id="TOOLBAR_SKINMENU_ACTION_HINT" value="$skinmenu_action_hint$" />

	  <VAR id="TOOLBAR_SCRIPTMENU_ACTION" value="$scriptmenu_action$" />
	  <VAR id="TOOLBAR_SCRIPTMENU_ACTION_HINT" value="$scriptmenu_action_hint$" />

	  <VAR id="TOOLBAR_MAINMENU_ACTION" value="$mainmenu_action$" />
	  <VAR id="TOOLBAR_MAINMENU_ACTION_HINT" value="$mainmenu_action_hint$" />

	  <VAR id="TOOLBAR_SETTINGS_ACTION" value="$settings_action$" />
	  <VAR id="TOOLBAR_SETTINGS_ACTION_HINT" value="$settings_action_hint$" />
	  <VAR id="TOOLBAR_SETTINGS_ACTION_IS_SET" value="0" />
	  <REPEAT index_list="$TOOLBAR_SETTINGS_ACTION$">
	    <VAR id="TOOLBAR_SETTINGS_ACTION_IS_SET" value="1" />
	  </REPEAT>

	</TEMPLATE>
	
	<!-- body shading params -->
	<EPARAM id="body_shading_changed" max="999999999" default="0" />
  <ESTRING id="body_shading_data" />
  <EXPOSED_OBJECTS object_ids="body_shading_changed.*;body_shading_data.*" />

	<TEMPLATE id="VARS_BODY" font="Arial;+0;-;-;#000000;" pad_h="10" pad_v="13" min_width="330" min_height="250" v_align="center" bg="0;1;-5;0;0;0;;;; ;#BBBBBB;1;28 ;#ACACAC;1;100 ;#F8F8F8;1;10 ;#676767;1;100" shading_data="0;0;0;-167;434;-167;0;33;0" _auto_color="1;-15;1;61;1;-84" static_file="" auto_layout="0;graphics_layout.kuiml;0;6;0" auto_layout_theme="101;142;10;10;;;#FFFFFF;0.4;#FFFFFF;0.2;3;5;3;10;15;35;;0;-3;;;;;;;;;;;;LMR_KNOB_BLACK_B;1;;;#DFDFDF;0.85;;;;;;;LMR_VSWITCH_SOLID;1;;;;;;;;;;;LMR_METER_LED;1;#49B1F4;;;;;;;;;;" include_lmr_scripts="0">
	  <VAR id="BODY_FONT" value="$font$" />
	  <VAR id="BODY_PAD_H" value="$pad_h$" />
	  <VAR id="BODY_PAD_V" value="$pad_v$" />
	  <VAR id="BODY_MIN_HEIGHT" value="$min_height$" />
	  <VAR id="BODY_MIN_WIDTH" value="$min_width$" />
	  <R count="($LM_SKIN_RESIZEABLE$ > 0)">
	  	<VAR id="BODY_MIN_HEIGHT" value="1" />
	  	<VAR id="BODY_MIN_WIDTH" value="1" />
	  </R>
	  <VAR id="BODY_V_ALIGN" value="$v_align$" />
	  <VAR id="BODY_BG" value="$bg$" />
	  <VAR id="BODY_SHADING_DATA" value="$shading_data$" />
	  <VAR id="BODY_STATIC_FILE" value="$static_file$" />
	  <VAR id="BODY_STATIC_FILE_SET" value="false" />
	  <REPEAT index_list="$static_file$">
	    <VAR id="BODY_STATIC_FILE_SET" value="true" />
	  </REPEAT>
	  <VAR id="BODY_INCLUDE_LMR_SCRIPTS" formula="($include_lmr_scripts$)" />
	  <VAR id="BODY_AUTO_LAYOUT" value="$auto_layout$" />
	  <VAR id="BODY_AUTO_LAYOUT_THEME" value="$auto_layout_theme$" />
	  <ONLOAD script="a_body_auto_layout = &quot;$BODY_AUTO_LAYOUT$&quot;;" />
	  <ONLOAD script="a_body_auto_layout_theme = &quot;$BODY_AUTO_LAYOUT_THEME$&quot;;" />
	</TEMPLATE>

	<TEMPLATE id="VARS_METERS" display="3" input_channels="2" output_channels="2" min_width="10" min_width_single="6" pad_h="10" pad_v="22" v_offset="0" grouping="2;2;2.8" placement="0" box_pos="3;5;0;0;0" box="1;0.75;15;0.8;0;7.2;;;;;#0B0B0B;1;0;#040404;1;100;#FFFFFF;1;0" orientation="0" render="1;-60;0;;;0.27;30;3;300;5;2.1;0;1.2;0;;0;0;0;0;;;;;;;;;;;;#EA2027;1;0;#E5AB2B;1;15;#2ECC71;1;30;#FFFFFF;1;50;#FFFFFF;0;50;#000000;0;0;" hide_inactive="1">
	  <VAR id="METERS_DISPLAY" value="$display$" />
	  <VAR id="METERS_DISPLAY_input" value="false" />
	  <VAR id="METERS_DISPLAY_output" value="false" />
	  <REPEAT count="($display$==1)+($display$==3)" index_name="__dummyl1_">
	    <VAR id="METERS_DISPLAY_input" value="true" />
	  </REPEAT>
	  <REPEAT count="($display$==2)+($display$==3)" index_name="__dummyl2_">
	    <VAR id="METERS_DISPLAY_output" value="true" />
	  </REPEAT>
	  <VAR id="METERS_INPUT_CHANNELS" value="$input_channels$" />
	  <VAR id="METERS_OUTPUT_CHANNELS" value="$output_channels$" />
	  <VAR id="METERS_input_CHANNELS" value="$input_channels$" />
	  <VAR id="METERS_output_CHANNELS" value="$output_channels$" />
	  <VAR id="METERS_ORIENTATION" value="$orientation$" />
	  <VAR id="METERS_ARE_HORIZONTAL" formula="($METERS_ORIENTATION$==1)+($METERS_ORIENTATION$==3)" />
	  <VAR id="METERS_PLACEMENT" formula="$placement$" />
	  <VAR id="METERS_PLACEMENT_LAYOUT" value="row" />
	  <REPEAT count="($METERS_ARE_HORIZONTAL$==1)*($METERS_PLACEMENT$==0)" index_name="__dummyl1_">
	    <VAR id="METERS_PLACEMENT_LAYOUT" value="column" />
	  </REPEAT>
	  <REPEAT count="($METERS_PLACEMENT$==1)" index_name="__dummyl2_">
	    <VAR id="METERS_PLACEMENT_LAYOUT" value="layer_stack" />
	  </REPEAT> 

	  <VAR id="METERS_MIN_WIDTH" value="$min_width$" />
	  <VAR id="METERS_MIN_WIDTH_SINGLE" value="$min_width_single$" />
	  <VAR id="METERS_PAD_H" value="$pad_h$" />
	  <VAR id="METERS_PAD_H_half" formula="$pad_h$/2" />
	  <VAR id="METERS_PAD_H_half_input" formula="$pad_h$/2" />
	  <VAR id="METERS_PAD_H_half_output" formula="$pad_h$/-2" />
	  <VAR id="METERS_PAD_V" value="$pad_v$" />
	  <VAR id="METERS_V_OFFSET" value="$v_offset$" />
	  <VAR id="METERS_HIDE_INACTIVE" value="$hide_inactive$" />

	  <!-- parsing box params -->
	  <VAR id="METERS_BOX" value="$box$" />

	  <!-- parsing grouping -->
	  <VAR id="N" value="0" />
	  <VAR id="T0" value="0" /><VAR id="T1" value="0" /><VAR id="T2" value="0" />
	  <REPEAT index_list="$box_pos$">
	    <VAR id="T$N$" value="$index$" /><NEXT_N />
	  </REPEAT>
	  <VAR id="METERS_BOX_PAD_A" value="$T0$" />
	  <VAR id="METERS_BOX_PAD_B" value="$T1$" />
	  <VAR id="METERS_BOX_OFFSET" value="$T2$" />
	  <!-- 3 reserved -->
	  <VAR id="METERS_BOX_SPACING" value="$T4$" />

	  <!-- parsing grouping -->
	  <VAR id="N" value="0" />
	  <VAR id="T0" value="0" /><VAR id="T1" value="0" />
	  <REPEAT index_list="$grouping$">
	    <VAR id="T$N$" value="$index$" /><NEXT_N />
	  </REPEAT>
	  <VAR id="METERS_GROUP_input" value="$T0$" />
	  <VAR id="METERS_GROUP_output" value="$T1$" />
	  <VAR id="METERS_GROUP_SPACING" value="$T2$" />
	  <!-- apply to params to be able to change on the fly -->
	  <ONLOAD script="a_meters_group_spacing = $METERS_GROUP_SPACING$; a_meters_group_input = $METERS_GROUP_input$; a_meters_group_output = $METERS_GROUP_output$;" />

	  <!-- parsing $render$ params -->
	  <VAR id="METERS_RENDER" value="$render$" />
	  <ONLOAD script="LM::meters_prepareParams(&quot;$render$&quot;, LM::meterRenderParams)" />
	  <!--
		meterRenderParams structure (params follow the same order as in $render$ string):
		(0-4) style;min_level;max_level;-;-;
		(5-9) level_bg_opacity;desired_leds_count;min_led_size;max_led_size;led_spacing
		(10-14) hold_line_width;hold_line_use_color;inner_pad_h;inner_pad_v;-;
		(15-19) stroke_width;stroke_expand;stroke_round;-;-;
		(20-29) -;-;-;-;-;-;-;-;-;-;
		(30-...) colors[color[r,g,b];opacity;shift];
		-->

	</TEMPLATE>

	<TEMPLATE id="VARS_STATUS" display="2" min_height="23" pad_h="8" v_offset="0" bg="0;1;0;1;3;0;;;; ;#404040;1;0 ;#373737;1;100 ;#5A5A5A;1;3 ;#222222;1;100"  _auto_color="1;-9;1;26;1;-30" flex_cells="1;0;0" content="Arial;-2;-;-;#FFFFFF;;5;5.33;;0;1;12;1;-1;1;0;#BBBBBB;1;#FFCC00;0.9;#FF774E;1;#FFFFFF;0.8;|;#686868;0.63;2;21;2;0;;;1;1" layout="0;0;135;1;150" items_left="ICON;LOG_LINE" items_center="" items_right="SEPARATOR;SAMPLERATE;BLOCKSIZE" custom_text="" custom_items="" custom_items_names="" corner_resizer_space="7">
	  <VAR id="STATUS_DISPLAY" value="$display$" />
	  <VAR id="STATUS_DISPLAY_BOOL" value="false" />
	  <REPEAT count="($STATUS_DISPLAY$>1)" index_name="__dumsd0l2_">
	    <VAR id="STATUS_DISPLAY_BOOL" value="true" />
	  </REPEAT> 
	  <VAR id="STATUS_CONTENT" value="$content$" />
	  <VAR id="STATUS_LAYOUT" value="$layout$" />
	  <VAR id="STATUS_MIN_HEIGHT" value="$min_height$" />
	  <VAR id="STATUS_PAD_H" value="$pad_h$" />
	  <VAR id="STATUS_V_OFFSET" value="$v_offset$" />
	  <VAR id="STATUS_BG" value="$bg$" />
	  <VAR id="STATUS_BG_KUIML" value="$bg_kuiml$" />

	  <VAR id="STATUS_ITEMS_LEFT" value="$items_left$" />
	  <VAR id="STATUS_ITEMS_CENTER" value="$items_center$" />
	  <VAR id="STATUS_ITEMS_RIGHT" value="$items_right$" />
	  
	  <VAR id="STATUS_CUSTOM_ITEMS" value="$custom_items$" />
	  <VAR id="STATUS_CUSTOM_ITEMS_NAMES" value="$custom_items_names$" />

	  <VAR id="STATUS_FLEX_CELLS" value="$flex_cells$" />
		
		<R index_list="$custom_text$">
	  	<ONLOAD script="status_custom_text = &quot;$custom_text$&quot;;" />
	  </R>
	
		<VAR id="STATUS_CORNER_RESIZER_SPACE" value="$corner_resizer_space$" />
	</TEMPLATE>

	<TEMPLATE id="VARS_DECOR" toolbar="" body1="" body2="" body3="" body4="" status="" display="0" opacity="1">
	  <VAR id="DECOR_TOOLBAR" value="$toolbar$" />
	  <VAR id="DECOR_BODY1" value="$body1$" />
	  <VAR id="DECOR_BODY2" value="$body2$" />
	  <VAR id="DECOR_BODY3" value="$body3$" />
	  <VAR id="DECOR_BODY4" value="$body4$" />
	  <VAR id="DECOR_STATUS" value="$status$" />
	  <VAR id="DECOR_DISPLAY" value="$display$" />
	  <VAR id="DECOR_OPACITY" value="$opacity$" />
	  <!-- 
	  <LV id="N" value="0" />
	  <R index_list="$global$">
	    <VAR id="GV$N$" value="$index$" />
	    <LV id="N" formula="$N$+1" />
	  </R>
	-->
	  
	</TEMPLATE>


	<!-- RESIZEABLE SKIN SUPPORT -->
	<VAR id="LM_SKIN_RESIZEABLE" value="0" />
	<VAR id="RE100" value="" /> <!-- RE100 is 100% when skin is resizeable, otherwise empty -->
	<EPARAM id="lm_skin_resizeable" />

	<!-- initialize parameters for resizeable skin support -->
	<TEMPLATE id="MAKE_RESIZEABLE" enabled="true" min="200x100" default="600x400" max="1600x900" root_cell_id="root_cell" proportional="false">
		<R count="$enabled$">
			<!-- init scripts variables, parse min, max, default -->
			<SCRIPT script="
			  float $root_cell_id$_old_width, $root_cell_id$_old_height;

			  float $root_cell_id$_min_width = parseFloat(&quot;$min$&quot;.split(&quot;x&quot;)[0]);
			  float $root_cell_id$_min_height = parseFloat(&quot;$min$&quot;.split(&quot;x&quot;)[1]);

			  float $root_cell_id$_max_width = parseFloat(&quot;$max$&quot;.split(&quot;x&quot;)[0]);
			  float $root_cell_id$_max_height = parseFloat(&quot;$max$&quot;.split(&quot;x&quot;)[1]);

			  float $root_cell_id$_default_width = parseFloat(&quot;$default$&quot;.split(&quot;x&quot;)[0]);
			  float $root_cell_id$_default_height = parseFloat(&quot;$default$&quot;.split(&quot;x&quot;)[1]);

			  bool $root_cell_id$_resize_proportional = $proportional$;
			  " />

			<!-- way to remember window size -->
			<EPARAM id="$root_cell_id$_width" persistent="true" max="4000" />
			<EPARAM id="$root_cell_id$_height" persistent="true" max="4000" />
			<PARAM_LINK from="$root_cell_id$.width" to="$root_cell_id$_width" enabled="false" id="lnk_$root_cell_id$_width" />
			<PARAM_LINK from="$root_cell_id$.height" to="$root_cell_id$_height" enabled="false" id="lnk_$root_cell_id$_height" />
			
			<!-- when window loads, restore last size and enable back links -->
			<ONLOAD script="
				/* set param flag for misc scripts */
				lm_skin_resizeable = 1;
			  /* if saved previous window size */
			  if (($root_cell_id$_width >= $root_cell_id$_min_width) and ($root_cell_id$_height >= $root_cell_id$_min_height)) {
			    root_cell.width = $root_cell_id$_width;
			    root_cell.height = $root_cell_id$_height;
			  } else {
			    root_cell.width = $root_cell_id$_default_width;
			    root_cell.height = $root_cell_id$_default_height;
			  }
			  lnk_$root_cell_id$_width.enabled = true;
			  lnk_$root_cell_id$_height.enabled = true;
			  " requires="lm_skin_resizeable;$root_cell_id$_width;$root_cell_id$_height;lnk_$root_cell_id$_width.enabled;lnk_$root_cell_id$_height.enabled" />

			<VAR id="LM_SKIN_RESIZEABLE" value="1" />
			<VAR id="RE100" value="100%" />
			
			<VAR id="BODY_MIN_HEIGHT" value="1" />
		  <VAR id="BODY_MIN_WIDTH" value="1" />

			<REQUIRED_OBJECTS object_ids="root_cell.*" />
			<EXPOSED_OBJECTS object_ids="root_cell.*" />
		</R>
	</TEMPLATE>

	<!-- a helper for resizeable skin (corner resizer) -->
	<TEMPLATE id="CORNER_RESIZER" root_cell_id="root_cell"  color="#777777" opacity="1" size="16" >

		<LV id="elemid" script="if (&quot;$id$&quot; == &quot;$&quot;+&quot;id$&quot;) return &quot;corner_resizer&quot;; else return &quot;$id$&quot;;" />

	  <LS id="$elemid$" v_position="0" h_position="0">
	    
	    <R count="$LM_SKIN_RESIZEABLE$">
	    	<SVG_ICON_CORNER_RESIZE color="$color$" opacity="$opacity$" size="$size$" />
		    <XYZ_PARAM_SCRATCH_PAD x_param_id="$elemid$_drag_x" y_param_id="$elemid$_drag_y" z_param_id="$elemid$_drag_z" width="100%" height="100%" cursor="$CUR_SIZE_UP_LEFT$" y_pixel_range="4001" x_pixel_range="4001" />
		    <!-- move icon to the right bottom -->
		    <PARAM_LINK from="$root_cell_id$.width" to="$elemid$.h_offset" formula="x-$size$" />
		    <PARAM_LINK from="$root_cell_id$.height" to="$elemid$.v_offset" formula="x-$size$" />

		    <!-- params to make XYZ_PARAM_SCRATCH_PAD work -->
		    <EPARAM id="$elemid$_drag_x" min="-2000" max="2000" />
		    <EPARAM id="$elemid$_drag_y" min="-2000" max="2000" />
		    <EPARAM id="$elemid$_drag_z" min="-2000" max="2000" default="0.5" />

		    <!-- when dragging starts -->
		    <ONCHANGE o="$elemid$_drag_x.capturing" condition="$elemid$_drag_x.capturing == 1" script="
		      $root_cell_id$_old_width=root_cell.width;
		      $root_cell_id$_old_height=root_cell.height;" requires="$elemid$_drag_x;$elemid$_drag_y;$root_cell_id$.width;$root_cell_id$.height" />

		    <!-- when dragging goes on -->
		    <ONCHANGE o="$elemid$_drag_x;$elemid$_drag_y" condition="$elemid$_drag_x.capturing == 1" script="
		      float new_height = $root_cell_id$_old_height - $elemid$_drag_y;
		      float new_width = $root_cell_id$_old_width + $elemid$_drag_x;
		      if (new_height &lt; $root_cell_id$_min_height) new_height = $root_cell_id$_min_height;
		      if (new_width &lt; $root_cell_id$_min_width) new_width = $root_cell_id$_min_width;
		      if (new_height > $root_cell_id$_max_height) new_height = $root_cell_id$_max_height;
		      if (new_width > $root_cell_id$_max_width) new_width = $root_cell_id$_max_width;
					/* if proportional */
		      if ($root_cell_id$_resize_proportional) {
						float prop_w = new_width/$root_cell_id$_default_width;
						float prop_h = new_height/$root_cell_id$_default_height;
						if (prop_w >= prop_h) {
							new_height = $root_cell_id$_default_height*prop_w;
						} else {
							new_width = $root_cell_id$_default_width*prop_h;
						}
		      }
		      $root_cell_id$.height = new_height;
		      $root_cell_id$.width = new_width; " />

		    <!-- when dragging stops -->
		    <ONCHANGE o="$elemid$_drag_x.capturing" condition="$elemid$_drag_x.capturing == 0" script="
		      $elemid$_drag_x=0;$elemid$_drag_y=0;" async="true" />

		    <!-- right click detection (restore default size) -->
		    <PARAM_LINK from="window.loaded" to="$elemid$_drag_z.default" reverse="true" />
		    <ONCHANGE o="$elemid$_drag_z" script="
		      $elemid$_drag_z = 0.1; 
		      $root_cell_id$.width = $root_cell_id$_default_width;
		      $root_cell_id$.height = $root_cell_id$_default_height;
		    " condition="(window.loaded==1)*($elemid$_drag_z==0)" />
		  </R>
	  </LS>
	</TEMPLATE>
	
	<!-- RENDER SETTINGS -->

	<!-- param to keep tracking of light source changes -->
	<EPARAM id="render_settings_changed" max="999999999" default="0" />
	<ESTRING id="render_settings_data" />
	<EXPOSED_OBJECTS object_ids="render_settings_changed.*;render_settings_data.*" />

	<!-- var to keep added light sources and to pass them to script -->
	<VAR id="RENDER_SETTINGS_DATA" value="" />
	
	<!-- legacy way of adding light sources (still works, can be used for adding more than 3 default sources) -->
	<TEMPLATE id="LIGHT_SOURCE" index="0" enabled="1" preview="0" angle="12" alt="75" distance="650" size="100" intensity="0.5" color="#FFFFFF" x="" y="" z="" rel_index="-1" >
	  <VAR id="RENDER_SETTINGS_DATA" value="$RENDER_SETTINGS_DATA$||ls;$index$;$enabled$;$preview$;$angle$;$alt$;$distance$;$size$;$intensity$;$color$;$x$;$y$;$z$;$rel_index$" />
	</TEMPLATE>
	
	<!--
	// legacy way of adding light sources (still works, can be used for adding more than 3 default sources)
	<LIGHT_SOURCE index="0" enabled="1" angle="-12" alt="40" distance="650" size="130" intensity="1.21" color="#FFEE99" />
	<LIGHT_SOURCE index="1" enabled="1" angle="-45" alt="88" distance="1500" size="200" intensity="100.9" color="#FFFFFF" />
	<LIGHT_SOURCE index="2" enabled="1" angle="35" alt="68" distance="2000" size="300" intensity="3" color="#AAFFFF"  />
	-->
	
	<TEMPLATE id="VARS_RENDER" light_source_a="1;0;-12;80;650;130;0.21;#FFFFFF;;;;;;;" light_source_b="1;0;-45;88;1500;200;1.9;#FFEE99;;;;;;;" light_source_c="1;0;35;68;2000;300;3;#AAFFFF;;;;;;;" light_source_d="" light_source_e="" ambient_intensity="0.45" ref_intensity_distance="500" camera="1000;22;0;0" >
		<VAR id="RENDER_SETTINGS_DATA" value="$RENDER_SETTINGS_DATA$||ls;0;$light_source_a$||ls;1;$light_source_b$||ls;2;$light_source_c$||ls;3;$light_source_d$||ls;4;$light_source_e$||cam;$camera$||amb;$ambient_intensity$||rid;$ref_intensity_distance$" />
		<ONLOAD script="render_settings_data = &quot;$RENDER_SETTINGS_DATA$;&quot;" />
	</TEMPLATE>

	<!-- END OF DEFAULT VARS VALUES -->

	<!-- initialize with default values -->
	<VARS_TOOLBAR />
	<VARS_BODY />
	<VARS_METERS />
	<VARS_STATUS />
	<VARS_DECOR />
	<VARS_RENDER />

	<!-- ###################################### -->
	<!-- INCLUDE COMMON SCRIPTS  -->
	<!-- ###################################### -->
	
	<COMMON_SCRIPTS cnvp='SKIN' /> <!-- include common.as there -->
	
	<EXPOSED_OBJECTS object_ids="$bypass$;body_cell.*;OpenMenuLM;OpenMenu;skin_menu.*;$script_file_path$;$script_gui_path$;a_toolbar_bg_innerKUIML;a_toolbar_innerKUIML;a_body_bg_innerKUIML;a_body_innerKUIML;a_status_bg_innerKUIML;$script_input_params_count$;$script_output_params_count$;a_body_font;$script_name_string$;a_toolbar_font_size;a_toolbar_text_color;dsp.output_string0;$script_name_string$;$script_input_strings_count$;$script_output_strings_count$;dsp.private_output0;DisplayAbout;openSomeUrl;toggle_bypass;Undo;Redo;OpenInfo;OpenPresetsMenu;OpenCustomMenu.*;ShowDefaultScriptsMenu;PreviousPreset;NextPreset;OpenManual;current_preset.*;a_lm_menu;a_custom_menu;ToggleControlsSettings;ReloadScript;a_toolbar_title_fixed_text.*;lm_skin_resizeable;script_kuiml_loaded_ok" />
	
	<!-- create some script aliases -->
	<SCRIPT script="Kt::Action@ a_lm_menu, a_custom_menu, a_open_settings, a_show_skin_scanner, a_show_controls_gen, a_show_global_prefs, a_open_export, a_open_about_lmskin;" />	
	
	<!-- NO_EXPORT_IF_STATIC -->
	<!-- include scripts for reloading parts of skin -->
	<SCRIPT script="



/* NO_EXPORT */

void reloadToolbar(){
  array&lt;string> items;
  string s, toolbar_content, toolbar_title = a_toolbar_title_text;
  
  if (a_toolbar_title_fixed_text.length > 0) toolbar_title = a_toolbar_title_fixed_text;

  if (a_toolbar_title == &quot;&quot;) a_toolbar_title=&quot;500;50;4;0;0;0;1;;;;+1;-;-;#000000;&quot;;
  if (a_toolbar_presets == &quot;&quot;) a_toolbar_presets = &quot;130;20;3;3;0;0;; ;16;#555555;0.8; ;1;#333333;0.5;#291651;0.2;0.5;10;; ;Arial;-2;-;-;#1F1F1F;;0&quot;;
  if (a_toolbar_max_in_row == &quot;&quot;) a_toolbar_max_in_row = &quot;5;2;5&quot;;
    
  toolbar_content = &quot;&lt;COMMON_SCRIPTS n='6000' p='TB' />&lt;PARSE_ICONS data='&quot;+a_toolbar_icons+&quot;' />&lt;PARSE_MAX_IN_ROW data='&quot;+a_toolbar_max_in_row+&quot;' />&lt;PARSE_TITLE data='&quot;+a_toolbar_title+&quot;' text='&quot;+escapeq(toolbar_title)+&quot;' />&lt;PARSE_PRESETS data='&quot;+a_toolbar_presets+&quot;' />&quot;;
  toolbar_content += &quot;&lt;CELL layout_type='row' width='100%' text_color='$&quot;+&quot;TB_TI_TEXT_COLOR$'>&lt;TB_LAYOUT_ITEMS h_align='left' max_in_row='$&quot;;
  toolbar_content +=&quot;TOOLBAR_MAX_IN_ROW_0$' items='&quot;+a_toolbar_items_left+&quot;' />&lt;TB_LAYOUT_ITEMS h_align='center' max_in_row='$&quot;;
  toolbar_content +=&quot;TOOLBAR_MAX_IN_ROW_1$' items='&quot;+a_toolbar_items_center+&quot;' flex='1' />&lt;TB_LAYOUT_ITEMS h_align='right' max_in_row='$&quot;;
  toolbar_content +=&quot;TOOLBAR_MAX_IN_ROW_2$' items='&quot;+a_toolbar_items_right+&quot;' />&lt;/CELL>&quot;;

  a_toolbar_innerKUIML = &quot;&lt;SKIN width='100%'>&quot;+toolbar_content+&quot;&lt;/SKIN>&quot;;
}

/* END_NO_EXPORT */

enum autoLayoutParams{
  AL_PRIORITY, AL_FILENAME, AL_ORIENTATION, AL_CONTROLSINLINE, AL_GROUPBY
}

enum autoLayoutTypes{
  AL_TYPE_TEXT, AL_TYPE_GRAPHICS, AL_TYPE_CUSTOM
}

enum autoLayoutThemeParams{
  AL_ITEM_WIDTH, AL_ITEM_HEIGHT, AL_ITEM_H_MARGIN, AL_ITEM_V_MARGIN, AL__1, AL__2, 
  AL_GROUP_FILL_COLOR, AL_GROUP_FILL_COLOROP, AL_GROUP_LINE_COLOR, AL_GROUP_LINE_COLOROP, AL_GROUP_LINE_WIDTH, AL_GROUP_H_MARGIN, AL_GROUP_V_MARGIN, AL_GROUP_CONVERGE, AL_GROUP_ROUND, AL_RC_PAD, AL__4, AL_NAME_V_OFFSET, AL_VALUE_V_OFFSET, AL_TEXT_COLOR, 
  AL_EXTRAS, AL__11, AL__12, AL__13, AL__14, AL__15, AL__16, AL__17, AL__18, AL__19, 
  AL_KNOB, AL_KNOB_SCALING, AL_KNOB_C1, AL_KNOB_OP1, AL_KNOB_C2, AL_KNOB_OP2, AL_KNOB_C3, AL_KNOB_OP3, AL_KNOB_C4, AL_KNOB_OP4, AL_KNOB_C5, AL_KNOB_OP5, 
  AL_SWITCH, AL_SWITCH_SCALING, AL_SWITCH_C1, AL_SWITCH_OP1, AL_SWITCH_C2, AL_SWITCH_OP2, AL_SWITCH_C3, AL_SWITCH_OP3, AL_SWITCH_C4, AL_SWITCH_OP4, AL_SWITCH_C5, AL_SWITCH_OP5, 
  AL_METER, AL_METER_SCALING, AL_METER_C1, AL_METER_OP1, AL_METER_C2, AL_METER_OP2, AL_METER_C3, AL_METER_OP3, AL_METER_C4, AL_METER_OP4, AL_METER_C5, AL_METER_OP5
}

enum autoLayoutPlaceHolders{
  AL_PH_GENERAL,
  AL_PH_KNOB,
  AL_PH_METER,
  AL_PH_SWITCH
}




string skin_scanner_main_file = &quot;$LM_DIR$$EDITORS_SUBDIR$/skin_scanner/ss_browser.kuiml&quot;;
string controls_gen_main_file = &quot;$LM_DIR$$EDITORS_SUBDIR$/controls_gen/main_cg.kuiml&quot;;


bool is_first_reloadBody = true;


string preloadedBodyContent = &quot;&quot;&quot;
&lt;SKIN v_margin=&quot;3&quot;>
&lt;DEFINE>
  &lt;LM_AUTO_KNOB base_type=&quot;#knob_name#&quot; image_scaling=&quot;#knob_scaling#&quot; scaling=&quot;#knob_scaling#&quot; pad_px=&quot;#rc_pad#&quot; #knob_params_placeholder#  />
  &lt;LM_AUTO_SWITCH base_type=&quot;#switch_name#&quot; image_scaling=&quot;#switch_scaling#&quot; scaling=&quot;#switch_scaling#&quot; pad_px=&quot;#rc_pad#&quot; #switch_params_placeholder#  />
  &lt;LM_AUTO_METER base_type=&quot;#meter_name#&quot; image_scaling=&quot;#meter_scaling#&quot; scaling=&quot;#meter_scaling#&quot; pad_px=&quot;#rc_pad#&quot; #meter_params_placeholder#  />
&lt;/DEFINE>

&lt;TEMPLATE id=&quot;LM_AUTO_GROUP&quot;>
	&lt;LM_BOX opacity=&quot;1&quot; stroke_color=&quot;#group_stroke_color#&quot; fill_color=&quot;#group_fill_color#&quot; stroke_opacity=&quot;#group_stroke_opacity#&quot; fill_opacity=&quot;#group_fill_opacity#&quot; stroke_width=&quot;#group_stroke_width#&quot; round=&quot;#group_round#&quot; />
&lt;/TEMPLATE>

&lt;LV id=&quot;ORIENTATION&quot; value=&quot;#orientation#&quot; />
&lt;LV id=&quot;MAX_ITEMS_IN_LINE&quot; formula=&quot;#max_in_line#&quot; />
&lt;LV id=&quot;GROUP_BY&quot; value=&quot;#group_by#&quot; />

&lt;LV id=&quot;GROUP_CONVERGENCE&quot; value=&quot;#group_converge#&quot; />
&lt;LV id=&quot;ITEM_V_MARGIN&quot; formula=&quot;#item_v_margin#&quot; />
&lt;LV id=&quot;ITEM_H_MARGIN&quot; value=&quot;#item_h_margin#&quot; />
&lt;LV id=&quot;ITEM_HEIGHT&quot; formula=&quot;#item_height# - $&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_V_MARGIN$&quot;&quot;&quot;+&quot;&quot;&quot;*2&quot; />
&lt;LV id=&quot;ITEM_WIDTH&quot; formula=&quot;#item_width# - $&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_H_MARGIN$&quot;&quot;&quot;+&quot;&quot;&quot;*2&quot; />

&lt;LV id=&quot;TXNAME_V_OFFSET&quot; value=&quot;#textname_v_offset#&quot; />
&lt;LV id=&quot;TXVALUE_V_OFFSET&quot; value=&quot;#textvalue_v_offset#&quot; />

&lt;LV id=&quot;GROUP_H_MARGIN&quot; formula=&quot;#group_h_margin#&quot; />
&lt;LV id=&quot;GROUP_V_MARGIN&quot; formula=&quot;#group_v_margin#&quot; />
&lt;LV id=&quot;RC_PAD_PX&quot; formula=&quot;#rc_pad#&quot; />
&lt;LV id=&quot;BLOCK_H_MARGIN&quot; value=&quot;20&quot; />
&lt;LV id=&quot;OVERALL_V_OFFSET&quot; value=&quot;1&quot; />
&lt;FORMULA_PARAM id=&quot;no_controls_available&quot; formula=&quot;($&quot;&quot;&quot;+&quot;&quot;&quot;script_input_params_count$&quot;&quot;&quot;+&quot;&quot;&quot;+$&quot;&quot;&quot;+&quot;&quot;&quot;script_output_params_count$&quot;&quot;&quot;+&quot;&quot;&quot;+$&quot;&quot;&quot;+&quot;&quot;&quot;script_input_strings_count$&quot;&quot;&quot;+&quot;&quot;&quot;+$&quot;&quot;&quot;+&quot;&quot;&quot;script_output_strings_count$&quot;&quot;&quot;+&quot;&quot;&quot; + #in_params_count# + #out_params_count#)==0&quot;/>
&lt;PARAM_LINK from=&quot;no_controls_available&quot; to=&quot;no_controls_box.display&quot;/>
&lt;CELL spacing=&quot;0&quot; layout_type=&quot;column&quot; id=&quot;no_controls_box&quot; display=&quot;false&quot; height=&quot;90&quot;>
  &lt;TEXT value=&quot;This script has no controls.&quot;/>
&lt;/CELL>
&lt;LV id=&quot;TOTAL_CONTROLS_COUNT&quot; formula=&quot;#in_params_count# + #out_params_count#&quot; />
&lt;LV id=&quot;TOTAL_STRINGS_COUNT&quot; formula=&quot;#in_strings_count# + #out_strings_count#&quot; />
&lt;LV id=&quot;ITEMS_IN_LINE&quot; formula=&quot;($&quot;&quot;&quot;+&quot;&quot;&quot;TOTAL_CONTROLS_COUNT$&quot;&quot;&quot;+&quot;&quot;&quot; >= $&quot;&quot;&quot;+&quot;&quot;&quot;MAX_ITEMS_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot;)*$&quot;&quot;&quot;+&quot;&quot;&quot;MAX_ITEMS_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot; + ($&quot;&quot;&quot;+&quot;&quot;&quot;TOTAL_CONTROLS_COUNT$&quot;&quot;&quot;+&quot;&quot;&quot; &amp;lt;$&quot;&quot;&quot;+&quot;&quot;&quot;MAX_ITEMS_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot;)*$&quot;&quot;&quot;+&quot;&quot;&quot;TOTAL_CONTROLS_COUNT$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; />
&lt;LV id=&quot;LINES_COUNT&quot; formula=&quot;ceil($&quot;&quot;&quot;+&quot;&quot;&quot;TOTAL_CONTROLS_COUNT$&quot;&quot;&quot;+&quot;&quot;&quot; / $&quot;&quot;&quot;+&quot;&quot;&quot;MAX_ITEMS_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot;)&quot; />

&lt;LV id=&quot;GROUPS_IN_LINE&quot; formula=&quot;0&quot; />
&lt;LV id=&quot;ITEMS_IN_LAST_GROUP&quot; formula=&quot;0&quot; />
&lt;R count=&quot;($&quot;&quot;&quot;+&quot;&quot;&quot;GROUP_BY$&quot;&quot;&quot;+&quot;&quot;&quot; > 0)&quot;>
	&lt;LV id=&quot;GROUPS_IN_LINE&quot; formula=&quot;ceil($&quot;&quot;&quot;+&quot;&quot;&quot;ITEMS_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot;/$&quot;&quot;&quot;+&quot;&quot;&quot;GROUP_BY$&quot;&quot;&quot;+&quot;&quot;&quot;)&quot; />
	&lt;LV id=&quot;ITEMS_IN_LAST_GROUP&quot; formula=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;ITEMS_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot; - (floor($&quot;&quot;&quot;+&quot;&quot;&quot;ITEMS_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot;/$&quot;&quot;&quot;+&quot;&quot;&quot;GROUP_BY$&quot;&quot;&quot;+&quot;&quot;&quot;)*$&quot;&quot;&quot;+&quot;&quot;&quot;GROUP_BY$&quot;&quot;&quot;+&quot;&quot;&quot;)&quot; />
&lt;/R>
&lt;R count=&quot;($&quot;&quot;&quot;+&quot;&quot;&quot;GROUP_BY$&quot;&quot;&quot;+&quot;&quot;&quot; == 0)&quot;>
	&lt;LV id=&quot;GROUP_CONVERGENCE&quot; value=&quot;0&quot; />
&lt;/R>

&lt;LV id=&quot;A_LAYOUT_TYPE&quot; value=&quot;row&quot; />
&lt;R count=&quot;($&quot;&quot;&quot;+&quot;&quot;&quot;ORIENTATION$&quot;&quot;&quot;+&quot;&quot;&quot;>0)&quot;>
	&lt;LV id=&quot;A_LAYOUT_TYPE&quot; value=&quot;column&quot; />
&lt;/R>

&lt;LV id=&quot;AREA_WIDTH&quot; value=&quot;300&quot; />
&lt;LV id=&quot;AREA_HEIGHT&quot; value=&quot;&quot; />

&lt;R count=&quot;($&quot;&quot;&quot;+&quot;&quot;&quot;TOTAL_STRINGS_COUNT$&quot;&quot;&quot;+&quot;&quot;&quot; > 0)&quot; index_name=&quot;_none&quot;>
	&lt;LV id=&quot;AREA_WIDTH&quot; value=&quot;450&quot; />
&lt;/R>

&lt;R count=&quot;($&quot;&quot;&quot;+&quot;&quot;&quot;TOTAL_CONTROLS_COUNT$&quot;&quot;&quot;+&quot;&quot;&quot; > 0)&quot; index_name=&quot;_none11&quot;>
	&lt;R count=&quot;($&quot;&quot;&quot;+&quot;&quot;&quot;ORIENTATION$&quot;&quot;&quot;+&quot;&quot;&quot;==0)&quot;>
		&lt;LV id=&quot;AREA_WIDTH&quot; formula=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_WIDTH$&quot;&quot;&quot;+&quot;&quot;&quot;*$&quot;&quot;&quot;+&quot;&quot;&quot;ITEMS_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot; + $&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_H_MARGIN$&quot;&quot;&quot;+&quot;&quot;&quot;*2*($&quot;&quot;&quot;+&quot;&quot;&quot;ITEMS_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot;)&quot; />
		&lt;LV id=&quot;AREA_HEIGHT&quot; formula=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_HEIGHT$&quot;&quot;&quot;+&quot;&quot;&quot;*$&quot;&quot;&quot;+&quot;&quot;&quot;LINES_COUNT$&quot;&quot;&quot;+&quot;&quot;&quot; + $&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_V_MARGIN$&quot;&quot;&quot;+&quot;&quot;&quot;*2*($&quot;&quot;&quot;+&quot;&quot;&quot;LINES_COUNT$&quot;&quot;&quot;+&quot;&quot;&quot;) &quot; />
	&lt;/R>
	&lt;R count=&quot;($&quot;&quot;&quot;+&quot;&quot;&quot;ORIENTATION$&quot;&quot;&quot;+&quot;&quot;&quot;>0)&quot;>
		&lt;LV id=&quot;AREA_HEIGHT&quot; formula=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_HEIGHT$&quot;&quot;&quot;+&quot;&quot;&quot;*$&quot;&quot;&quot;+&quot;&quot;&quot;ITEMS_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot; + $&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_V_MARGIN$&quot;&quot;&quot;+&quot;&quot;&quot;*2*($&quot;&quot;&quot;+&quot;&quot;&quot;ITEMS_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot;) &quot; />
		&lt;LV id=&quot;AREA_WIDTH&quot; formula=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_WIDTH$&quot;&quot;&quot;+&quot;&quot;&quot;*$&quot;&quot;&quot;+&quot;&quot;&quot;LINES_COUNT$&quot;&quot;&quot;+&quot;&quot;&quot; + $&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_H_MARGIN$&quot;&quot;&quot;+&quot;&quot;&quot;*2*($&quot;&quot;&quot;+&quot;&quot;&quot;LINES_COUNT$&quot;&quot;&quot;+&quot;&quot;&quot;)&quot; />
	&lt;/R>
&lt;/R>

&lt;LV id=&quot;ITEM_HEIGHT_WITH_MARGING&quot; formula=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_HEIGHT$&quot;&quot;&quot;+&quot;&quot;&quot; + $&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_V_MARGIN$&quot;&quot;&quot;+&quot;&quot;&quot;*2&quot; />
&lt;R count=&quot;($&quot;&quot;&quot;+&quot;&quot;&quot;TOTAL_STRINGS_COUNT$&quot;&quot;&quot;+&quot;&quot;&quot; > 0)&quot; index_name=&quot;_none11&quot;>
	&lt;STRING id=&quot;colon&quot; default=&quot;:&quot; />
	&lt;COLUMN>	


		&lt;REPEAT count=&quot;#in_strings_count# > 0&quot; index_name=&quot;__none3&quot;>
			&lt;LAYER_STACK width=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;AREA_WIDTH$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; h_margin=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;GROUP_H_MARGIN$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; v_margin=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;GROUP_V_MARGIN$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; v_offset='$&quot;&quot;&quot;+&quot;&quot;&quot;OVERALL_V_OFFSET$&quot;&quot;&quot;+&quot;&quot;&quot;'>
			&lt;LM_AUTO_GROUP />
				&lt;CELL margin=&quot;10&quot; h_margin='12' width='100%' text_color=&quot;#text_color#&quot;>

					&lt;COLUMN width='100%' spacing=&quot;8&quot;>
						&lt;REPEAT count=&quot;#in_strings_count#&quot;>
						  &lt;ROW id=&quot;in_string_cell$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; spacing=&quot;10&quot; width=&quot;100%&quot;>
						  	&lt;STRING id=&quot;concat_in_$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; default=&quot;&quot; />
						  	&lt;STRING_MULTI_LINK from=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;script_input_string$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;_name$&quot;&quot;&quot;+&quot;&quot;&quot;;colon&quot; to=&quot;concat_in_$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; />
						    &lt;TEXT string_id=&quot;concat_in_$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; text_h_align=&quot;left&quot;/>
						    &lt;TEXT_EDIT_BOX string_id=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;script_input_string$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; background_color=&quot;#FFFFFF&quot; text_color=&quot;#000000&quot; show_edges=&quot;true&quot; flex=&quot;1&quot; height=&quot;100%&quot;/>
						  &lt;/ROW>
						&lt;/REPEAT>
					&lt;/COLUMN> 
				&lt;/CELL>
			&lt;/LAYER_STACK>
		&lt;/REPEAT>


		&lt;REPEAT count=&quot;#out_strings_count# > 0&quot; index_name=&quot;__none4&quot;>
			&lt;LAYER_STACK width=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;AREA_WIDTH$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; h_margin=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;GROUP_H_MARGIN$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; v_margin=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;GROUP_V_MARGIN$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; v_offset='$&quot;&quot;&quot;+&quot;&quot;&quot;OVERALL_V_OFFSET$&quot;&quot;&quot;+&quot;&quot;&quot;'>
			&lt;LM_AUTO_GROUP />
				&lt;CELL margin=&quot;10&quot; h_margin='12' width='100%' text_color=&quot;#text_color#&quot;>
					&lt;COLUMN  width='100%' spacing=&quot;4&quot;>
						&lt;REPEAT count=&quot;#out_strings_count#&quot;>
						  &lt;ROW id=&quot;out_string_cell$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; spacing=&quot;10&quot; width=&quot;100%&quot;>
						  	&lt;STRING id=&quot;concat_out_$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; default=&quot;&quot; />
						  	&lt;STRING_MULTI_LINK from=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;script_output_string$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;_name$&quot;&quot;&quot;+&quot;&quot;&quot;;colon&quot; to=&quot;concat_out_$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; />
						  	&lt;CELL>
						    	&lt;TEXT string_id=&quot;concat_out_$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; text_h_align=&quot;left&quot;/>
						    &lt;/CELL>
						    &lt;CELL flex=&quot;1&quot;>
						    	&lt;TEXT string_id=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;script_output_string$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; width=&quot;100%&quot; text_h_align=&quot;left&quot; />
						    &lt;/CELL>
						  &lt;/ROW>
						&lt;/REPEAT>
					&lt;/COLUMN> 
				&lt;/CELL>
			&lt;/LAYER_STACK>
		&lt;/REPEAT>
	&lt;/COLUMN>
&lt;/R>

&lt;TEMPLATE id=&quot;CALC_CONTROL_POS&quot;>
	&lt;LV id=&quot;OFFSET_IN_GROUP&quot; formula=&quot;($&quot;&quot;&quot;+&quot;&quot;&quot;N_IN_GROUP$&quot;&quot;&quot;+&quot;&quot;&quot; - 1) - ($&quot;&quot;&quot;+&quot;&quot;&quot;GROUP_BY$&quot;&quot;&quot;+&quot;&quot;&quot; - 1)/2&quot; />
	&lt;R count=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;IS_LAST_GROUP_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot;*($&quot;&quot;&quot;+&quot;&quot;&quot;ITEMS_IN_LAST_GROUP$&quot;&quot;&quot;+&quot;&quot;&quot;!=0)&quot;>
		&lt;LV id=&quot;OFFSET_IN_GROUP&quot; formula=&quot;($&quot;&quot;&quot;+&quot;&quot;&quot;N_IN_GROUP$&quot;&quot;&quot;+&quot;&quot;&quot; - 1) - ($&quot;&quot;&quot;+&quot;&quot;&quot;ITEMS_IN_LAST_GROUP$&quot;&quot;&quot;+&quot;&quot;&quot; - 1)/2&quot; />
	&lt;/R>

	&lt;VAR id=&quot;ITEM_H_OFFSET&quot; formula=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;OFFSET_IN_GROUP$&quot;&quot;&quot;+&quot;&quot;&quot;*(-1)*$&quot;&quot;&quot;+&quot;&quot;&quot;GROUP_CONVERGENCE$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; />
	&lt;VAR id=&quot;ITEM_V_OFFSET&quot; formula=&quot;0&quot; />
	&lt;LV id=&quot;ITEM_GUI_X&quot; formula=&quot;- ($&quot;&quot;&quot;+&quot;&quot;&quot;AREA_WIDTH$&quot;&quot;&quot;+&quot;&quot;&quot; * 0.5) + ($&quot;&quot;&quot;+&quot;&quot;&quot;AREA_WIDTH$&quot;&quot;&quot;+&quot;&quot;&quot; / $&quot;&quot;&quot;+&quot;&quot;&quot;ITEMS_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot;) * ($&quot;&quot;&quot;+&quot;&quot;&quot;N_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot;-1)  + $&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_H_OFFSET$&quot;&quot;&quot;+&quot;&quot;&quot; - $&quot;&quot;&quot;+&quot;&quot;&quot;RC_PAD_PX$&quot;&quot;&quot;+&quot;&quot;&quot; + ($&quot;&quot;&quot;+&quot;&quot;&quot;AREA_WIDTH$&quot;&quot;&quot;+&quot;&quot;&quot; / $&quot;&quot;&quot;+&quot;&quot;&quot;ITEMS_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot;)*0.5 &quot; />
	&lt;LV id=&quot;ITEM_GUI_Y&quot; formula=&quot;($&quot;&quot;&quot;+&quot;&quot;&quot;AREA_HEIGHT$&quot;&quot;&quot;+&quot;&quot;&quot; / $&quot;&quot;&quot;+&quot;&quot;&quot;LINES_COUNT$&quot;&quot;&quot;+&quot;&quot;&quot;) * ($&quot;&quot;&quot;+&quot;&quot;&quot;LINE_NO$&quot;&quot;&quot;+&quot;&quot;&quot;) - ($&quot;&quot;&quot;+&quot;&quot;&quot;AREA_HEIGHT$&quot;&quot;&quot;+&quot;&quot;&quot; * 0.5) - $&quot;&quot;&quot;+&quot;&quot;&quot;RC_PAD_PX$&quot;&quot;&quot;+&quot;&quot;&quot;  + ($&quot;&quot;&quot;+&quot;&quot;&quot;AREA_HEIGHT$&quot;&quot;&quot;+&quot;&quot;&quot; / $&quot;&quot;&quot;+&quot;&quot;&quot;LINES_COUNT$&quot;&quot;&quot;+&quot;&quot;&quot;)*0.5 &quot; />
	&lt;R count=&quot;($&quot;&quot;&quot;+&quot;&quot;&quot;ORIENTATION$&quot;&quot;&quot;+&quot;&quot;&quot;>0)&quot;>
		&lt;VAR id=&quot;ITEM_H_OFFSET&quot; formula=&quot;0&quot; />
		&lt;VAR id=&quot;ITEM_V_OFFSET&quot; formula=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;OFFSET_IN_GROUP$&quot;&quot;&quot;+&quot;&quot;&quot;*(-1)*$&quot;&quot;&quot;+&quot;&quot;&quot;GROUP_CONVERGENCE$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; />
		&lt;LV id=&quot;ITEM_GUI_X&quot; formula=&quot;($&quot;&quot;&quot;+&quot;&quot;&quot;AREA_WIDTH$&quot;&quot;&quot;+&quot;&quot;&quot; / $&quot;&quot;&quot;+&quot;&quot;&quot;LINES_COUNT$&quot;&quot;&quot;+&quot;&quot;&quot;) * ($&quot;&quot;&quot;+&quot;&quot;&quot;LINE_NO$&quot;&quot;&quot;+&quot;&quot;&quot;)  - ($&quot;&quot;&quot;+&quot;&quot;&quot;AREA_WIDTH$&quot;&quot;&quot;+&quot;&quot;&quot; * 0.5) + $&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_H_OFFSET$&quot;&quot;&quot;+&quot;&quot;&quot; - $&quot;&quot;&quot;+&quot;&quot;&quot;RC_PAD_PX$&quot;&quot;&quot;+&quot;&quot;&quot; + ($&quot;&quot;&quot;+&quot;&quot;&quot;AREA_WIDTH$&quot;&quot;&quot;+&quot;&quot;&quot; / $&quot;&quot;&quot;+&quot;&quot;&quot;LINES_COUNT$&quot;&quot;&quot;+&quot;&quot;&quot;)*0.5&quot; />
		&lt;LV id=&quot;ITEM_GUI_Y&quot; formula=&quot;($&quot;&quot;&quot;+&quot;&quot;&quot;AREA_HEIGHT$&quot;&quot;&quot;+&quot;&quot;&quot; / $&quot;&quot;&quot;+&quot;&quot;&quot;ITEMS_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot;) * ($&quot;&quot;&quot;+&quot;&quot;&quot;N_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot;-1) - ($&quot;&quot;&quot;+&quot;&quot;&quot;AREA_HEIGHT$&quot;&quot;&quot;+&quot;&quot;&quot; * 0.5) + $&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_V_OFFSET$&quot;&quot;&quot;+&quot;&quot;&quot; - $&quot;&quot;&quot;+&quot;&quot;&quot;RC_PAD_PX$&quot;&quot;&quot;+&quot;&quot;&quot; + ($&quot;&quot;&quot;+&quot;&quot;&quot;AREA_HEIGHT$&quot;&quot;&quot;+&quot;&quot;&quot; / $&quot;&quot;&quot;+&quot;&quot;&quot;ITEMS_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot;)*0.5&quot; />
	&lt;/R>




	&lt;LV id=&quot;LINE_NO&quot; formula=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;LINE_NO$&quot;&quot;&quot;+&quot;&quot;&quot; + ($&quot;&quot;&quot;+&quot;&quot;&quot;N_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot; == $&quot;&quot;&quot;+&quot;&quot;&quot;ITEMS_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot;)*1&quot; />
	&lt;LV id=&quot;N_IN_LINE&quot; formula=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;N_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot;+1&quot; />
	&lt;LV id=&quot;N_IN_LINE&quot; formula=&quot;($&quot;&quot;&quot;+&quot;&quot;&quot;N_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot; > $&quot;&quot;&quot;+&quot;&quot;&quot;ITEMS_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot;)*1 + ($&quot;&quot;&quot;+&quot;&quot;&quot;N_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot; &amp;lt;= $&quot;&quot;&quot;+&quot;&quot;&quot;ITEMS_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot;)*$&quot;&quot;&quot;+&quot;&quot;&quot;N_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; />
	&lt;LV id=&quot;N_IN_GROUP&quot; formula=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;N_IN_GROUP$&quot;&quot;&quot;+&quot;&quot;&quot;+1&quot; />
	&lt;LV id=&quot;N_IN_GROUP&quot; formula=&quot;($&quot;&quot;&quot;+&quot;&quot;&quot;N_IN_GROUP$&quot;&quot;&quot;+&quot;&quot;&quot; > $&quot;&quot;&quot;+&quot;&quot;&quot;GROUP_BY$&quot;&quot;&quot;+&quot;&quot;&quot;)*1 + ($&quot;&quot;&quot;+&quot;&quot;&quot;N_IN_GROUP$&quot;&quot;&quot;+&quot;&quot;&quot; &amp;lt;= $&quot;&quot;&quot;+&quot;&quot;&quot;GROUP_BY$&quot;&quot;&quot;+&quot;&quot;&quot;)*$&quot;&quot;&quot;+&quot;&quot;&quot;N_IN_GROUP$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; />
	&lt;LV id=&quot;N_IN_GROUP&quot; formula=&quot;($&quot;&quot;&quot;+&quot;&quot;&quot;N_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot; == 1)*1 + ($&quot;&quot;&quot;+&quot;&quot;&quot;N_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot; > 1)*$&quot;&quot;&quot;+&quot;&quot;&quot;N_IN_GROUP$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; />

	&lt;LV id=&quot;GROUP_IN_LINE&quot; formula=&quot;($&quot;&quot;&quot;+&quot;&quot;&quot;N_IN_GROUP$&quot;&quot;&quot;+&quot;&quot;&quot; == 1)*($&quot;&quot;&quot;+&quot;&quot;&quot;GROUP_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot;+1) + ($&quot;&quot;&quot;+&quot;&quot;&quot;N_IN_GROUP$&quot;&quot;&quot;+&quot;&quot;&quot; != 1)*$&quot;&quot;&quot;+&quot;&quot;&quot;GROUP_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; />
	&lt;LV id=&quot;GROUP_IN_LINE&quot; formula=&quot;($&quot;&quot;&quot;+&quot;&quot;&quot;N_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot; == 1)*(1) + ($&quot;&quot;&quot;+&quot;&quot;&quot;N_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot; > 1)*$&quot;&quot;&quot;+&quot;&quot;&quot;GROUP_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; />

	&lt;LV id=&quot;IS_LAST_GROUP_IN_LINE&quot; formula=&quot;($&quot;&quot;&quot;+&quot;&quot;&quot;GROUP_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot; == $&quot;&quot;&quot;+&quot;&quot;&quot;GROUPS_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot;)&quot; />
&lt;/TEMPLATE>
&lt;R count=&quot;($&quot;&quot;&quot;+&quot;&quot;&quot;TOTAL_CONTROLS_COUNT$&quot;&quot;&quot;+&quot;&quot;&quot; > 0)&quot; index_name=&quot;_none11&quot;>
	&lt;LAYER_STACK h_margin=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;BLOCK_H_MARGIN$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; v_offset='$&quot;&quot;&quot;+&quot;&quot;&quot;OVERALL_V_OFFSET$&quot;&quot;&quot;+&quot;&quot;&quot;'>
		&lt;_SVG_BG color=&quot;#00DD00&quot; />


		&lt;R count=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;GROUP_BY$&quot;&quot;&quot;+&quot;&quot;&quot; > 0&quot;>

			&lt;LV id=&quot;ITEMS_IN_LAST_LINE&quot; formula=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;TOTAL_CONTROLS_COUNT$&quot;&quot;&quot;+&quot;&quot;&quot; - $&quot;&quot;&quot;+&quot;&quot;&quot;ITEMS_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot;*($&quot;&quot;&quot;+&quot;&quot;&quot;LINES_COUNT$&quot;&quot;&quot;+&quot;&quot;&quot;-1)&quot; />
			&lt;LV id=&quot;GROUPS_IN_LAST_LINE&quot; formula=&quot;ceil($&quot;&quot;&quot;+&quot;&quot;&quot;ITEMS_IN_LAST_LINE$&quot;&quot;&quot;+&quot;&quot;&quot;/$&quot;&quot;&quot;+&quot;&quot;&quot;GROUP_BY$&quot;&quot;&quot;+&quot;&quot;&quot;)&quot; />

			&lt;LV id=&quot;G_ITEM_W&quot; formula=&quot;($&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_WIDTH$&quot;&quot;&quot;+&quot;&quot;&quot;+$&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_H_MARGIN$&quot;&quot;&quot;+&quot;&quot;&quot;*2)&quot; />
			&lt;LV id=&quot;G_ITEM_H&quot; formula=&quot;($&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_HEIGHT$&quot;&quot;&quot;+&quot;&quot;&quot;+$&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_V_MARGIN$&quot;&quot;&quot;+&quot;&quot;&quot;*2)&quot; />
			&lt;LV id=&quot;GROUP_HEIGHT&quot; formula=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;G_ITEM_H$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; />
			&lt;LV id=&quot;GROUP_WIDTH&quot; formula=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;G_ITEM_W$&quot;&quot;&quot;+&quot;&quot;&quot;*$&quot;&quot;&quot;+&quot;&quot;&quot;GROUP_BY$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; />
			&lt;LV id=&quot;LAST_GROUP_WIDTH&quot; formula=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;G_ITEM_W$&quot;&quot;&quot;+&quot;&quot;&quot;*$&quot;&quot;&quot;+&quot;&quot;&quot;ITEMS_IN_LAST_GROUP$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; />
			&lt;LV id=&quot;LAST_GROUP_HEIGHT&quot; formula=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;G_ITEM_H$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; />

			&lt;LV id=&quot;G_LAYOUT&quot; value=&quot;column&quot; />
			&lt;LV id=&quot;G_LAYOUT_INV&quot; value=&quot;row&quot; />
			&lt;R count=&quot;($&quot;&quot;&quot;+&quot;&quot;&quot;ORIENTATION$&quot;&quot;&quot;+&quot;&quot;&quot;>0)&quot;>
				&lt;LV id=&quot;G_LAYOUT&quot; value=&quot;row&quot; />
				&lt;LV id=&quot;G_LAYOUT_INV&quot; value=&quot;column&quot; />
				&lt;LV id=&quot;GROUP_HEIGHT&quot; formula=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;G_ITEM_H$&quot;&quot;&quot;+&quot;&quot;&quot;*$&quot;&quot;&quot;+&quot;&quot;&quot;GROUP_BY$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; />
				&lt;LV id=&quot;GROUP_WIDTH&quot; formula=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;G_ITEM_W$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; />
				&lt;LV id=&quot;LAST_GROUP_WIDTH&quot; formula=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;G_ITEM_W$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; />
				&lt;LV id=&quot;LAST_GROUP_HEIGHT&quot; formula=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;G_ITEM_H$&quot;&quot;&quot;+&quot;&quot;&quot;*$&quot;&quot;&quot;+&quot;&quot;&quot;ITEMS_IN_LAST_GROUP$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; />
			&lt;/R>

			&lt;CELL width=&quot;100%&quot; height=&quot;100%&quot; id=&quot;groups_cell&quot; layout_type=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;G_LAYOUT$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; internal_v_align=&quot;top&quot; internal_h_align=&quot;left&quot;>
				&lt;REPEAT count=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;LINES_COUNT$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; index_name=&quot;line_index&quot;>
					&lt;LV id=&quot;DISPLAY_GROUP&quot; value=&quot;true&quot; />

					&lt;CELL layout_type=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;G_LAYOUT_INV$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; h_align=&quot;left&quot; v_align=&quot;top&quot;>
				  &lt;REPEAT count=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;GROUPS_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot;-($&quot;&quot;&quot;+&quot;&quot;&quot;ITEMS_IN_LAST_GROUP$&quot;&quot;&quot;+&quot;&quot;&quot; != 0)&quot; index_name=&quot;group_index&quot;>

				  	&lt;R count=&quot;($&quot;&quot;&quot;+&quot;&quot;&quot;line_index$&quot;&quot;&quot;+&quot;&quot;&quot; == ($&quot;&quot;&quot;+&quot;&quot;&quot;LINES_COUNT$&quot;&quot;&quot;+&quot;&quot;&quot;-1))*($&quot;&quot;&quot;+&quot;&quot;&quot;group_index$&quot;&quot;&quot;+&quot;&quot;&quot;>($&quot;&quot;&quot;+&quot;&quot;&quot;GROUPS_IN_LAST_LINE$&quot;&quot;&quot;+&quot;&quot;&quot;-1))&quot;>
				  		&lt;LV id=&quot;DISPLAY_GROUP&quot; value=&quot;false&quot; />
				  	&lt;/R>
				    &lt;CELL width=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;GROUP_WIDTH$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; height=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;GROUP_HEIGHT$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; v_align=&quot;top&quot; h_margin=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;GROUP_H_MARGIN$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; v_margin=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;GROUP_V_MARGIN$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; display=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;DISPLAY_GROUP$&quot;&quot;&quot;+&quot;&quot;&quot;&quot;>
				      &lt;LM_AUTO_GROUP />
				    &lt;/CELL>
				  &lt;/REPEAT>
				  &lt;REPEAT count=&quot;($&quot;&quot;&quot;+&quot;&quot;&quot;ITEMS_IN_LAST_GROUP$&quot;&quot;&quot;+&quot;&quot;&quot; != 0)&quot;>

				  	&lt;R count=&quot;($&quot;&quot;&quot;+&quot;&quot;&quot;line_index$&quot;&quot;&quot;+&quot;&quot;&quot; == ($&quot;&quot;&quot;+&quot;&quot;&quot;LINES_COUNT$&quot;&quot;&quot;+&quot;&quot;&quot;-1))*($&quot;&quot;&quot;+&quot;&quot;&quot;GROUPS_IN_LAST_LINE$&quot;&quot;&quot;+&quot;&quot;&quot;&amp;lt;$&quot;&quot;&quot;+&quot;&quot;&quot;GROUPS_IN_LINE$&quot;&quot;&quot;+&quot;&quot;&quot;)&quot;>
				  		&lt;LV id=&quot;DISPLAY_GROUP&quot; value=&quot;false&quot; />
				  	&lt;/R>
						&lt;CELL width=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;LAST_GROUP_WIDTH$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; height=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;LAST_GROUP_HEIGHT$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; v_align=&quot;top&quot; h_margin=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;GROUP_H_MARGIN$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; v_margin=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;GROUP_V_MARGIN$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; display=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;DISPLAY_GROUP$&quot;&quot;&quot;+&quot;&quot;&quot;&quot;>
				      &lt;LM_AUTO_GROUP />
				    &lt;/CELL>
				  &lt;/REPEAT>
					&lt;/CELL>
				 &lt;/REPEAT>
			&lt;/CELL>
		&lt;/R>


		&lt;VAR id=&quot;CONTROLS_COUNT_FEEDBACK&quot; value=&quot;&quot; />

		&lt;CELL layout_type=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;A_LAYOUT_TYPE$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; h_align=&quot;center&quot; internal_v_align=&quot;top&quot; internal_h_align=&quot;left&quot; reflow=&quot;true&quot; width=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;AREA_WIDTH$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; height=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;AREA_HEIGHT$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; text_color=&quot;#text_color#&quot;>

			&lt;VAR id=&quot;N_IN_LINE&quot; formula=&quot;1&quot; />
			&lt;VAR id=&quot;N_IN_GROUP&quot; formula=&quot;1&quot; />
			&lt;VAR id=&quot;GROUP_IN_LINE&quot; formula=&quot;1&quot; />
			&lt;VAR id=&quot;IS_LAST_GROUP_IN_LINE&quot; formula=&quot;0&quot; />
			&lt;VAR id=&quot;OFFSET_IN_GROUP&quot; formula=&quot;0&quot; />
			&lt;VAR id=&quot;ITEM_H_OFFSET&quot; formula=&quot;0&quot; />
			&lt;VAR id=&quot;ITEM_V_OFFSET&quot; formula=&quot;0&quot; />
			&lt;VAR id=&quot;LINE_NO&quot; formula=&quot;0&quot; />
			&lt;VAR id=&quot;ITEM_GUI_X&quot; formula=&quot;0&quot; />
			&lt;VAR id=&quot;ITEM_GUI_Y&quot; formula=&quot;0&quot; />


			&lt;REPEAT count=&quot;#in_params_count# > 0&quot; index_name=&quot;__none0&quot;>
					&lt;REPEAT count=&quot;#in_params_count#&quot;>
						&lt;LAYER_STACK  h_margin=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_H_MARGIN$&quot;&quot;&quot;+&quot;&quot;&quot;&quot;>

							&lt;CALC_CONTROL_POS />
							&lt;CELL width=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_WIDTH$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; v_margin=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_V_MARGIN$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; height=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_HEIGHT_WITH_MARGING$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; h_align=&quot;left&quot; h_offset=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_H_OFFSET$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; v_offset=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_V_OFFSET$&quot;&quot;&quot;+&quot;&quot;&quot;&quot;>
								&lt;CELL width=&quot;100%&quot; v_offset='$&quot;&quot;&quot;+&quot;&quot;&quot;TXNAME_V_OFFSET$&quot;&quot;&quot;+&quot;&quot;&quot;'>&lt;PARAM_TEXT param_id=&quot;custom_param$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; content=&quot;{name}&quot; fit_text=&quot;abbreviate&quot; font_weight=&quot;bold&quot; v_offset='0' width=&quot;100%&quot;>&lt;PARAM_TOOLTIP param_id='custom_param$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;' content=&quot;{name}&quot; />&lt;/PARAM_TEXT>&lt;/CELL>
								&lt;LS flex=&quot;1&quot;>
									&lt;LM_AUTO_KNOB param_id=&quot;custom_param$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; id=&quot;input_control$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; gui_x=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_GUI_X$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; gui_y=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_GUI_Y$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; gui_xy_centered=&quot;1&quot; />
									&lt;LM_AUTO_SWITCH param_id=&quot;custom_param$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; id=&quot;input_control_switch$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; gui_x=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_GUI_X$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; gui_y=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_GUI_Y$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; gui_xy_centered=&quot;1&quot;  />
								&lt;/LS>
								&lt;CELL v_offset='$&quot;&quot;&quot;+&quot;&quot;&quot;TXVALUE_V_OFFSET$&quot;&quot;&quot;+&quot;&quot;&quot;' width=&quot;100%&quot; >&lt;PARAM_TEXT width=&quot;100%&quot; param_id=&quot;custom_param$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; cursor=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;CUR_SIZE_V$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; font_size=&quot;-1&quot;>&lt;IPMB param_id=&quot;custom_param$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; visible=&quot;false&quot; id=&quot;input_control_menu$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; reverse_mouse_wheel=&quot;false&quot; />&lt;/PARAM_TEXT>&lt;/CELL>
							&lt;/CELL>
						&lt;/LAYER_STACK>
					&lt;/REPEAT>
			&lt;/REPEAT>


			&lt;REPEAT count=&quot;#out_params_count# > 0&quot; index_name=&quot;__none1&quot;>
					&lt;REPEAT count=&quot;#out_params_count#&quot;>
						&lt;LAYER_STACK  h_margin=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_H_MARGIN$&quot;&quot;&quot;+&quot;&quot;&quot;&quot;>

							&lt;CALC_CONTROL_POS />
							&lt;CELL width=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_WIDTH$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; v_margin=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_V_MARGIN$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; height=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_HEIGHT_WITH_MARGING$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; h_align=&quot;left&quot; h_offset=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_H_OFFSET$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; v_offset=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_V_OFFSET$&quot;&quot;&quot;+&quot;&quot;&quot;&quot;>
								&lt;CELL width=&quot;100%&quot; v_offset='$&quot;&quot;&quot;+&quot;&quot;&quot;TXNAME_V_OFFSET$&quot;&quot;&quot;+&quot;&quot;&quot;'>&lt;PARAM_TEXT param_id=&quot;custom_out_param$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; content=&quot;{name}&quot; fit_text=&quot;abbreviate&quot; font_weight=&quot;bold&quot; v_offset='0' width=&quot;100%&quot;>&lt;PARAM_TOOLTIP param_id='custom_out_param$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;' content=&quot;{name}&quot; />&lt;/PARAM_TEXT>&lt;/CELL>
								&lt;CELL flex=&quot;1&quot;>&lt;LM_AUTO_METER param_id=&quot;custom_out_param$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; gui_x=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_GUI_X$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; gui_y=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;ITEM_GUI_Y$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; gui_xy_centered=&quot;1&quot; id=&quot;output_control$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; />&lt;/CELL>
								&lt;CELL width=&quot;100%&quot; v_offset='$&quot;&quot;&quot;+&quot;&quot;&quot;TXVALUE_V_OFFSET$&quot;&quot;&quot;+&quot;&quot;&quot;'>&lt;PARAM_TEXT width=&quot;100%&quot; param_id=&quot;custom_out_param$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; cursor=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;CUR_SIZE_V$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; font_size=&quot;-1&quot; />&lt;/CELL>
							&lt;/CELL>
						&lt;/LAYER_STACK>
					&lt;/REPEAT>
			&lt;/REPEAT>
		&lt;/CELL>
	&lt;/LAYER_STACK>



	&lt;REPEAT count=&quot;#in_params_count#&quot;>
	  &lt;PARAM_LINK from=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;script_input_param$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;_steps$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; to=&quot;input_control$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;.positions_count&quot;/>
	  &lt;PARAM_LINK from=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;script_input_param$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;_steps$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; to=&quot;input_control_menu$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;.positions_count&quot;/>
	  &lt;PARAM_LINK from=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;script_input_param$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;_steps$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; to=&quot;input_control$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;.visible&quot; formula=&quot;x!=2&quot;/>
	  &lt;PARAM_LINK from=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;script_input_param$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;_steps$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; to=&quot;input_control_switch$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;.visible&quot; formula=&quot;x==2&quot;/>
	  &lt;PARAM_LINK from=&quot;$&quot;&quot;&quot;+&quot;&quot;&quot;script_input_param$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;_steps$&quot;&quot;&quot;+&quot;&quot;&quot;&quot; to=&quot;input_control_menu$&quot;&quot;&quot;+&quot;&quot;&quot;index$&quot;&quot;&quot;+&quot;&quot;&quot;.visible&quot; formula=&quot;(x>=2)and(x&amp;lt;=50)&quot;/>

	&lt;/REPEAT>







&lt;/R>
&lt;ONLOAD script=&quot;script_kuiml_loaded_ok = 1;&quot; requires=&quot;script_kuiml_loaded_ok&quot; />
&lt;/SKIN>&quot;&quot;&quot;;

void reloadBody() {
    file f;

    _a_log_unusual_text = false; 

    string auto_layout_s = a_body_auto_layout;
    string auto_layout_theme_s = a_body_auto_layout_theme;

    string body_content = &quot;&quot;;
    string kuiml_file_path;

    
    array&lt;string> al = auto_layout_s.split(&quot;;&quot;);
    array&lt;string> alt = auto_layout_theme_s.split(&quot;;&quot;);
    

    string custom_kuiml_file_path = $script_gui_path$;
    if (custom_kuiml_file_path.isEmpty()) {
      custom_kuiml_file_path = &quot;&quot;&quot;$SKINS_DIR$custom.kuiml&quot;&quot;&quot;;
      confirmPath(custom_kuiml_file_path);
    }

    
    if (f.open(custom_kuiml_file_path, &quot;r&quot;) >= 0) {
      a_custom_kuiml_available = 1;
    } else {
      a_custom_kuiml_available = 0;
    }
    f.close();

    
    if (is_first_reloadBody) {
      if (al[AL_PRIORITY] == &quot;1&quot;) {
        a_ignore_custom_kuiml = 1;
      }
      is_first_reloadBody = false;
    }

    
    if (skin_scanner_enabled > 0.5) {
      kuiml_file_path = skin_scanner_main_file;
      confirmPath(kuiml_file_path);
      if (f.open(kuiml_file_path, &quot;r&quot;) >= 0) {
        body_content = f.readString(f.getSize());

        f.close();
      }

    } else 
    if (controls_gen_enabled > 0.5) {
      kuiml_file_path = controls_gen_main_file;
      confirmPath(kuiml_file_path);
      if (f.open(kuiml_file_path, &quot;r&quot;) >= 0) {
        body_content = f.readString(f.getSize());

        f.close();
      }

      
    } else 
    if ((a_ignore_custom_kuiml &lt; 0.5) and (a_custom_kuiml_available > 0.5)) {
        kuiml_file_path = custom_kuiml_file_path;
        confirmPath(kuiml_file_path);
        if (f.open(kuiml_file_path, &quot;r&quot;) >= 0) {
          body_content = f.readString(f.getSize());
          f.close();
        }


    } else {
      
      kuiml_file_path = &quot;$LM_DIR$$LAYOUTS_SUBDIR$/&quot; + al[AL_FILENAME];
      confirmPath(kuiml_file_path);
      
      string content;
      if (f.open(kuiml_file_path, &quot;r&quot;) >= 0) {
        content = f.readString(f.getSize());
      }

      
      if (preloadedBodyContent.length>0) {
        content = preloadedBodyContent;
      }
          

      if (content.length > 0) {

        
        string value = int($script_input_params_count$);
        replaceString(content, &quot;#in_params_count#&quot;, value);
        value = int($script_output_params_count$);
        replaceString(content, &quot;#out_params_count#&quot;, value);
        value = int($script_input_strings_count$);
        replaceString(content, &quot;#in_strings_count#&quot;, value);
        value = int($script_output_strings_count$);
        replaceString(content, &quot;#out_strings_count#&quot;, value);

        
        replaceString(content, &quot;#group_stroke_color#&quot;, alt[AL_GROUP_LINE_COLOR]);
        replaceString(content, &quot;#group_stroke_opacity#&quot;, alt[AL_GROUP_LINE_COLOROP]);
        replaceString(content, &quot;#group_stroke_width#&quot;, alt[AL_GROUP_LINE_WIDTH]);
        replaceString(content, &quot;#group_fill_color#&quot;, alt[AL_GROUP_FILL_COLOR]);
        replaceString(content, &quot;#group_fill_opacity#&quot;, alt[AL_GROUP_FILL_COLOROP]);
        replaceString(content, &quot;#group_round#&quot;, alt[AL_GROUP_ROUND]);
        replaceString(content, &quot;#text_color#&quot;, alt[AL_TEXT_COLOR]);

        
        if (al[AL_FILENAME] != &quot;text_layout.kuiml&quot;) {
          replaceString(content, &quot;#orientation#&quot;, al[AL_ORIENTATION]);
          replaceString(content, &quot;#max_in_line#&quot;, al[AL_CONTROLSINLINE]);
          replaceString(content, &quot;#group_by#&quot;, al[AL_GROUPBY]);

          replaceString(content, &quot;#knob_name#&quot;, alt[AL_KNOB]);
          replaceString(content, &quot;#switch_name#&quot;, alt[AL_SWITCH]);
          replaceString(content, &quot;#meter_name#&quot;, alt[AL_METER]);

          replaceString(content, &quot;#item_width#&quot;, alt[AL_ITEM_WIDTH]);
          replaceString(content, &quot;#item_height#&quot;, alt[AL_ITEM_HEIGHT]);
          replaceString(content, &quot;#item_h_margin#&quot;, alt[AL_ITEM_H_MARGIN]);
          replaceString(content, &quot;#item_v_margin#&quot;, alt[AL_ITEM_V_MARGIN]);

          replaceString(content, &quot;#group_h_margin#&quot;, alt[AL_GROUP_H_MARGIN]);
          replaceString(content, &quot;#group_v_margin#&quot;, alt[AL_GROUP_V_MARGIN]);
          replaceString(content, &quot;#group_converge#&quot;, alt[AL_GROUP_CONVERGE]);
          
          replaceString(content, &quot;#textname_v_offset#&quot;, alt[AL_NAME_V_OFFSET]);
          replaceString(content, &quot;#textvalue_v_offset#&quot;, alt[AL_VALUE_V_OFFSET]);

          replaceString(content, &quot;#rc_pad#&quot;, alt[AL_RC_PAD]);
          replaceString(content, &quot;#extras#&quot;, alt[AL_EXTRAS]);

          replaceString(content, &quot;#knob_scaling#&quot;, alt[AL_KNOB_SCALING]);
          replaceString(content, &quot;#switch_scaling#&quot;, alt[AL_SWITCH_SCALING]);
          replaceString(content, &quot;#meter_scaling#&quot;, alt[AL_METER_SCALING]);

          
          array&lt;string> layout_params = { 
            &quot;&quot;, 
            reloadBody_getRCColorsStrings(alt, AL_KNOB_C1), 
            reloadBody_getRCColorsStrings(alt, AL_METER_C1), 
            reloadBody_getRCColorsStrings(alt, AL_SWITCH_C1) 
          };

          
          array&lt;string>@ pieces=alt[AL_EXTRAS].split(&quot;,&quot;);
          if(@pieces!=null)
          {
            if(pieces.length>0)
              for(uint i=0;i&lt;pieces.length;i++) {
                  string sd = &quot;&quot;;
                  int phn = AL_PH_GENERAL;
                  if (pieces[i].substr(0,5) == &quot;knob.&quot;) {
                    sd = pieces[i].substr(5,-1); 
                    phn = AL_PH_KNOB;
                  }
                  if (pieces[i].substr(0,6) == &quot;meter.&quot;) {
                    sd = pieces[i].substr(6,-1); 
                    phn = AL_PH_METER;
                  }
                  if (pieces[i].substr(0,7) == &quot;switch.&quot;) {
                    sd = pieces[i].substr(7,-1); 
                    phn = AL_PH_SWITCH;
                  }

                  int eqpos = sd.findFirst(&quot;=&quot;);
                  if (eqpos > 0) {
                    layout_params[phn] += &quot; &quot;+sd.substr(0,eqpos)+&quot;=\&quot;&quot;+sd.substr(eqpos+1,-1)+&quot;\&quot;&quot;;
                  }
                  
              }
          }

          
          
          
          
          
          
          replaceString(content, &quot;#knob_params_placeholder#&quot;, layout_params[AL_PH_KNOB]);
          replaceString(content, &quot;#meter_params_placeholder#&quot;, layout_params[AL_PH_METER]);
          replaceString(content, &quot;#switch_params_placeholder#&quot;, layout_params[AL_PH_SWITCH]);
        }

        body_content = content;
        f.close();
      }
    }

    
   
    
    
    
    int pos = body_content.findFirst(&quot;&lt;SKIN&quot;);
    if (pos>-1) {
      int pos2 = body_content.findFirst(&quot;>&quot;, pos);
      string subskin_attrs = body_content.substr(pos+5, pos2-pos-5);
      body_content.erase(pos, 5); 

      
      string var_kuiml_dir = getDirForFile(kuiml_file_path);
      string var_kuiml_filename = getBaseFilename(kuiml_file_path);
      string var_kuiml_filename_no_ext = var_kuiml_filename.substr(0, var_kuiml_filename.findLast(&quot;.&quot;));

      
      string var_script_data_path = &quot;&quot;&quot;$SCRIPT_DATA_PATH$&quot;&quot;&quot;; 
      confirmPath(var_script_data_path);

      if (var_script_data_path.findFirst(&quot;SCRIPT_DATA_PATH$&quot;)>-1) {
        string skin_file_path = $script_file_path$;
        if (skin_file_path.length > 0) {
          confirmPath(skin_file_path);
          var_script_data_path = getDirForFile(skin_file_path)+&quot;&quot;+getBaseFilename(skin_file_path,false)+&quot;-data&quot;;
        } else {
          var_script_data_path = &quot;&quot;;
        }
      }
      
      
      string resizeable_addon = &quot;&quot;;
      if (lm_skin_resizeable > 0.5) resizeable_addon = &quot; width=\&quot;100%\&quot; height=\&quot;100%\&quot;&quot;;

      
      string body_text_color = (&quot;&quot;+a_body_font).split(&quot;;&quot;)[4];
      int body_text_color_avg = ((parseInt(body_text_color.substr(1,2),16) + parseInt(body_text_color.substr(3,2),16) +parseInt(body_text_color.substr(5,2),16)) / 3);
      string body_text_color_inv = &quot;#FFFFFF&quot;;
      if (body_text_color_avg > 180) body_text_color_inv = &quot;#000000&quot;;

      
      string s = &quot;&lt;SKIN&quot;+subskin_attrs+&quot;>&lt;VAR id='SCRIPT_DATA_PATH' value=\&quot;&quot;+var_script_data_path+&quot;\&quot; />&lt;VAR id='KUIML_DIR' value=\&quot;&quot;+var_kuiml_dir+&quot;\&quot; />&lt;VAR id='KUIML_FILENAME' value=\&quot;&quot;+var_kuiml_filename+&quot;\&quot; />&lt;VAR id='KUIML_FILENAME_NO_EXT' value=\&quot;&quot;+var_kuiml_filename_no_ext+&quot;\&quot; />&lt;VAR id='KUIML_TIME' value='&quot;+getHMS()+&quot;' />&lt;VAR id='BODY_TEXT_COLOR_INV' value='&quot;+body_text_color_inv+&quot;' />&lt;COMMON_SCRIPTS n='20000' p='BODY' include_lmr_scripts=\&quot;$BODY_INCLUDE_LMR_SCRIPTS$\&quot; />&lt;PARSE_BODY_FONT data='&quot;+a_body_font+&quot;' />&lt;CELL&quot;+resizeable_addon+&quot; font_size=\&quot;$BODY_FONT_SIZE$\&quot; font_face=\&quot;$BODY_FONT_FACE$\&quot; font_weight=\&quot;$BODY_FONT_WEIGHT$\&quot; font_style=\&quot;$BODY_FONT_STYLE$\&quot; font_quality=\&quot;$BODY_FONT_QUALITY$\&quot; text_color=\&quot;$BODY_TEXT_COLOR$\&quot;>&quot;;

      s += &quot;&lt;CELL&quot;;


      body_content.insert(pos, s);
      replaceString(body_content, &quot;&lt;/SKIN>&quot;, &quot;&lt;/CELL>&lt;/CELL>&lt;ONLOAD script=\&quot;script_kuiml_loaded_ok = 1;\&quot; requires=\&quot;script_kuiml_loaded_ok\&quot; />&lt;/SKIN>&quot;);
    } else {
      if (kuiml_file_path != &quot;&quot;) {
        body_content = &quot;&lt;SKIN>&lt;TEXT value=\&quot;Inner-kuiml file not found\&quot; />&lt;TEXT value=\&quot;&quot;+escape(kuiml_file_path)+&quot;\&quot; />&lt;ONLOAD script=\&quot;script_kuiml_loaded_ok = 0.1;\&quot; requires=\&quot;script_kuiml_loaded_ok\&quot; />&lt;/SKIN>&quot;;
      }
    }

    

    
    if (body_content != (&quot;&quot;+a_body_innerKUIML)) {
      script_kuiml_loaded_ok = 0; 
      a_body_innerKUIML = body_content;  
    }

    /* NO_EXPORT */
    bool is_exported = $IS_EXPORTED$;
    if (!is_exported) {
      
      autoReload_loadScriptContentToCache();
      auto_reload_old_kuiml_content = auto_reload_new_kuiml_content;
      auto_reload_old_cxx_content = auto_reload_new_cxx_content;
      autoReload_getFileMTimes();
      auto_reload_old_filemtimes = auto_reload_new_filemtimes;
    }
    
    
    a_status_invalidate++;
    a_toolbar_invalidate++;

    /* END_NO_EXPORT */
}


string reloadBody_getRCColorsStrings(array&lt;string> alt, int i){
  string s;
  for (int n=1;n&lt;=5;n++) {
    if (alt[i]!=&quot;&quot;) s += &quot; color&quot;+n+&quot;=\&quot;&quot;+alt[i]+&quot;\&quot;&quot;;
    if (alt[i+1]!=&quot;&quot;) s +=&quot; opacity&quot;+n+&quot;=\&quot;&quot;+alt[i+1]+&quot;\&quot;&quot;; 
    i+=2;
  }
  return s;
}

/* NO_EXPORT */
void reloadStatusbar(){
  string resizeable_addon = &quot;;CORNER_RESIZER_SPACE&quot;; if (lm_skin_resizeable &lt; 0.5)  resizeable_addon = &quot;&quot;;

  string s = &quot;&lt;COMMON_SCRIPTS n='7000' p='SB' />&lt;PARSE_STATUS_PARAMS content=\&quot;&quot;+a_status_content_params+&quot;\&quot; layout=\&quot;&quot;+a_status_layout_params+&quot;\&quot; flex_cells=\&quot;&quot;+a_status_flex_cells+&quot;\&quot; />&lt;CELL width='100%' layout_type=\&quot;row\&quot; font_face=\&quot;$SB_FONT_FACE$\&quot; font_size=\&quot;$SB_FONT_SIZE$\&quot; font_weight=\&quot;$SB_FONT_WEIGHT$\&quot; font_style=\&quot;$SB_FONT_STYLE$\&quot; font_quality=\&quot;$SB_FONT_QUALITY$\&quot; text_color=\&quot;$SB_TEXT_COLOR$\&quot; spacing=\&quot;$SB_CELLS_SPACING$\&quot;>&lt;SB_LAYOUT_ITEMS h_align=\&quot;left\&quot; items=\&quot;&quot;+a_status_items_left+&quot;\&quot; spacing=\&quot;$SB_ITEMS_SPACING$\&quot; />&lt;SB_LAYOUT_ITEMS h_align=\&quot;center\&quot; items=\&quot;&quot;+a_status_items_center+&quot;\&quot; spacing=\&quot;$SB_ITEMS_SPACING$\&quot; />&lt;SB_LAYOUT_ITEMS h_align=\&quot;right\&quot; items=\&quot;&quot;+a_status_items_right+resizeable_addon+&quot;\&quot; spacing=\&quot;$SB_ITEMS_SPACING$\&quot; />&lt;/CELL>&quot;;
  a_status_innerKUIML = &quot;&lt;SKIN width='100%'>&quot;+s+&quot;&lt;/SKIN>&quot;;
}



/* **************************** */
/* AUTO-RELOAD SCRIPT FUNCTIONS */
/* **************************** */

string auto_reload_old_kuiml_content, auto_reload_new_kuiml_content;
string auto_reload_old_cxx_content, auto_reload_new_cxx_content;
string auto_reload_old_filemtimes, auto_reload_new_filemtimes;
string test_out;
string auto_reload_old_params_count = &quot;&quot;, auto_reload_new_params_count = &quot;&quot;;
int error_message_window_state = 0; 

/* Runs when auto-reload timer is active */
const int autoreload_maxcontentsize = 1000000;
void autoReload_onTimer(){

  bool do_filemtime_check = true;
  bool do_full_files_reload = false;

  
  if (script_kuiml_loaded_ok == 0) {
    if (error_message_window_state &lt; 2) { 
      do_filemtime_check = false;

      
      if (IS_WINDOWS) {
        string sysout = &quot;&quot;;
        
        system(&quot;tasklist /FI \&quot;WINDOWTITLE eq KUIML Loading Error\&quot;&quot;, sysout);
        if ((sysout.findFirst(&quot;=======&quot;) > 0) ) {
          
          error_message_window_state = 1;
          
        } else {
          
          
          if (error_message_window_state == 1) {
            
            error_message_window_state = 2;
          }
        } 
      }
    }
  } else {
    
    error_message_window_state = 0;
  }

  
  
  
  if (do_filemtime_check) {
    do_full_files_reload = true;
    
    
 	
    
    int content_len = auto_reload_old_cxx_content.length + auto_reload_old_kuiml_content.length;
    
    
    
    
    
    
    
    

    
    

    

    

    
    
    
    
    
  }
  

  

  
  if (do_full_files_reload){
    autoReload_loadScriptContentToCache();
    bool reload_cxx = (auto_reload_new_cxx_content != auto_reload_old_cxx_content);
    bool reload_kuiml = (auto_reload_new_kuiml_content != auto_reload_old_kuiml_content);

    
    auto_reload_new_params_count = &quot;&quot; + $script_input_params_count$ + &quot; &quot; + $script_output_params_count$ + &quot; &quot; + $script_input_strings_count$ + &quot; &quot; + $script_output_strings_count$;
    if ((auto_reload_old_params_count.length > 0) and (auto_reload_old_params_count != auto_reload_new_params_count)) {
      reload_kuiml = true;
    }
    auto_reload_old_params_count = auto_reload_new_params_count;

    if (reload_cxx) {
      string gui_path = $script_gui_path$;

      

      if (gui_path.length == 0) {
        
        ReloadScript();
      } else {
        
        $reload_script$ = abs($reload_script$ - 1);
      }
      auto_reload_old_cxx_content = auto_reload_new_cxx_content;
    }
    if (reload_kuiml) {
      reloadBody();
      auto_reload_old_kuiml_content = auto_reload_new_kuiml_content;
    }
  }
}

array&lt;string> auto_reload_cxx_files_list;
array&lt;string> auto_reload_kuiml_files_list;


void autoReload_loadScriptContentToCache(){
  file f;
  string cxx_file = $script_file_path$;
  string kuiml_file = $script_gui_path$;

  auto_reload_cxx_files_list.resize(0);
  auto_reload_kuiml_files_list.resize(0);
  
  if (skin_scanner_enabled > 0.5) kuiml_file = skin_scanner_main_file;
  if (controls_gen_enabled > 0.5) kuiml_file = controls_gen_main_file;

  
  auto_reload_new_cxx_content = &quot;&quot;;
  
  confirmPath(cxx_file);
  autoReload_getCXXIncludesRecursive(cxx_file);

  
  auto_reload_new_kuiml_content = &quot;&quot;;
  if (kuiml_file.length > 0) {
    confirmPath(kuiml_file);
    string kuiml_dir = getDirForFile(kuiml_file);
    autoReload_getKUIMLIncludesRecursive(kuiml_file, kuiml_dir);
  }
}
 

void autoReload_getKUIMLIncludesRecursive(string filename, string kuiml_dir, int depth = 0, bool dont_follow = false) {
  if (depth > 10) return;
  if (filename.length == 0) return;

  file f;
  filesystem fs;

  string file_content = &quot;&quot;;

  if (f.open(filename, &quot;r&quot;) >= 0) {
    
    
    auto_reload_kuiml_files_list.insertLast(filename);
    int filesize = f.getSize();
    if (filesize &lt; 100000) file_content = f.readString(filesize);
    f.close();
  }
  

  if (file_content.length > 0) {
    auto_reload_new_kuiml_content += file_content;

    
    string base_filename = getBaseFilename(filename, false);
    string script_data_path = kuiml_dir+base_filename+&quot;-data&quot;;
    int lastpos = 0, iterations = 0, max_iterations = 10;
    do {
      lastpos = findFirstAny(file_content, {&quot;&lt;INCLUDE &quot;, &quot;&lt;INCLUDE_ONCE &quot;, &quot;&lt;INC &quot;, &quot;&lt;SCRIPT &quot;}, lastpos);

     
      if (lastpos >= 0) {

        string new_filename = strTill(file_content.substr(lastpos), &quot;/>&quot;);
        bool is_script = (new_filename.findFirst(&quot;SCRIPT&quot;) >-1);
        new_filename = strFrom(new_filename, {&quot;src&quot;, &quot;file&quot;});
        new_filename = strFrom(new_filename, {&quot;\&quot;&quot;, &quot;'&quot;}, 1);
        new_filename = strTill(new_filename, {&quot;\&quot;&quot;, &quot;'&quot;});
        
        if (new_filename.length > 0) {
          replaceString(new_filename, &quot;$&quot;+&quot;KUIML_DIR$&quot;, kuiml_dir);
          replaceString(new_filename, &quot;$&quot;+&quot;EXTENSIONS_DIR$&quot;, &quot;$EXTENSIONS_DIR$&quot;);
          replaceString(new_filename, &quot;$&quot;+&quot;KUIML_FILENAME_NO_EXT$&quot;, base_filename);
          replaceString(new_filename, &quot;$&quot;+&quot;LM_DIR&quot;+&quot;$&quot;, &quot;$LM_DIR$&quot;);
          replaceString(new_filename, &quot;$&quot;+&quot;EDITORS_SUBDIR&quot;+&quot;$&quot;, &quot;$EDITORS_SUBDIR$&quot;);
          replaceString(new_filename, &quot;$&quot;+&quot;SCRIPT_DATA_PATH&quot;+&quot;$&quot;, script_data_path);

          if ((new_filename.findFirst(&quot;_DIR_$&quot;) > 0)) {
            string file_dir = getDirForFile(filename);
            replaceString(new_filename, &quot;$&quot;+&quot;_DIR_$&quot;, file_dir);
          }
          confirmPath(new_filename);

          
          
          if (new_filename.length > 0) autoReload_getKUIMLIncludesRecursive(new_filename, kuiml_dir, depth++, is_script);
        }
        lastpos += 10;
      }
      iterations++;
    } while(( lastpos > 0 ) and (iterations &lt; max_iterations));
  }
}


void autoReload_getCXXIncludesRecursive(string filename, int depth = 0) {

  if (depth > 10) return;
  if (filename.length == 0) return;

  file f;
  filesystem fs;
  string file_content = &quot;&quot;;

  
  bool is_binary = ((filename.findFirst(&quot;.x64&quot;) > -1) or (filename.findFirst(&quot;.x86&quot;) > -1) or (filename.findFirst(&quot;.bin&quot;) > -1)) ;

  if (f.open(filename, &quot;r&quot;) >= 0) {
    
    auto_reload_cxx_files_list.insertLast(filename);
    int filesize = f.getSize();
    int maxloadsize = autoreload_maxcontentsize;
    if (is_binary) maxloadsize = 2000000;
    if (filesize &lt; maxloadsize) file_content = f.readString(filesize);
    f.close();
  }

  if (file_content.length > 0) {
    auto_reload_new_cxx_content += file_content;

    
    if (is_binary) return;

    
    string file_dir = getDirForFile(filename);
    int lastpos = 0, iterations = 0, max_iterations = 10;
    do {
      lastpos = file_content.findFirst(&quot;#include&quot;, lastpos);
      if (lastpos >= 0) {
        string new_filename = trim(strTill(file_content.substr(lastpos+8), {&quot;\n&quot;, &quot;;&quot;}));
        replaceString(new_filename, &quot;'&quot;, &quot;&quot;);
        replaceString(new_filename, &quot;\&quot;&quot;, &quot;&quot;);
        
        lastpos += 10;
        if (new_filename.length > 0) autoReload_getCXXIncludesRecursive(file_dir+new_filename, depth++);
      } 
      iterations++;
    } while(( lastpos > 0 ) and (iterations &lt; max_iterations));
  }
}


/*
void autoReload_getFileMTimes_system(){

  string result = &quot;&quot;;

  if (IS_WINDOWS) {
    
    string command = &quot;&quot;;
    
    for (uint i=0; i&lt;auto_reload_cxx_files_list.length; i++) {
      string filename = auto_reload_cxx_files_list[i];
      string dir = &quot;\&quot;&quot;+getDirForFile(filename, false)+&quot;\&quot;&quot;;
      replaceString(dir, &quot;/&quot;, &quot;\\&quot;);
      string filebasename = &quot;\&quot;&quot;+getBaseFilename(filename)+&quot;\&quot;&quot;;
      if (command.length > 0) command += &quot; &amp;&amp; &quot;;
      command += &quot;forfiles /P &quot;+dir+&quot; /M &quot;+filebasename+&quot; /C \&quot;cmd /c echo @ftime\&quot;&quot;;
    } 

    if (command.length > 0) command += &quot; &amp;&amp; &quot;;
    command += &quot; echo kuiml &quot;;

    
    for (uint i=0; i&lt;auto_reload_kuiml_files_list.length; i++) {
      string filename = auto_reload_kuiml_files_list[i];
      string dir = &quot;\&quot;&quot;+getDirForFile(filename, false)+&quot;\&quot;&quot;;
      replaceString(dir, &quot;/&quot;, &quot;\\&quot;);
      string filebasename = &quot;\&quot;&quot;+getBaseFilename(filename)+&quot;\&quot;&quot;;
      if (command.length > 0) command += &quot; &amp;&amp; &quot;;
      command += &quot;forfiles /P &quot;+dir+&quot; /M &quot;+filebasename+&quot; /C \&quot;cmd /c echo @ftime\&quot;&quot;;
    } 

    string sysout;
    
    
    system(command, sysout);
    replaceString(sysout, &quot;\n&quot;, &quot; &quot;);
    result = cp866_cp1251(sysout);
  }

  auto_reload_new_filemtimes = result;

  
  
}
*/

/* USE WHEN getModifyDateTime will be fixed */
void autoReload_getFileMTimes(){

  string result = &quot;&quot;;
  filesystem fs;
  file f;
  datetime dt;

  if (IS_WINDOWS) {

    
    for (uint i=0; i&lt;auto_reload_cxx_files_list.length; i++) {
      string filename = auto_reload_cxx_files_list[i];
      if (f.open(filename, &quot;r&quot;) >= 0) {
        dt = fs.getModifyDateTime(filename);
        result += &quot;&quot;+dt.get_hour()+&quot;:&quot;+dt.get_minute()+&quot;:&quot;+dt.get_second() + &quot;;&quot;;
        f.close();
      }
    } 

    
    for (uint i=0; i&lt;auto_reload_kuiml_files_list.length; i++) {
      string filename = auto_reload_kuiml_files_list[i];
      if (f.open(filename, &quot;r&quot;) >= 0) {
        dt = fs.getModifyDateTime(filename);
        result += &quot;&quot;+dt.get_hour()+&quot;:&quot;+dt.get_minute()+&quot;:&quot;+dt.get_second() + &quot;;&quot;;
        f.close();
      }
    } 

  }

  auto_reload_new_filemtimes = result;

}

/* END_NO_EXPORT */" _src="$LM_DIR$$SCRIPTS_SUBDIR$/update_skin.as" preprocess="true" />
	<!-- END_NO_EXPORT_IF_STATIC -->
</DUMMY>

  <!-- Current skin settings (editable) -->
  <LOAD_FONTS files="" ignore_missing="true" />

  <VARS_TOOLBAR display="1" min_height="36" pad_h="10" pad_v="4" v_offset="0" items_left="MAINMENU;ZOOM" items_center="TITLE" items_right="SCRIPTMENU;SKINMENU" max_in_row="5;1;3" bg="0;1;0;1;3;3;;;; ;#FFFFFF;1;33 ;#FFFFFF;1;100 ;#F9F9F9;1;100 ;#E9E9E9;1;25" _auto_color="1;79;1;-2;1;-8;1;0;1;0;1;0" icons="18;#333333;1;2;2;0" title="500;50;4;0;0;0;1;; ;Georgia;+4;-;-;#333333;" presets="130;20;3;3;0;0;0; ;16;#333333;0.8;0;0 ;;;;;;;; ;Arial;-2;-;-;#333333;;0;;;0;0.5;-2;1;0;7;;;;;#291651;0.2;31.67;#555555;0.28;65;#333333;0.5;0" title_text="" title_action_num="4" title_cus_action="OpenMenuLM" title_cus_action_hint="Open plugin menu" info_link="http://bluecataudio.com" custom_items="" custom_items_names="" />

  <VARS_BODY font=";+0;-;-;#000000;" pad_h="10" pad_v="15" min_width="300" min_height="120" v_align="center" bg="1;1;-5;0;8;8;;;; ;#FFFFFF;1;28 ;#EAEAEA;1;100 ;#FFFFFF;1;10 ;#E2E2E2;1;100" shading_data="0.05;0;0;-167;434;-167;0;33;0" _auto_color="1;-8;1;61;1;-11" _static_file="/LetiMix/helpers/letimix_skin_helpers.inc" auto_layout="0;graphics_layout.kuiml;0;6;0" auto_layout_theme="101;142;10;10;;;#FFFFFF;0.4;#FFFFFF;0.2;3;5;3;10;15;35;;0;-3;;;;;;;;;;;;PNS_BLACK_STOVE_KNOB;0.75;;;#DFDFDF;0.85;;;;;;;PNS_VINTAGE_SWITCH;1;;;;;;;;;;;PNS_BLUE_LED;0.816666;#49B1F4;;;;;;;;;;" />

  <VARS_METERS display="3" input_channels="2" output_channels="2" min_width="10" min_width_single="11" pad_h="14" pad_v="17" v_offset="0" grouping="2;2;0" placement="0" box_pos="0;0;0;0;0" box="0;0;15;0;0;0;;;;;#1F1F1F;1;0;#00DD00;1;100;#692352;1;0" orientation="0" render="2;-60;0;;;0.255;60;2.188;300;4.1;2.1;0;0.9;8;;0;0;6.4;2;;;;;;;;;;;;#FFFFFF;0.9;0;#2DA6F2;0.78;0;#2ECC71;1;100;#FFFFFF;1;50;#FFFFFF;1;50;#000000;0;0;" />
  
  <VARS_STATUS display="2" min_height="28" pad_h="8" v_offset="0" bg="0;1;0;1;3;0;;;; ;#EBEBEB;1;0 ;#848484;1;100 ;#FFFFFF;1;3 ;#9E9E9E;1;100"  _auto_color="1;-40;1;9;1;-30"  content=";-2;-;-;#1D1D1D;;5;5.33;;;;15;0;0;2;;#535353;0.88;#F69F1E;0.9;#FF774E;1;#808080;0.8;|;#9B9B9B;0.53;2;27;2;0;;;;" layout="0;0;151.65;1;150" flex_cells="0;1;0" items_left="ICON;LOG_LINE" items_center="" items_right="SEPARATOR;SAMPLERATE;BLOCKSIZE" corner_resizer_space="7" custom_text="" custom_items="" custom_items_names="" />

  <VARS_DECOR display="1" opacity="1.00" toolbar="" body1="" body2="" body3="" body4="" status="" />

  <VARS_RENDER light_source_a="1;0;-24;80;650;171;0.08;#FFFFFF;;;;;;;" light_source_b="0;0;-45;34;1500;200;1.9;#FFEE99;;;;;;;" light_source_c="1;0;35;68;2000;300;0.309321;#A8FDFD;;;;;;;" ambient_intensity="0.45" ref_intensity_distance="785" camera="950;22;0;0" />
  <!-- End of current skin settings (editable) -->
  
  <!-- include default Plug-n-Script graphics (NOT REQUIRED) -->
  <INC file="$PLUGIN_DATA_PATH$/Skins/Modern-Theme/theme.inc"/>
  <INC file="$PLUGIN_DATA_PATH$/Skins/Controls/Knobs/knobs.inc"/>
  <INC file="$PLUGIN_DATA_PATH$/Skins/Controls/Groups/groups.inc"/>
  <INC file="$PLUGIN_DATA_PATH$/Skins/Controls/Meters/meters.inc"/>
  <INC file="$PLUGIN_DATA_PATH$/Skins/Controls/Other/other.inc"/>
  
  <!-- make skin resizeable -->
  <MAKE_RESIZEABLE enabled="false" min="300x150" default="600x400" max="1600x900" proportional="false" />

  <!-- MARKUP START -->
  <LAYER_STACK id="root_cell">
    
    <!-- if MAKE_RESIZEABLE then $RE100$ = 100%, otherwise empty-->
    <CELL width="$RE100$" height="$RE100$">
      
      <!-- include toolbar -->
      
<DUMMY>
  <!-- for compatibility with legacy BC scripts -->
  <DEFINE>
    <PNS_DSP_PARAM_SETTINGS_BUTTON base_type="THEME_DSP_PARAM_SETTINGS_BUTTON"/>
  </DEFINE>

  <!-- Toolbar title -->
  <TEMPLATE id="TOOLBAR_TITLE">

    <CELL v_margin="$TB_TI_PAD_V$" h_margin="$TB_TI_PAD_H$" h_offset="$TB_TI_H_OFFSET$" v_offset="$TB_TI_V_OFFSET$" min_width="$TB_TI_MINW$" max_width="$TB_TI_MAXW$">
      <!-- show script name string if static title not set -->
      <STRING id="LM_toolbar_title" default="hehe" />
      
      <!-- <LV id="STRING_ID" value="$script_name_string$" /> -->
      <LV id="STRING_ID" value="a_toolbar_title_text" />

      <!-- if we want to add plugin version to title -->
      <!-- <STRING_MULTI_LINK from="$script_name_string$;LM_plugin_version_fmt" to="LM_toolbar_title"/>
      <LV id="STRING_ID" value="LM_toolbar_title" /> -->
      
      <REPEAT count="($TB_TI_TEXT_SET$ == true)">
        <LV id="STRING_ID" value="" />
      </REPEAT>
      
      <TEXT value="$TB_TI_TEXT$" string_id="$STRING_ID$" font_size="$TB_TI_FONT_SIZE$" max_width="$TB_TI_MAXW$" fit_text="abbreviate" font_weight="$TB_TI_FONT_WEIGHT$" font_style="$TB_TI_FONT_STYLE$" font_face="$TB_TI_FONT_FACE$" text_color="$TB_TI_TEXT_COLOR$" font_quality="$TB_TI_FONT_QUALITY$" h_align="$TB_TI_TEXT_ALIGN$">
        <REPEAT count="($TOOLBAR_TITLE_ACTION_NUM$ == 1)">
          <IAB action='$TOOLBAR_TITLE_CUS_ACTION$'><TT text='$TOOLBAR_TITLE_CUS_ACTION_HINT$'/></IAB>
        </REPEAT>
        <REPEAT count="($TOOLBAR_TITLE_ACTION_NUM$ == 2)">
          <IAB action='ReloadScript'><TT text='Reload script'/></IAB>
        </REPEAT>
        <REPEAT count="($TOOLBAR_TITLE_ACTION_NUM$ == 3)">
          <IAB action='ReloadSkin'><TT text='Reload skin'/></IAB>
        </REPEAT>
        <REPEAT count="($TOOLBAR_TITLE_ACTION_NUM$ == 4)">
          <ROW height='100%' width='100%'>
            <IAB action='ReloadSkin' width='30%'><TT text='Reload skin' /></IAB>
            <IAB action='ReloadScript' width='70%'><TT text='Reload script' /></IAB>
          </ROW>
        </REPEAT>
        <REPEAT count="($TOOLBAR_TITLE_ACTION_NUM$ == 5)">
          <IAB action='OpenManual'><TT text='Open manual'/></IAB>
        </REPEAT>
        <REPEAT count="($TOOLBAR_TITLE_ACTION_NUM$ == 6)">
          <IAB action='OpenPresetsMenu'><TT text='Presets menu'/></IAB>
        </REPEAT>
        <REPEAT count="($TOOLBAR_TITLE_ACTION_NUM$ == 7)">
          <ONLOAD script="a_toolbar_infolink = &quot;$TOOLBAR_INFO_LINK$&quot;;" requires="a_toolbar_infolink" />
          <IAB action="OpenInfo"><TT text="$TOOLBAR_INFO_LINK_HINT$" /></IAB>
        </REPEAT>
        
      </TEXT>
    </CELL>
  </TEMPLATE>

  <!-- Toolbar presets -->
  <TEMPLATE id="TOOLBAR_PRESETS">
    <LV id="TB_PR_AR_INPAD" formula="abs($TB_PR_AR_POS$)" />
    <ROW v_margin="$TB_PR_PAD_V$" h_offset="$TB_PR_H_OFFSET$" v_offset="$TB_PR_V_OFFSET$">
      <R count="($TB_PR_AR_POS$ > -1)">
        <LAYER_STACK h_align="left" v_offset="$TB_PR_AR_V_OFFSET$">
          <SVG_ICON_PREV size="$TB_PR_AR_SIZE$" color="$TB_PR_AR_COLOR$" opacity="$TB_PR_AR_OPACITY$" />
          <IAB action="PreviousPreset" />
        </LAYER_STACK>
      </R>
      <LAYER_STACK width="$presets_width$" min_height="$TB_PR_MIN_HEIGHT$" h_margin="$TB_PR_PAD_H$">
        <LM_BOX_RAW data="$TB_PR_BOX$" />
        <ROW>
          <R count="($TB_PR_AR_POS$ &lt; 0)">
            <CELL width="$TB_PR_AR_INPAD$" />
            <LAYER_STACK h_align="left" v_offset="$TB_PR_AR_V_OFFSET$">
              <SVG_ICON_PREV size="$TB_PR_AR_SIZE$" color="$TB_PR_AR_COLOR$" opacity="$TB_PR_AR_OPACITY$" />
              <IAB action="PreviousPreset" />
            </LAYER_STACK>
          </R>
          
          <LAYER_STACK width="$TB_PR_WIDTH$">
            <ROW h_margin="$TB_PR_TX_HPAD$" width='100%'>
              <TEXT width='100%' string_id="current_preset_name_with_asterisk" font_size="$TB_PR_FONT_SIZE$" font_weight="$TB_PR_FONT_WEIGHT$" font_style="$TB_PR_FONT_STYLE$" font_face="$TB_PR_FONT_FACE$" text_color="$TB_PR_TEXT_COLOR$" font_quality="$TB_PR_FONT_QUALITY$" v_offset="$TB_PR_FONT_V_OFFSET$" />
            </ROW>
            <IAB action="OpenPresetsMenu" />
          </LAYER_STACK>
          
          <R count="($TB_PR_AR_POS$ &lt; 0)">
            <LAYER_STACK h_align="right" v_offset="$TB_PR_AR_V_OFFSET$">
              <SVG_ICON_NEXT size="$TB_PR_AR_SIZE$" color="$TB_PR_AR_COLOR$" opacity="$TB_PR_AR_OPACITY$" />
              <IAB action="NextPreset" />
            </LAYER_STACK>
            <CELL width="$TB_PR_AR_INPAD$" />
          </R>

        </ROW>
          
      </LAYER_STACK>
      <R count="($TB_PR_AR_POS$ > -1)">
        <LAYER_STACK h_align="right" v_offset="$TB_PR_AR_V_OFFSET$">
          <SVG_ICON_NEXT size="$TB_PR_AR_SIZE$" color="$TB_PR_AR_COLOR$" opacity="$TB_PR_AR_OPACITY$" />
          <IAB action="NextPreset" />
        </LAYER_STACK>
      </R>
    </ROW>
  </TEMPLATE>

  <!-- toolbar icons tems -->
  <VAR id="TIN" value="0" /> <!-- helper counter -->
  <TEMPLATE id="TOOLBAR_BYPASS">
    <VAR id="TIN" formula="$TIN$+1" />
    <LAYER_STACK v_offset="$TOOLBAR_ICONS_V_OFFSET$" h_margin="$TOOLBAR_ICONS_PAD_H$" v_margin="$TOOLBAR_ICONS_PAD_V$">
      <TOOLBAR_ICON icon="POWER" widget_id="cell_power_button_$TIN$"  />
      <IAB action="toggle_bypass"><PARAM_TOOLTIP param_id="$bypass$" content="Bypass is {text_value}" /></IAB>
    </LAYER_STACK>
    <EXPOSED_OBJECTS object_ids="cell_power_button_$TIN$.opacity" />
    <PARAM_LINK from="$bypass$" to="cell_power_button_$TIN$.opacity" formula="abs($TOOLBAR_ICONS_OPACITY$-x*($TOOLBAR_ICONS_OPACITY$*0.7))" />
  </TEMPLATE>

  <TEMPLATE id="TOOLBAR_MAINMENU">
    <LAYER_STACK v_offset="$TOOLBAR_ICONS_V_OFFSET$" h_margin="$TOOLBAR_ICONS_PAD_H$" v_margin="$TOOLBAR_ICONS_PAD_V$">
      <TOOLBAR_ICON icon="MENU" />
      <IAB action="$TOOLBAR_MAINMENU_ACTION$"><TT text="$TOOLBAR_MAINMENU_ACTION_HINT$"/></IAB>
    </LAYER_STACK>
  </TEMPLATE>

  <TEMPLATE id="TOOLBAR_ZOOM">
    <LAYER_STACK v_offset="$TOOLBAR_ICONS_V_OFFSET$" h_margin="$TOOLBAR_ICONS_PAD_H$" v_margin="$TOOLBAR_ICONS_PAD_V$">
      <TOOLBAR_ICON icon="ZOOM" />
      <IPMB ignore_mask_file="true" param_id="gui.zoom" positions_count="14" reverse_mouse_wheel="false"><PARAM_TOOLTIP param_id="gui.zoom" content="Zoom: {text_value}{unit}"/></IPMB>
    </LAYER_STACK>
  </TEMPLATE>

  <TEMPLATE id="TOOLBAR_OPACITY" >
    <LAYER_STACK v_offset="$TOOLBAR_ICONS_V_OFFSET$" h_margin="$TOOLBAR_ICONS_PAD_H$" v_margin="$TOOLBAR_ICONS_PAD_V$">
      <TOOLBAR_ICON icon="ADJUST" />
      <PARAM_TEXT_CONTROL param_id="global_opacity" width="100%" height="100%" opacity="0" cursor="$CUR_SIZE_V$">
        <PARAM_TOOLTIP param_id="global_opacity" content="GUI opacity: {value}%" value_format="0.0"  />
      </PARAM_TEXT_CONTROL>
    </LAYER_STACK>
  </TEMPLATE>

  <TEMPLATE id="TOOLBAR_UNDO">
    <LAYER_STACK v_offset="$TOOLBAR_ICONS_V_OFFSET$" h_margin="$TOOLBAR_ICONS_PAD_H$" v_margin="$TOOLBAR_ICONS_PAD_V$">
      <TOOLBAR_ICON icon="UNDO" />
      <IAB action="Undo"><TT text="Undo" /></IAB>
    </LAYER_STACK>
  </TEMPLATE>

  <TEMPLATE id="TOOLBAR_REDO">
    <LAYER_STACK v_offset="$TOOLBAR_ICONS_V_OFFSET$" h_margin="$TOOLBAR_ICONS_PAD_H$" v_margin="$TOOLBAR_ICONS_PAD_V$">
      <TOOLBAR_ICON icon="REDO" />
      <IAB action="Redo"><TT text="Redo" /></IAB>
    </LAYER_STACK>
  </TEMPLATE>

  <TEMPLATE id="TOOLBAR_PLUGINFO">
    <ONLOAD script="a_toolbar_infolink = &quot;$TOOLBAR_INFO_LINK$&quot;;" requires="a_toolbar_infolink" />
    <LAYER_STACK v_offset="$TOOLBAR_ICONS_V_OFFSET$" h_margin="$TOOLBAR_ICONS_PAD_H$" v_margin="$TOOLBAR_ICONS_PAD_V$">
      <TOOLBAR_ICON icon="INFO" />
      <IAB action="OpenInfo"><TT text="Plugin info" /></IAB>
    </LAYER_STACK>
  </TEMPLATE>

  <TEMPLATE id="TOOLBAR_MANUAL">
    <LAYER_STACK v_offset="$TOOLBAR_ICONS_V_OFFSET$" h_margin="$TOOLBAR_ICONS_PAD_H$" v_margin="$TOOLBAR_ICONS_PAD_V$">
      <TOOLBAR_ICON icon="QUESTION" />
      <IAB action="OpenManual"><TT text="Open plugin manual" /></IAB>
    </LAYER_STACK>
  </TEMPLATE>

  <TEMPLATE id="TOOLBAR_PRESETMENU">
    <LAYER_STACK v_offset="$TOOLBAR_ICONS_V_OFFSET$" h_margin="$TOOLBAR_ICONS_PAD_H$" v_margin="$TOOLBAR_ICONS_PAD_V$">
      <TOOLBAR_ICON icon="LIST" />
      <IAB action="OpenPresetsMenu"><TT text="Presets menu" /></IAB>
    </LAYER_STACK>
  </TEMPLATE>

  <TEMPLATE id="TOOLBAR_SCRIPTMENU">
    <IF condition="$SCRIPT_EDIT_MODE$">
      <LAYER_STACK v_offset="$TOOLBAR_ICONS_V_OFFSET$" h_margin="$TOOLBAR_ICONS_PAD_H$" v_margin="$TOOLBAR_ICONS_PAD_V$">
        <TOOLBAR_ICON icon="FILE" />
        <IAB action="$TOOLBAR_SCRIPTMENU_ACTION$" ><TT text="$TOOLBAR_SCRIPTMENU_ACTION_HINT$"/></IAB>
      </LAYER_STACK>
    </IF>
  </TEMPLATE>

  <TEMPLATE id="TOOLBAR_SKINMENU">
    <LAYER_STACK v_offset="$TOOLBAR_ICONS_V_OFFSET$" h_margin="$TOOLBAR_ICONS_PAD_H$" v_margin="$TOOLBAR_ICONS_PAD_V$">
      <TOOLBAR_ICON icon="DROPDOWN" />
      <IAB action="$TOOLBAR_SKINMENU_ACTION$"><TT text="$TOOLBAR_SKINMENU_ACTION_HINT$"/></IAB>
    </LAYER_STACK>
  </TEMPLATE>

  <TEMPLATE id="TOOLBAR_SETTINGS">
    
      <LAYER_STACK v_offset="$TOOLBAR_ICONS_V_OFFSET$" h_margin="$TOOLBAR_ICONS_PAD_H$" v_margin="$TOOLBAR_ICONS_PAD_V$">
        <TOOLBAR_ICON icon="SETTINGS" widget_id="theme_control_settings_button" />
        <REPEAT count="($TOOLBAR_SETTINGS_ACTION_IS_SET$ == 0)" index_name="__das">
          <IAB action="ToggleControlsSettings"><TT text="Show controls settings" /></IAB>
          <PARAM_LINK from="theme.show_settings" to="theme_control_settings_button.opacity" formula="x+0.8" />
        </REPEAT>
        <REPEAT count="($TOOLBAR_SETTINGS_ACTION_IS_SET$ == 1)" index_name="__das1">
          <IAB action="$TOOLBAR_SETTINGS_ACTION$" ><TT text="$TOOLBAR_SETTINGS_ACTION_HINT$"/></IAB>
        </REPEAT>
      </LAYER_STACK>
      
  </TEMPLATE>
  
  <!-- ################ -->
  <!-- TOOLBAR HELPERS -->
  <!-- ################-->

  <TEMPLATE id="PARSE_ICONS" data="">
    <VAR id="N" value="0" />
    <REPEAT index_list="$data$">
      <VAR id="T$N$" value="$index$" /><NEXT_N />
    </REPEAT>
    <VAR id="TOOLBAR_ICONS_SIZE" value="$T0$" />
    <VAR id="TOOLBAR_ICONS_COLOR" value="$T1$" />
    <VAR id="TOOLBAR_ICONS_OPACITY" value="$T2$" />
    <VAR id="TOOLBAR_ICONS_PAD_H" value="$T3$" />
    <VAR id="TOOLBAR_ICONS_PAD_V" value="$T4$" />
    <VAR id="TOOLBAR_ICONS_V_OFFSET" value="$T5$" />
  </TEMPLATE>

  <TEMPLATE id="PARSE_MAX_IN_ROW" data="">
    <VAR id="N" value="0" />
    <REPEAT index_list="$data$">
      <VAR id="TOOLBAR_MAX_IN_ROW_$N$" value="$index$" />
      <NEXT_N />
    </REPEAT>
  </TEMPLATE>

  <TEMPLATE id="PARSE_TITLE" data="" text="">
    <VAR id="N" value="0" />
    <REPEAT index_list="$data$">
      <VAR id="T$N$" value="$index$" /><NEXT_N />
    </REPEAT>
    <VAR id="TB_TI_TEXT" value="$text$" />
    <VAR id="TB_TI_TEXT_SET" value="false" />
    <REPEAT index_list="$TB_TI_TEXT$">
      <VAR id="TB_TI_TEXT_SET" value="true" />
    </REPEAT>
    <VAR id="TB_TI_MAXW" value="$T0$" />
    <VAR id="TB_TI_MINW" value="$T1$" />
    <VAR id="TB_TI_PAD_H" value="$T2$" />
    <VAR id="TB_TI_PAD_V" value="$T3$" />
    <VAR id="TB_TI_H_OFFSET" value="$T4$" />
    <VAR id="TB_TI_V_OFFSET" value="$T5$" />
    <VAR id="TB_TI_TEXT_ALIGN" value="left" />
    <VAR id="T6" value="0$T6$" /> <!-- prevent formula errors -->
    <REPEAT count="($T6$==1)"><VAR id="TB_TI_TEXT_ALIGN" value="center" /></REPEAT>
    <REPEAT count="($T6$==2)"><VAR id="TB_TI_TEXT_ALIGN" value="right" /></REPEAT>
    <!-- T7-8 reserved -->
    <VAR id="TB_TI_FONT_FACE" value="$DEFAULT_FONT$" /> <!-- if empty - use default -->
    <REPEAT index_list="$T9$"><VAR id="TB_TI_FONT_FACE" value="$index$" /></REPEAT>
    <VAR id="TB_TI_FONT_SIZE" value="$T10$" />
    <VAR id="TB_TI_FONT_WEIGHT" value="$T11$" />
    <VAR id="TB_TI_FONT_STYLE" value="$T12$" />
    <VAR id="TB_TI_TEXT_COLOR" value="$T13$" />
    <VAR id="TB_TI_FONT_QUALITY" value="$T14$" />
  </TEMPLATE>

  <TEMPLATE id="PARSE_PRESETS" data="">
    <VAR id="N" value="0" />
    <REPEAT index_list="$data$">
      <VAR id="T$N$" value="$index$" /><NEXT_N />
    </REPEAT>
    <VAR id="TB_PR_WIDTH" value="$T0$" />
    <VAR id="TB_PR_MIN_HEIGHT" value="$T1$" />
    <VAR id="TB_PR_PAD_H" value="$T2$" />
    <VAR id="TB_PR_PAD_V" value="$T3$" />
    <VAR id="TB_PR_H_OFFSET" value="$T4$" />
    <VAR id="TB_PR_V_OFFSET" value="$T5$" />
    <VAR id="TB_PR_TX_HPAD" value="$T6$" />

    <VAR id="TB_PR_AR_SIZE" value="$T8$" />
    <VAR id="TB_PR_AR_COLOR" value="$T9$" />
    <VAR id="TB_PR_AR_OPACITY" value="$T10$" />
    <VAR id="TB_PR_AR_POS" value="$T11$" />
    <VAR id="TB_PR_AR_V_OFFSET" value="$T12$" />

    <!-- 11-20 reserved -->
    <VAR id="TB_PR_FONT_FACE" value="$DEFAULT_FONT$" /> <!-- if empty - use default -->
    <REPEAT index_list="$T21$"><VAR id="TB_PR_FONT_FACE" value="$index$" /></REPEAT>
    <VAR id="TB_PR_FONT_SIZE" value="$T22$" />
    <VAR id="TB_PR_FONT_WEIGHT" value="$T23$" />
    <VAR id="TB_PR_FONT_STYLE" value="$T24$" />
    <VAR id="TB_PR_TEXT_COLOR" value="$T25$" />
    <VAR id="TB_PR_FONT_QUALITY" value="$T26$" />
    <VAR id="TB_PR_FONT_V_OFFSET" value="$T27$" />
    <!-- 28-29 reserved -->
    
    <VAR id="TB_PR_BOX" value="$T30$;$T31$;$T32$;$T33$;$T34$;$T35$;$T36$;$T37$;$T38$;$T39$;$T40$;$T41$;$T42$;$T43$;$T44$;$T45$;$T46$;$T47$;$T48$" />
    <!-- gradient_type;whole_opacity;gradient_shift;stroke_width;stroke_expand;stroke_round;y_offset;;;;#bgcolor1;opacity1;pos1;#bgcolor2;opacity2;pos2;#strokecolor;opacity3;unused; -->
    
  </TEMPLATE>

  <!-- icons for toolbar -->
  <TEMPLATE id="TOOLBAR_ICON" icon="MENU" widget_id="" color='$TOOLBAR_ICONS_COLOR$' size='$TOOLBAR_ICONS_SIZE$' opacity="$TOOLBAR_ICONS_OPACITY$">
    <WIDGET id="$widget_id$" opacity="$opacity$">
      <LAYER_STACK>
        <SVG_BG color="#FFFFFF" opacity="0" />
        <DEFINE><_SVG_ICON base_type="SVG_ICON_$icon$" /></DEFINE>
        <_SVG_ICON color='$color$' size='$size$' />
        <UNDEFINE><_SVG_ICON /></UNDEFINE>
      </LAYER_STACK>
    </WIDGET>
  </TEMPLATE>
  
  <!-- template to display toolbar items layout split by max_in_row -->
  <TEMPLATE id="TB_LAYOUT_ITEMS" max_in_row="2" items="" h_align="left" flex="0">
    <LV id="ITEMS_N" value="0" />
    <REPEAT index_list="$items$">
      <VAR id="TBITEM_$ITEMS_N$" value="$index$" />
      <LV id="ITEMS_N" formula="$ITEMS_N$+1" />
    </REPEAT>
    <LV id="COLS_NO" formula="ceil($ITEMS_N$/$max_in_row$)" />
    <LV id="CUR_ITEM" value="0" />
    <COLUMN flex="$flex$">
      <REPEAT count="$COLS_NO$" index_name="CUR_COL">
        <LV id="ITEMS_IN_ROW" formula="(($CUR_ITEM$ + $max_in_row$) &lt;= $ITEMS_N$)*($max_in_row$) + (($CUR_ITEM$ + $max_in_row$) > $ITEMS_N$)*($ITEMS_N$-$CUR_ITEM$)" />
        <ROW h_align="$h_align$" internal_h_align="$h_align$">
          <REPEAT count="$ITEMS_IN_ROW$" start="$CUR_ITEM$">
            <DEFINE><_THIS_ base_type="TOOLBAR_$TBITEM_$index$$" /></DEFINE>
            <_THIS_ />
            <UNDEFINE><_THIS_ /></UNDEFINE>
            <LV id="CUR_ITEM" formula="$CUR_ITEM$+1" />
          </REPEAT>
        </ROW>
      </REPEAT>
    </COLUMN>
  </TEMPLATE>

  <!-- ################# -->
  <!-- TOOLBAR SKIN MENU -->
  <!-- ################# -->

  <!-- NO_EXPORT -->
  <IF_NOT_EXPORTED>
    <POPUP_MENU id="skin_menu">

      <!-- if toolbar is hidden, add main menu to this menu -->
      <IF condition="$TOOLBAR_DISPLAY$ == 0">
        <MENU_ITEM action_id="OpenMenuOriginal" />
        <MENU_SEPARATOR />
      </IF>

      <!-- actions for current script -->
      
      <MENU_ITEM action_id="AutoReloadScript" checked_param_id="auto_reload_script" />
  
      <MENU_SEPARATOR />
      <MENU_ITEM action_id="IgnoreCustomKUIML" checked_param_id="a_ignore_custom_kuiml_checkbox" />

      <MENU_ITEM action_id="ReloadScript" />
      
      <MENU_ITEM action_id="OpenScriptFile" />
      <MENU_ITEM action_id="OpenKUIMLFile" />

      <MENU_ITEM action_id="OpenScriptDirectory" />
      
      <MENU_SEPARATOR />

      <!-- actions for current skin -->
      <MENU_ITEM action_id="ReloadSkin" />
      <MENU_ITEM action_id="OpenSkinFile" />
      <MENU_ITEM action_id="OpenSkinDirWrap" />

      <MENU_SEPARATOR />
           
      <!-- enable skin scanner (if included) -->
      <MENU_ITEM_SKIN_SCANNER />

      <MENU_ITEM_CONTROLS_GENERATOR />
      
      <MENU_ITEM_GLOBAL_PREFS />

      <MENU_ITEM_SKIN_SETTINGS />
      
      <R count="(($SKIN_SETTINGS_INCLUDED$ + $SKIN_SKANNER_INCLUDED$ + $CONTROLS_GEN_INCLUDED$ + $GLOBAL_PREFS_INCLUDED$) > 0)"><MENU_SEPARATOR /></R>

      <MENU_ITEM_EXPORT_PLUGIN />
      
      <!-- actions for log -->
      <MENU_ITEM action_id="OpenLogFile" />
      
      


      <!-- useful links -->
      <ACTION id="OpenURL_PnSTutorial" type="OpenUrl" url="https://pns.letimix.com/" name="Plug'n Script Tutorial" />

      <ACTION id="OpenURL_KUIML" type="OpenUrl" url="https://www.bluecataudio.com/Vault/Skins/KUIML/elements_index.html" name="KUIML Manual" />
      
      <ACTION id="OpenURL_AngelScript" type="OpenUrl" url="https://www.angelcode.com/angelscript/sdk/docs/manual/doc_script.html" name="Index" />
      <ACTION id="OpenURL_AngelScript_Strings" type="OpenUrl" url="https://www.angelcode.com/angelscript/sdk/docs/manual/doc_script_stdlib_string.html" name="Strings" />
      <ACTION id="OpenURL_AngelScript_Arrays" type="OpenUrl" url="https://www.angelcode.com/angelscript/sdk/docs/manual/doc_datatypes_arrays.html" name="Arrays" />
      
      <ACTION id="OpenURL_PnSDocAPI" type="OpenUrl" url="https://www.bluecataudio.com/Doc/Product_PlugNScript/" name="Plug-n-Script Manual" />
      <ACTION id="OpenURL_KnobMan" type="OpenUrl" url="https://www.g200kg.com/en/webknobman/gallery.php" name="Knobman gallery" />
      <ACTION id="OpenURL_MusicDSP" type="OpenUrl" url="http://www.musicdsp.org/en/latest/index.html" name="MusicDSP (algorithms)" />  
      <ACTION id="OpenURL_DSPBook" type="OpenUrl" url="http://www.dspguide.com/pdfbook.htm" name="DSP Guide (the book)" /> 
      
      <ACTION id="OpenURL_Facebook_Group" type="OpenUrl" url="https://www.facebook.com/groups/411296262925531" name="Facebook PnS Devs" />
      <ACTION id="OpenURL_GetLatestLMSkin" type="OpenUrl" url="https://letimix.com/pns-skin" name="Download full LM Skin" />

      
      <MENU_ITEM name="Useful links">
        <MENU_ITEM action_id="OpenURL_PnSTutorial" />
        <!--
        <MENU_ITEM action_id="OpenURL_PnSDocAPI" />
        <MENU_ITEM action_id="OpenURL_KUIML" />
      -->
        <MENU_ITEM name="AngelScript">
          <MENU_ITEM action_id="OpenURL_AngelScript" />
          <MENU_SEPARATOR />
          <MENU_ITEM action_id="OpenURL_AngelScript_Strings" />
          <MENU_ITEM action_id="OpenURL_AngelScript_Arrays" />
        </MENU_ITEM>
        <MENU_SEPARATOR />
        <MENU_ITEM action_id="OpenURL_KnobMan" />
        <MENU_ITEM action_id="OpenURL_MusicDSP" />
        <MENU_ITEM action_id="OpenURL_DSPBook" />
        <MENU_SEPARATOR />
        <MENU_ITEM action_id="OpenURL_Facebook_Group" />
        
      </MENU_ITEM>
      <MENU_ITEM_ABOUT_LM_SKIN />
      <!-- <MENU_ITEM action_id="OpenScriptDoc" /> -->
      <MENU_SEPARATOR />
      <MENU_ITEM action_id="OpenURL_GetLatestLMSkin" />
    </POPUP_MENU>
  </IF_NOT_EXPORTED>
  <!-- END_NO_EXPORT -->

  <!-- for exported plugin -->
  <IF_EXPORTED>
    <POPUP_MENU id="skin_menu">

      <!-- if toolbar is hidden, add main menu to this menu -->
      <IF condition="$TOOLBAR_DISPLAY$ == 0">
        <MENU_ITEM action_id="OpenMenuOriginal" />
        <MENU_SEPARATOR />
      </IF>

      <!-- actions for current skin -->
      <MENU_ITEM action_id="ReloadSkin" />
      <MENU_ITEM action_id="OpenSkinFile" />
      <MENU_ITEM action_id="OpenSkinDirWrap" />
      <MENU_SEPARATOR />
      
      <!-- actions for log -->
      <MENU_ITEM action_id="OpenLogFile" />
      <!-- <MENU_ITEM action_id="OpenScriptDoc" /> -->

    </POPUP_MENU>
  </IF_EXPORTED>

  <ONLOAD script="@a_lm_menu = skin_menu.Popup;" /> 

  <!-- #################### -->
  <!-- TOOLBAR LAYOUT START -->
  <!-- #################### -->

  <LAYER_STACK id="toolbar_area" width="100%" min_width="150" min_height="$TOOLBAR_MIN_HEIGHT$" display="$TOOLBAR_DISPLAY_BOOL$">

    <!-- toolbar background -->
    <IF condition="$SKIN_EDITABLE$">
      <KUIML_WIDGET width="100%" height="100%" id="toolbar_bg" innerKUIML="&lt;SKIN width='100%' height='100%'>&lt;LAYER_STACK width='100%' height='100%'> &lt;LM_BG_PARSER data='$TOOLBAR_BG$' />&lt;LM_TOOLBAR_DECOR toolbar='$DECOR_TOOLBAR$' opacity='$DECOR_OPACITY$' />&lt;/LAYER_STACK> &lt;/SKIN>" exposed="true" />
    </IF>
    <IF condition="!$SKIN_EDITABLE$">
      <LM_BG_PARSER data="$TOOLBAR_BG$" />
      <LM_TOOLBAR_DECOR toolbar='$DECOR_TOOLBAR$' opacity='$DECOR_OPACITY$' />
    </IF>

    <!-- toolbar contents -->
    <ROW id="toolbar_content" v_offset="$TOOLBAR_V_OFFSET$" h_margin="$TOOLBAR_PAD_H$" v_margin="$TOOLBAR_PAD_V$" flex="1">

      <!-- load toolbar statically for normal mode -->
      <IF condition="!$SKIN_EDITABLE$">
        <!-- unparse comma-separated data into vars -->
        <PARSE_ICONS data="$TOOLBAR_ICONS$" />
        <PARSE_MAX_IN_ROW data="$TOOLBAR_MAX_IN_ROW$" />
        <PARSE_TITLE data="$TOOLBAR_TITLE$" text="$TOOLBAR_TITLE_TEXT$" />
        <PARSE_PRESETS data="$TOOLBAR_PRESETS$" />

        <CELL layout_type="row" width="100%" text_color="$TB_TI_TEXT_COLOR$">
          <!-- left side items -->
          <TB_LAYOUT_ITEMS h_align="left" max_in_row="$TOOLBAR_MAX_IN_ROW_0$" items="$TOOLBAR_ITEMS_LEFT$" />
          
          <!-- center items-->
          <TB_LAYOUT_ITEMS h_align="center" max_in_row="$TOOLBAR_MAX_IN_ROW_1$" items="$TOOLBAR_ITEMS_CENTER$" flex="1" />

          <!-- right side items -->
          <TB_LAYOUT_ITEMS h_align="right" max_in_row="$TOOLBAR_MAX_IN_ROW_2$" items="$TOOLBAR_ITEMS_RIGHT$" />
        </CELL>
      </IF>

      <!-- load toolbar dynamically for skin preview mode -->
      <IF condition="$SKIN_EDITABLE$">
        <KUIML_WIDGET id="toolbar_widget" width='100%' innerKUIML="&lt;SKIN>&lt;/SKIN>" exposed="true" />
        <STRING_LINK id="link_toolbar_innerKUIML" from="a_toolbar_innerKUIML" to="toolbar_widget.innerKUIML" enabled="false" />
        <EXPOSED_OBJECTS object_ids="link_toolbar_innerKUIML.*" />
      </IF>
    </ROW> <!-- // END TOP ROW -->

  </LAYER_STACK>

  <!-- ################## -->
  <!-- TOOLBAR LAYOUT END -->
  <!-- ################## -->


  <!-- NO_EXPORT -->
  <!-- these links are needed for settings live preview -->
  <IF condition="$SKIN_EDITABLE$">

    <ACTION_TRIGGER event_id="a_toolbar_invalidate.value_changed" script="reloadToolbar()" />

    <ONLOAD script="a_toolbar_display = $TOOLBAR_DISPLAY$; a_toolbar_items_left = &quot;$TOOLBAR_ITEMS_LEFT$&quot;; a_toolbar_items_center = &quot;$TOOLBAR_ITEMS_CENTER$&quot;; a_toolbar_items_right = &quot;$TOOLBAR_ITEMS_RIGHT$&quot;; a_toolbar_max_in_row = &quot;$TOOLBAR_MAX_IN_ROW$&quot;; a_toolbar_icons = &quot;$TOOLBAR_ICONS$&quot;; a_toolbar_title = &quot;$TOOLBAR_TITLE$&quot;; a_toolbar_title_fixed_text = &quot;$TOOLBAR_TITLE_TEXT$&quot;; a_toolbar_presets = &quot;$TOOLBAR_PRESETS$&quot;; link_toolbar_innerKUIML.enabled=true; reloadToolbar()" />

    <PARAM_LINK id="link_toolbar_display" from="a_toolbar_display" to="toolbar_area.display" enabled="true" />
    <STRING_LINK id="link_toolbar_bg_innerKUIML" from="a_toolbar_bg_innerKUIML" to="toolbar_bg.innerKUIML" enabled="false" />
    <PARAM_LINK id="link_toolbar_area_min_height" from="a_toolbar_area_min_height" to="toolbar_area.min_height" enabled="false" />
    <PARAM_LINK id="link_toolbar_area_v_offset" from="a_toolbar_v_offset" to="toolbar_content.v_offset" enabled="false" />
    <PARAM_LINK id="link_toolbar_area_pad_h" from="a_toolbar_pad_h" to="toolbar_content.h_margin" enabled="false" />
    <PARAM_LINK id="link_toolbar_area_pad_v" from="a_toolbar_pad_v" to="toolbar_content.v_margin" enabled="false" />
    <PARAM_MULTI_LINK from="instant_link_enabled" to="link_toolbar_area_min_height.enabled;link_toolbar_bg_innerKUIML.enabled;link_toolbar_area_v_offset.enabled;link_toolbar_area_pad_h.enabled;link_toolbar_area_pad_v.enabled" />
  </IF>
  <!-- END_NO_EXPORT -->
</DUMMY>
      
      <!-- include main body -->
      
<DUMMY>

<!-- we make a complicated meters template to support different layouts -->

<TEMPLATE id="LM_METERS" type="input" h_align="left" num="1">
  <!-- convert type (input/output) into numeric value -->
  <LV id="meters_type" value="0" />
  <LV id="meters_type_input" value="0" />
  <LV id="meters_type_output" value="1" />
  <REPEAT index_list="$type$" index_name="_lm_i_">
    <LV id="meters_type" value="$meters_type_$_lm_i_$$" />
  </REPEAT>
  <!-- set vars appropriate to type (input/output) -->
  <LV id="v_align" value="top" />
  <LV id="h_align" value="left" />
  <REPEAT count="$meters_type$"> <!-- for output meters = 1 -->
    <LV id="v_align" value="bottom" />
    <LV id="h_align" value="right" />
  </REPEAT>
  <!-- set vars according to vertical/horizontal meters -->
  <LV id="lay_type" value="row" />
  <LV id="lwidth" value="" />
  <LV id="lheight" value="100%" />
  <LV id="min_height" value="$METERS_MIN_WIDTH$" />
  <LV id="min_width" value="$METERS_MIN_WIDTH$" />
  <LV id="min_h_single" value="$METERS_MIN_WIDTH_SINGLE$" />
  <LV id="min_w_single" value="$METERS_MIN_WIDTH_SINGLE$" />
  <LV id="h_margin" value="$METERS_PAD_H$" />
  <LV id="h_margin_b" value="$METERS_PAD_H_half$" />
  <!-- <LV id="h_margin_b" value="$METERS_PAD_H_half_$type$$" /> -->
  <LV id="v_margin" value="$METERS_PAD_V$" />
  <LV id="h_offset" value="$METERS_PAD_H_half_$type$$" />
  <LV id="v_offset" value="$METERS_V_OFFSET$" />
  <LV id="bg_v_offset" value="$METERS_BOX_OFFSET$" />
  <LV id="bg_h_offset" value="0" />
  <LV id="bg_pad_h" value="$METERS_BOX_PAD_A$" />
  <LV id="bg_pad_v" value="$METERS_BOX_PAD_B$" />
  <REPEAT count="!$METERS_ARE_HORIZONTAL$">
    <LV id="v_align" value="" />
    <LV id="min_height" value="" />
    <LV id="min_h_single" value="" />
  </REPEAT>
  <REPEAT count="$METERS_ARE_HORIZONTAL$">
    <LV id="lay_type" value="column" />
    <LV id="lwidth" value="100%" />
    <LV id="lheight" value="" />
    <LV id="lheight" value="" />
    <LV id="h_align" value="" />
    <LV id="min_width" value="" />
    <LV id="min_w_single" value="" />
    <LV id="h_margin" value="0" />
    <LV id="h_margin_b" value="$METERS_PAD_V$" />
    <LV id="v_margin" value="$METERS_PAD_H_half$" />
    <LV id="v_offset" formula="$METERS_PAD_H_half_$type$$" />
    <LV id="h_offset" formula="-($METERS_V_OFFSET$)" />
    <LV id="bg_v_offset" value="0" />
    <LV id="bg_h_offset" formula="-($METERS_BOX_OFFSET$)" />
    <LV id="bg_pad_h" value="$METERS_BOX_PAD_B$" />
    <LV id="bg_pad_v" value="$METERS_BOX_PAD_A$" />
  </REPEAT>

  <VAR id="typenum" value="$type$$num$" />
  <!-- this param is used for limiting max number of meters -->
  <LV id="max_cnt_formula" value="$$type$_channels_count$" />
  <REPEAT count="($METERS_HIDE_INACTIVE$)" index_name="__dd">
    <LV id="max_cnt_formula" value="min(dsp.connected_$type$s_count, max(1,floor(a_meters_$type$_channels)))" />
  </REPEAT>
  <FORMULA_PARAM id="$typenum$_meters_max_cnt" max="16" formula="$max_cnt_formula$" />

  <ONLOAD script="a_meters_$type$_channels = $METERS_$type$_CHANNELS$;" />
  <!-- VARs to create formula_param for combined meters (see below) -->
  <VAR id="$type$_lvls_combo_formula" value="-60"/>
  <VAR id="$type$_hlvls_combo_formula" value="-60"/>

  <!-- start meters layout -->
  <CELL id="cell_$typenum$_levels_wrap" height="$lheight$" width="$lwidth$" display="$METERS_DISPLAY_$type$$" h_align="$h_align$" v_align="$v_align$" h_margin="$h_margin_b$">
    <CELL layout_type="$lay_type$" height="$lheight$" width="$lwidth$" id="cell_meters_$typenum$">
      <LAYER_STACK id="cell_$typenum$_levels" height="$lheight$" width="$lwidth$" spacing="0" h_align="$h_align$" v_align="$v_align$" v_margin="$v_margin$"  h_offset="$h_offset$" v_offset="$v_offset$" min_height="$min_height$" min_width="$min_width$">
        <!-- load background statically (skin loads faster) -->
        <IF condition="!$SKIN_EDITABLE$"><LM_METERS_BOX /></IF>
        <!-- NO_EXPORT -->
        <!-- or load background dynamically (for editing mode) -->
        <IF condition="$SKIN_EDITABLE$">
          <KUIML_WIDGET height="100%" width="100%" id="$typenum$_METERS_BOX_widget" innerKUIML="&lt;SKIN width='100%' height='100%'>&lt;COMMON_SCRIPTS n='4900' p='MBW' /> &lt;LM_METERS_BOX /> &lt;/SKIN>" />
          <!-- link to change meters background dynamically -->
          <STRING_LINK id="link_$typenum$_METERS_BOX_widget_innerKUIML" from="a_meters_box_widget_innerKUIML" to="$typenum$_METERS_BOX_widget.innerKUIML" enabled="false" />
        </IF>
        <!-- END_NO_EXPORT -->
        <!-- now for each meters -->
        <CELL layout_type="$lay_type$" flex="1" id="cell_meters_all_$typenum$" h_margin="$bg_pad_h$" v_margin="$bg_pad_v$" v_offset="$bg_v_offset$" h_offset="$bg_h_offset$" spacing="$METERS_BOX_SPACING$">
          <REPEAT count="$$type$_channels_count$" index_name="i" start="1">
            <LV id="LEVEL_PARAM_NAME" value="$$type$_level$i$$" />
            <LV id="HLEVEL_PARAM_NAME" value="$$type$_hold_level$i$$" />
            <!-- if we combine all channels in one -->
            <IF condition="($METERS_$type$_CHANNELS$ == 0)" index_name="_d$typenum$1_">
              <!-- building vars holding 'max' formula -->
              <VAR id="$type$_lvls_combo_formula" value="max($$type$_lvls_combo_formula$, $LEVEL_PARAM_NAME$)" />
              <VAR id="$type$_hlvls_combo_formula" value="max($$type$_hlvls_combo_formula$, $HLEVEL_PARAM_NAME$)" />
              <!-- change params names passing to CANVAS render -->
              <LV id="LEVEL_PARAM_NAME" value="$type$_levels_max" />
              <LV id="HLEVEL_PARAM_NAME" value="$type$_hlevels_max" />
            </IF>

            <!-- showing the meter itself -->
            <LAYER_STACK height="$lheight$" width="$lwidth$" id="lm_meter_$typenum$_ch$i$" flex="1" min_height="$min_h_single$" min_width="$min_w_single$">
              <CANVAS opacity="1" id="lm_canvas_$typenum$_ch$i$" width="100%" height="100%" render_script="LM::renderMeter(Kt::Graphics::GetCurrentContext(), this.width, this.height, $METERS_ORIENTATION$, LM::meterRenderParams, $LEVEL_PARAM_NAME$, $HLEVEL_PARAM_NAME$);" requires="lm_canvas_$typenum$_ch$i$.width;lm_canvas_$typenum$_ch$i$.height;$LEVEL_PARAM_NAME$;$HLEVEL_PARAM_NAME$" />
            </LAYER_STACK>

            <!-- action to refresh on changing parameter -->
            <ACTION_TRIGGER event_id="$LEVEL_PARAM_NAME$.value_changed;$HLEVEL_PARAM_NAME$.value_changed;a_meters_invalidate.value_changed" script="lm_canvas_$typenum$_ch$i$.Invalidate()" requires="lm_canvas_$typenum$_ch$i$.Invalidate" async="true" />
            <!-- hiding currently unactive channels -->
            <PARAM_LINK from="$typenum$_meters_max_cnt" to="lm_meter_$typenum$_ch$i$.display" formula="$i$&lt;=x" />
            
            <!-- cell to space between groups of meters -->
            <CELL id="cell_space_$typenum$_ch$i$" width="$METERS_GROUP_SPACING$" height="$METERS_GROUP_SPACING$" />
            <FORMULA_PARAM id="show_spacer_$typenum$_ch$i$" formula="$i$&lt;=($typenum$_meters_max_cnt-1)*($i$/a_meters_group_$type$ == floor($i$/a_meters_group_$type$))*(a_meters_group_$type$>0)" />
            <PARAM_LINK from="show_spacer_$typenum$_ch$i$" to="cell_space_$typenum$_ch$i$.display" />
            
            <!-- NO_EXPORT -->
            <!-- links for EDITABLE mode -->
            <IF condition="$SKIN_EDITABLE$">             
              <!-- link to change width/height -->
              <PARAM_MULTI_LINK id="link_mwh_$typenum$_ch$i$" from="a_meters_min_width_single" to="lm_meter_$typenum$_ch$i$.min_width;lm_meter_$typenum$_ch$i$.min_height" enabled="false" />
              <PARAM_MULTI_LINK id="link_mcp_$typenum$_ch$i$" from="a_meters_group_spacing" to="cell_space_$typenum$_ch$i$.width;cell_space_$typenum$_ch$i$.height" enabled="false" />
              <PARAM_MULTI_LINK from="instant_link_enabled" to="link_$typenum$_METERS_BOX_widget_innerKUIML.enabled;link_mwh_$typenum$_ch$i$.enabled;link_mcp_$typenum$_ch$i$.enabled" />
            </IF>
            <!-- END_NO_EXPORT -->
          </REPEAT>
        </CELL>
      </LAYER_STACK>
      <!-- params for "single combined" meters (one for all channels) -->
      <IF condition="(($METERS_$type$_CHANNELS$ == 0)*($num$==1))" index_name="_d$type$2_">
        <FORMULA_PARAM id="$type$_levels_max" min="-60" max="0" formula="$$type$_lvls_combo_formula$" />
        <FORMULA_PARAM id="$type$_hlevels_max" min="-60" max="0" formula="$$type$_hlvls_combo_formula$" />
      </IF>
    </CELL>
  </CELL>
</TEMPLATE>


<TEMPLATE id="LM_INPUT_METERS">
  <IF condition="!$SKIN_EDITABLE$">
    <!-- for static skin show input meter here only if placed "outside body" -->
    <IF condition="($METERS_PLACEMENT$ == 0)+($METERS_PLACEMENT$ == 2)" index_name="_">
      <LM_METERS type="input" /> 
    </IF>
  </IF>
  <!-- NO_EXPORT -->
  <!-- for dynamic skin place input meter here anyway (if we live-switch to it) -->
  <IF condition="$SKIN_EDITABLE$">
    <LM_METERS type="input" />
  </IF>
  <!-- END_NO_EXPORT -->
</TEMPLATE>

<TEMPLATE id="LM_OUTPUT_METERS">
  <IF condition="!$SKIN_EDITABLE$">
    <!-- for static skin show input meter here if placed "inside body", 
    so that it overlays the body -->
    <IF condition="($METERS_PLACEMENT$ == 1)+($METERS_PLACEMENT$ == 3)" index_name="_">
      <LM_METERS type="input" /> 
    </IF>
  </IF>
  <!-- NO_EXPORT -->
  <!-- for live skin place another input here, but show it only if meters_placement is 1 (inside body) and hide the first one -->
  <IF condition="$SKIN_EDITABLE$">
    <LM_METERS type="input" num="2" />
    <PARAM_LINK from="a_meters_placement" to="cell_meters_input1.display" formula="(x==0)" />
    <PARAM_LINK from="a_meters_placement" to="cell_meters_input2.display" formula="(x==1)" />
  </IF>
  <!-- END_NO_EXPORT -->
  <LM_METERS type="output" h_align="right" /> <!-- output meters -->
</TEMPLATE>


<!-- ==================== -->
<!-- Body templates -->
<!-- ==================== -->

<TEMPLATE id="PARSE_BODY_FONT" data="">
  <VAR id="N" value="0" />
  <REPEAT index_list="$data$">
    <VAR id="T$N$" value="$index$" /><NEXT_N />
  </REPEAT>
  <VAR id="BODY_FONT_FACE" value="$DEFAULT_FONT$" /> <!-- if empty - use default -->
  <REPEAT index_list="$T0$"><VAR id="BODY_FONT_FACE" value="$index$" /></REPEAT>
  <VAR id="BODY_FONT_SIZE" value="$T1$" />
  <VAR id="BODY_FONT_WEIGHT" value="$T2$" />
  <VAR id="BODY_FONT_STYLE" value="$T3$" />
  <VAR id="BODY_TEXT_COLOR" value="$T4$" />
  <VAR id="BODY_FONT_QUALITY" value="$T5$" />
</TEMPLATE>

<!-- ================= -->
<!-- BODY LAYOUT START -->
<!-- ================= -->

<!-- Main column -->
<!-- RE100 is 100% when skin is resizeable, otherwise empty -->
<LAYER_STACK id="body_wrap_cell" min_width="$BODY_MIN_WIDTH$" min_height="$BODY_MIN_HEIGHT$" v_align="$BODY_V_ALIGN$" width="$RE100$" height="$RE100$" flex="1">
  
  <!-- Body background -->
  <!-- NO_EXPORT -->
  <IF condition="$SKIN_EDITABLE$">
    <KUIML_WIDGET width="100%" height="100%" id="body_bg" innerKUIML="&lt;SKIN width='100%' height='100%'>&lt;LAYER_STACK width='100%' height='100%'> &lt;LM_BG_PARSER data='$BODY_BG$' /> &lt;LM_BODY_DECOR body1='$DECOR_BODY1$' body2='$DECOR_BODY2$' body3='$DECOR_BODY3$' body4='$DECOR_BODY4$' opacity='$DECOR_OPACITY$' /> &lt;/LAYER_STACK>&lt;/SKIN>" exposed="true" />
  </IF>
  <!-- END_NO_EXPORT -->
  <!-- for exported plugins show background 
  without KUIML_WIDGET for faster loading -->
  <IF condition="!$SKIN_EDITABLE$">
      <LM_BG_PARSER data="$BODY_BG$" />
      <LM_BODY_DECOR body1='$DECOR_BODY1$' body2='$DECOR_BODY2$' body3='$DECOR_BODY3$' body4='$DECOR_BODY4$' opacity='$DECOR_OPACITY$' />
  </IF>

  <!-- body shading -->
  <SCRIPT script="LM::bodyShaderClass bodyShader(&quot;$BODY_SHADING_DATA$&quot;, body_shading_data);" />
  <CANVAS opacity="1" id="body_shading_canvas" requires="body_shading_canvas.*" width="100%" height="100%" render_script="bodyShader.Draw(this.height, this.width)"  />
  
  <!-- NO_EXPORT -->
  <IF condition="$SKIN_EDITABLE$">
    <!-- on change of shading params -->
    <ACTION_TRIGGER event_id="body_shading_changed.value_changed" script="bodyShader.parseData(body_shading_data); body_shading_canvas.Invalidate();" requires="body_shading_changed.value_changed;body_shading_changed;body_shading_data" async="true" />
    <ACTION_TRIGGER event_id="render_settings_changed.value_changed" script="if (bodyShader.link_ls > 0) body_shading_canvas.Invalidate();" requires="render_settings_changed.value_changed" />
  </IF>
  <!-- END_NO_EXPORT -->
  
  <!-- Body content -->
  <CELL layout_type="$METERS_PLACEMENT_LAYOUT$" id="body_and_meters_cell" min_width="$BODY_MIN_WIDTH$" min_height="$BODY_MIN_HEIGHT$" width="$RE100$" height="$RE100$">
    
    <LM_INPUT_METERS />
    
    <CELL id="body_content_cell" flex="1" _v_align="$BODY_V_ALIGN$" width="$RE100$" height="$RE100$">
      <IF condition="!$BODY_STATIC_FILE_SET$">
        <!-- A placeholder for dynamic subskin (.kuiml file)
         if no .kuiml is available, then auto-layout is used -->
        
        <KUIML_WIDGET id="subskin_widget" v_margin="$BODY_PAD_V$" h_margin="$BODY_PAD_H$" v_align="$BODY_V_ALIGN$" innerKUIML="" exposed="true" width="$RE100$" height="$RE100$" />
        <!-- body content is auto-loaded via "reloadBody()" in update_skin.as -->
        <STRING_LINK from="a_body_innerKUIML" to="subskin_widget.innerKUIML" />
        <ONLOAD script="a_body_font = &quot;$BODY_FONT$&quot;;" />
      </IF>

       <!-- if static kuiml file set, include it directly -->
      <IF condition="$BODY_STATIC_FILE_SET$">
        <PARSE_BODY_FONT data="$BODY_FONT$" />
        <CELL id="subskin_static" v_margin="$BODY_PAD_V$" h_margin="$BODY_PAD_H$" v_align="$BODY_V_ALIGN$" font_size="$BODY_FONT_SIZE$" font_face="$BODY_FONT_FACE$" font_weight="$BODY_FONT_WEIGHT$" font_style="$BODY_FONT_STYLE$" font_quality="$BODY_FONT_QUALITY$" text_color="$BODY_TEXT_COLOR$" width="$RE100$" height="$RE100$">
          <INC file="$SKINS_DIR$$BODY_STATIC_FILE$" />
        </CELL>
      </IF>
    </CELL>

    <LM_OUTPUT_METERS />
  </CELL>
  
  <!-- demo warning -->
  <IF_PNS><IF_EXPORTED><REPEAT count="$SCRIPT_DEMO_MODE$">
    <WIDGET id="demo_pane" layout_type="column" margin="20" background_color="#000000" text_color="#eeeeee" opacity="0.95" visible="false">
      <TEXT value="DEMO VERSION" font_size="+1" font_weight="bold"/>
      <CELL height="5" />
      <TEXT value="This is a limited demo version." font_weight="bold"/>
      <TEXT value="Saving is disabled, and the plug-in"/>
      <TEXT value="will produce silence after 10 minutes."/>
    </WIDGET>
    <PARAM id="demo_shown" persistent="true" default="0" max="1" exposed="true"/>
    <ACTION_TRIGGER event_id="window.loaded.value_changed" script="if (demo_shown == 0) demo_pane.visible = true; " requires="demo_pane.visible" />
    <TIMER refresh_time_ms="3000" id="demo_pane.timer"/>
    <ACTION_TRIGGER event_id="demo_pane.timer.elapsed" script="demo_pane.timer.enabled=false; demopane_animator = 0; if (demo_shown==0) {demo_shown=1;}" requires="demo_pane.timer.enabled"/>
    <PARAM_ANIMATOR id="demopane_animator" param_id="demo_pane.opacity" refresh_time_ms="50" duration_ms="1000" enabled="true" exposed="true" />
  </REPEAT></IF_EXPORTED></IF_PNS>
  <!-- // demo warning end -->

</LAYER_STACK>

<!-- ================= -->
<!-- BODY LAYOUT ENDED -->
<!-- ================= -->

<!-- NO_EXPORT -->
<!-- ////////////////////////////////////////////// -->
<!-- LINKS FOR LIVE PREVIEW THROUGH SETTINGS EDITOR -->
<!-- /////////////////////////////////////////////// -->

<IF condition="$SKIN_EDITABLE$">

  <EXPOSED_OBJECTS object_ids="body_wrap_cell.v_align" />

  <PARAM_MULTI_LINK id="link_body_min_h" from="a_body_min_h" to="body_wrap_cell.min_height;body_and_meters_cell.min_height" enabled="false" />
  <PARAM_MULTI_LINK id="link_body_min_w" from="a_body_min_w" to="body_wrap_cell.min_width;body_and_meters_cell.min_width" enabled="false" />
  <PARAM_MULTI_LINK id="link_body_v_align" from="a_body_v_align" to="body_wrap_cell.v_align;body_content_cell.v_align" enabled="false" />
  <STRING_LINK id="link_body_bg_innerKUIML" from="a_body_bg_innerKUIML" to="body_bg.innerKUIML" enabled="false" />

  <!-- if we're using static file for body -->
  <IF condition="$BODY_STATIC_FILE_SET$">
    <PARAM_LINK id="link_body_pad_v" from="a_body_pad_v" to="subskin_static.v_margin" enabled="false" />
    <PARAM_LINK id="link_body_pad_h" from="a_body_pad_h" to="subskin_static.h_margin" enabled="false" />
    <PARAM_MULTI_LINK id="link_body_v_align_subskin" from="a_body_v_align" to="subskin_static.v_align" enabled="false" />
  </IF>

  <!-- if we're using dynamic file (via KUIML_WIDGET) for body -->
  <IF condition="!$BODY_STATIC_FILE_SET$">
    <PARAM_LINK id="link_body_pad_v" from="a_body_pad_v" to="subskin_widget.v_margin" enabled="false" />
    <PARAM_LINK id="link_body_pad_h" from="a_body_pad_h" to="subskin_widget.h_margin" enabled="false" />
    <PARAM_MULTI_LINK id="link_body_v_align_subskin" from="a_body_v_align" to="subskin_widget.v_align" enabled="false" />
  </IF>

  <!-- enable v_align link when needed -->
  <FORMULA_PARAM id="enable_v_align_link" formula="instant_link_enabled+skin_scanner_init_times+skin_scanner_enabled" />
  <PARAM_MULTI_LINK from="enable_v_align_link" to="link_body_v_align.enabled;link_body_v_align_subskin.enabled" />
  <!-- enable all those links when settings is opened -->
  <PARAM_MULTI_LINK from="instant_link_enabled" to="link_body_bg_innerKUIML.enabled;link_body_min_h.enabled;link_body_min_w.enabled;link_body_pad_v.enabled;link_body_pad_h.enabled" />
  
  <!-- initialize a_body_v_align param -->
  <ONLOAD script="a_body_v_align = 0;
  if (&quot;$BODY_V_ALIGN$&quot; == &quot;center&quot;) a_body_v_align = 1;
  if (&quot;$BODY_V_ALIGN$&quot; == &quot;bottom&quot;) a_body_v_align = 2;
  if (skin_scanner_enabled > 0.5) a_body_v_align = 0;
  " />

  <!-- ///////////////////////////// -->
  <!-- LINKS FOR METERS LIVE PREVIEW -->
  <!-- ///////////////////////////// -->

  <ONLOAD script="a_meters_display = $METERS_DISPLAY$; a_meters_placement = $METERS_PLACEMENT$; a_meters_min_width = $METERS_MIN_WIDTH$; a_meters_min_width_single = $METERS_MIN_WIDTH_SINGLE$; a_meters_pad_v = $METERS_PAD_V$; a_meters_pad_h = $METERS_PAD_H$; a_meters_v_offset = $METERS_V_OFFSET$; a_meters_box_widget_innerKUIML = &quot;&lt;SKIN width='100%' height='100%'>&lt;COMMON_SCRIPTS n='4900' p='MBW' /> &lt;LM_METERS_BOX /> &lt;/SKIN>&quot;" />

  <!-- show input meters (when display = 1 or 3 (both)) -->
  <PARAM_MULTI_LINK id="link_meters_display" from="a_meters_display" to="cell_input1_levels_wrap.display;cell_input2_levels_wrap.display" formula="(x==1)+(x==3)"  enabled="false" />
  <!-- show output meters (when display = 2 or 3 (both)) -->
  <PARAM_LINK id="link_meters_display2" from="a_meters_display" to="cell_output1_levels_wrap.display" formula="(x==2)+(x==3)" enabled="false" />
  <!-- determine layout type ROW(=0), COLUMN(=1), LAYER_STACK (=2) -->
  <FORMULA_PARAM id="a_meters_placement_filtered" formula="$METERS_ARE_HORIZONTAL$*((a_meters_placement==1)*2 + (a_meters_placement==0)*1) + ($METERS_ARE_HORIZONTAL$==0)*((a_meters_placement==1)*2 + (a_meters_placement==0)*0)" />
  <PARAM_LINK id="link_meters_placement" from="a_meters_placement_filtered" to="body_and_meters_cell.layout_type" enabled="false" />
  <!-- link box spacing (space between stripes) -->
  <PARAM_MULTI_LINK id="link_meters_box_spacing" from="a_meters_box_spacing" to="cell_meters_all_input1.spacing;cell_meters_all_input2.spacing;cell_meters_all_output1.spacing" enabled="false" />
  

  <!-- links for vertical meters live changes -->
  <REPEAT count="($METERS_ARE_HORIZONTAL$==0)">
    <PARAM_MULTI_LINK id="link_meters_min_size" from="a_meters_min_width" to="cell_input1_levels.min_width;cell_input2_levels.min_width;cell_output1_levels.min_width" enabled="false" />
    <PARAM_MULTI_LINK id="link_meters_pad_v" from="a_meters_pad_v" to="cell_input1_levels.v_margin;cell_input2_levels.v_margin;cell_output1_levels.v_margin" enabled="false" />
    <PARAM_MULTI_LINK id="link_meters_offset" from="a_meters_v_offset" to="cell_input1_levels.v_offset;cell_input2_levels.v_offset;cell_output1_levels.v_offset" enabled="false" />
    <PARAM_MULTI_LINK id="link_meters_pad_h" from="a_meters_pad_h" to="cell_input1_levels.h_offset;cell_input2_levels.h_offset;cell_input1_levels_wrap.h_margin;cell_input2_levels_wrap.h_margin;cell_output1_levels_wrap.h_margin" formula="x/2" enabled="false" />
    <PARAM_MULTI_LINK id="link_meters_pad_h2" from="a_meters_pad_h" to="cell_output1_levels.h_offset" formula="x/-2" enabled="false" />
    <PARAM_MULTI_LINK id="link_METERS_BOX_pad_a" from="a_meters_box_pad_a" to="cell_meters_all_input1.h_margin;cell_meters_all_input2.h_margin;cell_meters_all_output1.h_margin" enabled="false" />
    <PARAM_MULTI_LINK id="link_METERS_BOX_pad_b" from="a_meters_box_pad_b" to="cell_meters_all_input1.v_margin;cell_meters_all_input2.v_margin;cell_meters_all_output1.v_margin" enabled="false" />
    <PARAM_MULTI_LINK id="link_METERS_BOX_offset" from="a_meters_box_offset" to="cell_meters_all_input1.v_offset;cell_meters_all_input2.v_offset;cell_meters_all_output1.v_offset" enabled="false" />
  </REPEAT>

  <!-- links for horizontal meters live changes -->
  <REPEAT count="$METERS_ARE_HORIZONTAL$">
    <PARAM_MULTI_LINK id="link_meters_min_size" from="a_meters_min_width" to="cell_input1_levels.min_height;cell_input2_levels.min_height;cell_output1_levels.min_height" enabled="false" />
    <PARAM_MULTI_LINK id="link_meters_pad_v" from="a_meters_pad_v" to="cell_input1_levels_wrap.h_margin;cell_input2_levels_wrap.h_margin;cell_output1_levels_wrap.h_margin" enabled="false" />
    <PARAM_MULTI_LINK id="link_meters_offset" from="a_meters_v_offset" to="cell_input1_levels.h_offset;cell_input2_levels.h_offset;cell_output1_levels.h_offset" formula="-x" enabled="false" />
    <PARAM_MULTI_LINK id="link_meters_pad_h" from="a_meters_pad_h" to="cell_input1_levels.v_offset;cell_input2_levels.v_offset;cell_input1_levels.v_margin;cell_input2_levels.v_margin;cell_output1_levels.v_margin" formula="x/2" enabled="false" />
    <PARAM_MULTI_LINK id="link_meters_pad_h2" from="a_meters_pad_h" to="cell_output1_levels.v_offset" formula="x/-2" enabled="false" />
    <PARAM_MULTI_LINK id="link_METERS_BOX_pad_b" from="a_meters_box_pad_b" to="cell_meters_all_input1.h_margin;cell_meters_all_input2.h_margin;cell_meters_all_output1.h_margin" enabled="false" />
    <PARAM_MULTI_LINK id="link_METERS_BOX_pad_a" from="a_meters_box_pad_a" to="cell_meters_all_input1.v_margin;cell_meters_all_input2.v_margin;cell_meters_all_output1.v_margin" enabled="false" />
    <PARAM_MULTI_LINK id="link_METERS_BOX_offset" from="a_meters_box_offset" to="cell_meters_all_input1.h_offset;cell_meters_all_input2.h_offset;cell_meters_all_output1.h_offset" enabled="false" formula="-(x)"/>
  </REPEAT>

  <!-- enable all those links when settings is opened -->
  <PARAM_MULTI_LINK from="instant_link_enabled" to="link_meters_display.enabled;link_meters_display2.enabled;link_meters_placement.enabled;link_meters_min_size.enabled;link_meters_pad_v.enabled;link_meters_offset.enabled;link_meters_box_spacing.enabled;link_meters_pad_h.enabled;link_meters_pad_h2.enabled;link_METERS_BOX_pad_a.enabled;link_METERS_BOX_pad_b.enabled;link_METERS_BOX_offset.enabled" />
  
  <!-- ///////////////////////////// -->
  <!-- LINKS FOR DECORATIONS         -->
  <!-- ///////////////////////////// -->

  <ONLOAD script="a_decor_display = $DECOR_DISPLAY$;" />

</IF>
<!-- END_NO_EXPORT -->

</DUMMY>

      <!-- include status bar -->
      
<DUMMY>

<!-- ============================== -->
<!-- STATUS BAR ITEMS AND TEMPLATES -->
<!-- ============================== -->

<TEMPLATE id="STATUS_ICON">
  <REPEAT count="($SB_ICON_SHOW_MODE$ == 3)">
    <STATUS_SEPARATOR cell_id="separator_for_status_icon" />
  </REPEAT>
  <ROW h_margin="$SB_ICON_PAD_H$" v_offset="$SB_ICON_V_OFFSET$" h_offset="$SB_ICON_H_OFFSET$" id="cell_status_icon">
    <LS>
      <CELL id="cell_status_0"><SVG_ICON_RUNNING size="$SB_ICON_SIZE$" color="$SB_ICON_C1$" opacity="$SB_ICON_O1$" /></CELL>
      <CELL id="cell_status_1"><SVG_ICON_WARNING size="$SB_ICON_SIZE$" color="$SB_ICON_C2$" opacity="$SB_ICON_O2$" /></CELL>
      <CELL id="cell_status_2"><SVG_ICON_ERROR size="$SB_ICON_SIZE$" color="$SB_ICON_C3$" opacity="$SB_ICON_O3$" /></CELL>
      <CELL id="cell_status_3"><SVG_ICON_STOPWATCH size="$SB_ICON_SIZE$" color="$SB_ICON_C4$" opacity="$SB_ICON_O4$" /></CELL>
      <IAB action="OpenLogFile"><TOOLTIP string_id="status_log_text" /></IAB>
    </LS>
    <PARAM_LINK from="$script_status$" to="cell_status_0.display" formula="(x==0)" />
    <PARAM_LINK from="$script_status$" to="cell_status_1.display" formula="(x==1)" />
    <PARAM_LINK from="$script_status$" to="cell_status_2.display" formula="(x==2)" />
    <PARAM_LINK from="$script_status$" to="cell_status_3.display" formula="(x==3)" />
  </ROW>
  <REPEAT count="($SB_ICON_SHOW_MODE$ == 2)">
    <STATUS_SEPARATOR cell_id="separator_for_status_icon" />
  </REPEAT>
  <REPEAT count="($SB_ICON_SHOW_MODE$ > 0.9)">
    <PARAM_LINK from="$script_status$" to="cell_status_icon.display" formula="(x>0)*(x&lt;3)" />
  </REPEAT>
  <REPEAT count="($SB_ICON_SHOW_MODE$ > 1.9)">
    <PARAM_LINK from="$script_status$" to="separator_for_status_icon.display" formula="(x>0)*(x&lt;3)" />
  </REPEAT>
</TEMPLATE>

<TEMPLATE id="STATUS_STATE">
    <PARAM_TEXT param_id="$script_status$" content="{text_value}">
      <IAB action="OpenLogFile"><TOOLTIP string_id="status_log_text" /></IAB>
    </PARAM_TEXT>
</TEMPLATE>

<TEMPLATE id="STATUS_LOG_LINE">
  <REPEAT count="($SB_LOG_SHOW_MODE$ == 3)">
    <STATUS_SEPARATOR cell_id="separator_for_log_line" />
  </REPEAT>
  <LAYER_STACK width="$LWIDTH$" min_width="$SB_LOG_MINWIDTH$" flex="1" id="cell_status_log_text">
    <TEXT width="100%" id="tx_status_log_text" string_id="$script_status_string$" v_offset="0" text_h_align="left" h_align="left" />
    <!-- a nice tiny animation on "pushed" log line -->
    <PARAM_LINK from="open_log_button.pushed" to="tx_status_log_text.v_offset"/>
    <PARAM_LINK from="open_log_button.pushed" to="tx_status_log_text.h_offset"/>
    <IAB action="OpenLogFile" id="open_log_button"><TOOLTIP string_id="status_log_text" /></IAB>
  </LAYER_STACK>
  <REPEAT count="($SB_LOG_SHOW_MODE$ ==2)">
    <STATUS_SEPARATOR cell_id="separator_for_log_line" />
  </REPEAT>
  <REPEAT count="($SB_LOG_SHOW_MODE$ > 0)" index_name="_ddisnfs">
    <PARAM_LINK from="_a_log_unusual_text" to="cell_status_log_text.display" />
  </REPEAT>
  <REPEAT count="($SB_LOG_SHOW_MODE$ > 1.9)">
    <PARAM_LINK from="_a_log_unusual_text" to="separator_for_log_line.display" />
  </REPEAT>
</TEMPLATE>

<TEMPLATE id="STATUS_CUSTOM_TEXT">
  <LAYER_STACK min_width="$SB_CUSTEXT_MINWIDTH$" flex="1" >
    <UNDEFINE><SB_CUS_TEXT /></UNDEFINE>
    <REPEAT count="$SB_CUSTEXT_EDITABLE$ == 0" index_name="_dcte10">
      <DEFINE><SB_CUS_TEXT base_type="TEXT" /></DEFINE>
    </REPEAT>
    <REPEAT count="$SB_CUSTEXT_EDITABLE$ == 1" index_name="_dcte11">
      <DEFINE><SB_CUS_TEXT base_type="TEXT_FIELD"  /></DEFINE>
    </REPEAT>
    <SB_CUS_TEXT width="100%" id="tx_status_custom_text" string_id="status_custom_text" text_h_align="left" h_align="left"><TT string_id="status_custom_text" /></SB_CUS_TEXT>
    <EXPOSED_OBJECTS object_ids="tx_status_custom_text.*" />
    <PARAM_CONNECTION id1="a_status_custom_text_opacity" id2="tx_status_custom_text.opacity" />
  </LAYER_STACK>
</TEMPLATE>

<TEMPLATE id="STATUS_SEPARATOR" cell_id="">
  <CELL v_margin="0" h_margin="$SB_SEP_PAD_H$" v_offset="$SB_SEP_OFFSET$" id="$cell_id$">
    <svg width="$SB_SEP_W$" height="$SB_SEP_H$" viewBox='0 0 10 10' opacity="$SB_SEP_OP$">
      <rect fill="$SB_SEP_COLOR$" width="100%" height="100%" />
    </svg>
  </CELL>
</TEMPLATE>

<TEMPLATE id="STATUS_SAMPLERATE">
  <PARAM_TEXT param_id="dsp.sample_rate" content="{value} Hz" value_format="0.0" />
</TEMPLATE>

<TEMPLATE id="STATUS_BLOCKSIZE">
  <PARAM_TEXT param_id="dsp.max_block_size" content="{value} smp" value_format="0.0" />
</TEMPLATE>

<TEMPLATE id="STATUS_CHANNELS">
  <PARAM_TEXT param_id="dsp.connected_inputs_count" content="{value}" value_format="0.0" />
  <TEXT value="/" />
  <PARAM_TEXT param_id="dsp.connected_outputs_count" content="{value}" value_format="0.0" />
</TEMPLATE>

<TEMPLATE id="STATUS_CORNER_RESIZER_SPACE">
  <CELL width="$STATUS_CORNER_RESIZER_SPACE$" />
</TEMPLATE>


<!-- showing tooltip with whole log line -->
<STRING id="status_subtext_status" default="" />
<PARAM_TO_STRING_LINK from="$script_status$" to="status_subtext_status" content="Status: {text_value}" />
<STRING id="status_subtext_click" default="[ Click to open log file ]" />
<STRING id="status_log_text" default="---" />
<STRING_MULTI_LINK from="$script_status_string$;status_subtext_status;status_subtext_click" to="status_log_text" enabled="true" separator="&#10;" />

<!-- explode params into vars -->
<TEMPLATE id="PARSE_STATUS_PARAMS" content=";0;-;-;#FFFFFF;default;5;150" layout="0;0;135;1;150" flex_cells="1;0;0">
  <VAR id="N" value="0" />
  <REPEAT index_list="$content$">
    <VAR id="T$N$" value="$index$" /><NEXT_N />
  </REPEAT>
  <VAR id="SB_FONT_FACE" value="$DEFAULT_FONT$" /> <!-- if empty - use default -->
  <REPEAT index_list="$T0$"><VAR id="SB_FONT_FACE" value="$index$" /></REPEAT>
  <VAR id="SB_FONT_SIZE" value="$T1$" />
  <VAR id="SB_FONT_WEIGHT" value="$T2$" />
  <VAR id="SB_FONT_STYLE" value="$T3$" />
  <VAR id="SB_TEXT_COLOR" value="$T4$" />
  <VAR id="SB_FONT_QUALITY" value="$T5$" />
  <VAR id="SB_ITEMS_SPACING" value="$T6$" />
  <VAR id="SB_CELLS_SPACING" value="$T7$" />
  <!-- 8 reserved -->
  <!-- <VAR id="SB_LOG_SHOW_MODE" value="$T9$" /> 
  <VAR id="SB_LOG_MINWIDTH" value="$T10$" /> -->
  <VAR id="SB_ICON_SIZE" value="$T11$" />
  <VAR id="SB_ICON_PAD_H" value="$T12$" />
  <VAR id="SB_ICON_H_OFFSET" value="$T13$" />
  <VAR id="SB_ICON_V_OFFSET" value="$T14$" />
  <!-- <VAR id="SB_ICON_SHOW_MODE" value="$T15$" /> -->
  <VAR id="SB_ICON_C1" value="$T16$" />
  <VAR id="SB_ICON_O1" value="$T17$" />
  <VAR id="SB_ICON_C2" value="$T18$" />
  <VAR id="SB_ICON_O2" value="$T19$" />
  <VAR id="SB_ICON_C3" value="$T20$" />
  <VAR id="SB_ICON_O3" value="$T21$" />
  <VAR id="SB_ICON_C4" value="$T22$" />
  <VAR id="SB_ICON_O4" value="$T23$" />

  <VAR id="SB_SEP_COLOR" value="$T25$" />
  <VAR id="SB_SEP_OP" value="$T26$" />
  <VAR id="SB_SEP_W" value="$T27$" />
  <VAR id="SB_SEP_H" value="$T28$" />
  <VAR id="SB_SEP_PAD_H" value="$T29$" />
  <VAR id="SB_SEP_OFFSET" value="$T30$" />
  <!--
  <VAR id="SB_CUSTEXT_MINWIDTH" value="$T33$" />
  <VAR id="SB_CUSTEXT_EDITABLE" value="$T34$" />
  -->

  <VAR id="N" value="0" />
  <REPEAT index_list="$flex_cells$">
    <VAR id="T$N$" value="$index$" /><NEXT_N />
  </REPEAT>
  <VAR id="STATUS_FLEX_left" value="$T0$" />
  <VAR id="STATUS_FLEX_center" value="$T1$" />
  <VAR id="STATUS_FLEX_right" value="$T2$" />

  <VAR id="N" value="0" />
  <REPEAT index_list="$layout$">
    <VAR id="T$N$" value="$index$" /><NEXT_N />
  </REPEAT>
  <VAR id="SB_ICON_SHOW_MODE" value="$T0$" />
  <VAR id="SB_LOG_SHOW_MODE" value="$T1$" /> 
  <VAR id="SB_LOG_MINWIDTH" value="$T2$" />
  <VAR id="SB_CUSTEXT_EDITABLE" value="$T3$" />
  <VAR id="SB_CUSTEXT_MINWIDTH" value="$T4$" />
  
  <R count="$LM_SKIN_RESIZEABLE$">
    <VAR id="STATUS_ITEMS_RIGHT" value="$STATUS_ITEMS_RIGHT$;CORNER_RESIZER_SPACE" />
  </R>
</TEMPLATE>

<!-- template to display status bar items  -->
<TEMPLATE id="SB_LAYOUT_ITEMS" items="" h_align="left" spacing="0">
  <LV id="is_flex" value="0" />
  <REPEAT count="($STATUS_FLEX_$h_align$$ > 0)">
    <LV id="is_flex" value="1" />
  </REPEAT>
  <ROW h_align="$h_align$" internal_h_align="$h_align$" flex="$is_flex$" spacing="$spacing$">
    <REPEAT index_list="$items$">
      <DEFINE><_THIS_ base_type="STATUS_$index$" /></DEFINE>
      <_THIS_ is_flex="$is_flex$" />
      <UNDEFINE><_THIS_ /></UNDEFINE>
    </REPEAT>
  </ROW>
</TEMPLATE>

<!-- ======================= -->
<!-- STATUS BAR LAYOUT START -->
<!-- ======================= -->

<LAYER_STACK width="100%" min_width="150" id="status_area" display="$STATUS_DISPLAY_BOOL$" min_height="$STATUS_MIN_HEIGHT$">

  <!-- status background -->
  <!-- NO_EXPORT -->
  <IF condition="$SKIN_EDITABLE$">
    <KUIML_WIDGET width="100%" height="100%" id="status_bg" innerKUIML="&lt;SKIN width='100%' height='100%'>&lt;LAYER_STACK width='100%' height='100%'> &lt;LM_BG_PARSER data='$STATUS_BG$' />&lt;LM_STATUS_DECOR status='$DECOR_STATUS$' opacity='$DECOR_OPACITY$' />&lt;/LAYER_STACK> &lt;/SKIN>" exposed="true" />
  </IF>
  <!-- END_NO_EXPORT -->
  <IF condition="!$SKIN_EDITABLE$">
    <LM_BG_PARSER data="$STATUS_BG$" />
    <LM_STATUS_DECOR status='$DECOR_STATUS$' opacity='$DECOR_OPACITY$' />
  </IF>

  <!-- status bar content -->
  <ROW id="status_content" width="100%" v_offset="$STATUS_V_OFFSET$" h_margin="$STATUS_PAD_H$">

    <!-- load status statically for normal mode -->
    <IF condition="!$SKIN_EDITABLE$">
      <PARSE_STATUS_PARAMS content="$STATUS_CONTENT$" flex_cells="$STATUS_FLEX_CELLS$" layout="$STATUS_LAYOUT$" />
      <CELL layout_type="row" width="100%" font_face="$SB_FONT_FACE$" font_size="$SB_FONT_SIZE$" font_weight="$SB_FONT_WEIGHT$" font_style="$SB_FONT_STYLE$" font_quality="$SB_FONT_QUALITY$" text_color="$SB_TEXT_COLOR$" spacing="$SB_CELLS_SPACING$">
        <!-- left side items -->
        <SB_LAYOUT_ITEMS h_align="left" items="$STATUS_ITEMS_LEFT$" spacing="$SB_ITEMS_SPACING$" />
        
        <!-- center items-->
        <SB_LAYOUT_ITEMS h_align="center" items="$STATUS_ITEMS_CENTER$" spacing="$SB_ITEMS_SPACING$" />

        <!-- right side items -->
        <SB_LAYOUT_ITEMS h_align="right" items="$STATUS_ITEMS_RIGHT$" spacing="$SB_ITEMS_SPACING$" />
      </CELL>
    </IF>
    
    <!-- NO_EXPORT -->
    <!-- load toolbar dynamically for skin preview mode -->
    <IF condition="$SKIN_EDITABLE$">
      <KUIML_WIDGET id="status_widget" width="100%" innerKUIML="&lt;SKIN>&lt;/SKIN>" exposed="true" />
      <STRING_LINK id="link_status_innerKUIML" from="a_status_innerKUIML" to="status_widget.innerKUIML" enabled="false" />
      <EXPOSED_OBJECTS object_ids="link_status_innerKUIML.*" />
    </IF>
    <!-- END_NO_EXPORT -->
  </ROW> 

</LAYER_STACK>

<!-- ===================== -->
<!-- STATUS BAR LAYOUT END -->
<!-- ===================== -->

<!-- param for status bar dynamic show/hide -->
<ONLOAD script="a_status_display = $STATUS_DISPLAY$; _a_log_unusual_text = false; " />

<!-- refresh log lines analyzing on script reloading/status change -->
<ACTION_TRIGGER event_id="$script_status$.value_changed" requires="$script_status$" script="_a_log_unusual_text = false;" />

<!-- check if we receive unusual text in log -->
<ACTION_TRIGGER event_id="$script_status_string$.value_changed;window.loaded.value_changed;_a_log_unusual_text.value_changed" requires="$script_status_string$" script="
  
  /* skip if unusual text was already detected */
  if (_a_log_unusual_text &lt; 0.5) {
    string logline = $script_status_string$; 
    bool usual_text = (((logline.findFirst(&quot;Script successfully loaded&quot;) > -1) or (logline.findFirst(&quot;Loading script file&quot;) > -1) or (logline.findFirst(&quot;Loading native script file&quot;) > -1) or (logline == &quot;&quot;)) and !(logline.findFirst(&quot;warning&quot;) > -1));
    if (!usual_text) {
      _a_log_unusual_text = true;
      a_status_invalidate++;
    }
  }
" />

<!-- <PARAM_TEXT param_id="_a_log_unusual_text" /> -->

<!-- show status bar only if unusual strings received -->
<ACTION_TRIGGER event_id="a_status_invalidate.value_changed" script="
  _a_do_show_status_area = false; 
  /* if always show statubar */
  if (a_status_display > 1.9) {
    _a_do_show_status_area = true;
  } else 
  /* if show statubar only when needed */
  if (a_status_display > 0.9) { 
    _a_do_show_status_area = (_a_log_unusual_text > 0.5); 
  } 
  status_area.display = _a_do_show_status_area; 
  /* NO_EXPORT */ reloadStatusbar(); /* END_NO_EXPORT */
  " requires="status_area.display;$script_status_string$" async="true" />

<!-- NO_EXPORT -->
<!-- ======================= -->
<!-- LINKS FOR EDITABLE MODE -->
<!-- ======================= -->

<IF condition="$SKIN_EDITABLE$">
  <ONLOAD script="a_status_content_params=&quot;$STATUS_CONTENT$&quot;; a_status_layout_params=&quot;$STATUS_LAYOUT$&quot;; a_status_flex_cells = &quot;$STATUS_FLEX_CELLS$&quot;; a_status_items_left=&quot;$STATUS_ITEMS_LEFT$&quot;; a_status_items_center=&quot;$STATUS_ITEMS_CENTER$&quot;; a_status_items_right=&quot;$STATUS_ITEMS_RIGHT$&quot;; reloadStatusbar(); link_status_innerKUIML.enabled=true;" />
  <!-- linking for instant settings preview through settings editor -->
  <STRING_LINK id="link_status_bg_innerKUIML" from="a_status_bg_innerKUIML" to="status_bg.innerKUIML" enabled="false" />
  <PARAM_LINK id="link_status_area_min_height" from="a_status_area_min_height" to="status_area.min_height" enabled="false" />
  <PARAM_LINK id="link_status_area_v_offset" from="a_status_v_offset" to="status_content.v_offset" enabled="false" />
  <PARAM_LINK id="link_status_area_pad_h" from="a_status_pad_h" to="status_content.h_margin" enabled="false" />
  <PARAM_MULTI_LINK from="instant_link_enabled" to="link_status_area_min_height.enabled;link_status_bg_innerKUIML.enabled;link_status_area_v_offset.enabled;link_status_area_pad_h.enabled" />
</IF>
<!-- END_NO_EXPORT -->

</DUMMY>

    </CELL>

    <!-- corner icon to change window size (visible if MAKE_RESIZEABLE is used) -->
    <CORNER_RESIZER size="16" color="#777777" opacity="1" />
    
  </LAYER_STACK>
  <!-- MARKUP END -->
  
</SKIN>
